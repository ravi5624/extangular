const fs = require('fs');
const xfs = require('fs-extra');
const path = require('path');
const pkg = require('./package.json');

module.exports = (pkgHome, done) => {
    let pkgJsonPath = path.join(pkgHome, 'package.json');
    let pkgJson = require(pkgJsonPath);
    let allcssPath;
    let allcss;
    try {
        switch (pkgJson.name) {
            case "@sencha/ext":
                let senchacfgPath = path.join(pkgHome, 'cmd/sencha.cfg');
                let senchacfg = fs.readFileSync(senchacfgPath, 'utf-8');
                fs.writeFileSync(senchacfgPath, senchacfg.replace(/(ext\.license\.name)=(\w*)/,'$1=commercial'));
                xfs.removeSync(path.join(pkgHome, 'resources/ext-watermark'));
            break;
            case "@sencha/ext-modern-theme-base":
                allcssPath = path.join(pkgHome, 'sass/etc/all.scss');
                allcss = fs.readFileSync(allcssPath, 'utf-8');
                fs.writeFileSync(allcssPath, allcss.replace(/(\$ext-trial): (\w*)/, "$1: false").replace(/(\$ext-beta): (\w*)/, "$1: false"));
            break;
            case "@sencha/ext-classic-theme-base":
                allcssPath = path.join(pkgHome, 'sass/etc/all.scss');
                allcss = fs.readFileSync(allcssPath, 'utf-8');
                fs.writeFileSync(allcssPath, allcss.replace(/(\$ext-trial): (\w*)/, "$1: false").replace(/(\$ext-beta): (\w*)/, "$1: false"));
            break;
        }
        done();
    } catch (err) {
        done(err);
    }
};