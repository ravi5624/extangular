const fs = require('fs');
const os = require("os");
const path = require('path');
const pkg = require('./package.json');
const xfs = require('fs-extra');

let callback = (pkgHome, pkgJsonPath, pkgJson) => {
    xfs.copySync(path.join(__dirname,'license.txt'), path.join(pkgHome, "license.txt"));
    xfs.copySync(path.join(__dirname,'license-include.txt'), path.join(pkgHome, "license-include.txt"));
    pkgJson._activatedby = `${pkg.name}@${pkg.version}`;
    fs.writeFileSync(pkgJsonPath, JSON.stringify(pkgJson, null, 2));
    
    try {
        require('child_process').spawn(
            `npm${/^win/.test(os.platform()) ? ".cmd" : ""}`,
            ['remove', pkg.name],
            {
                cwd: pkgHome,
                detached: false,
                stdio: 'ignore'
            }
        ).unref();
    } catch (ignore) {
        try {
            if (fs.existsSync(path.join(__dirname, 'transformations.js'))) {
                fs.unlinkSync(path.join(__dirname, 'transformations.js'));
            }
            fs.existsSync(path.join(__dirname, 'index.js'));
            fs.existsSync(path.join(__dirname, 'package.json'));
        } catch (ignore) {}
    }
}

module.exports = (pkgHome) => {
    let pkgJsonPath = path.join(pkgHome, 'package.json');
    let pkgJson = require(pkgJsonPath);
    if (fs.existsSync(path.join(__dirname, 'transformations.js'))) {
        require('./transformations')(
            pkgHome,
            (err) => {
                if (err) {
                    if (["silent", "error", "warn", "http", "info", "verbose", "silly"].indexOf(process.env.npm_config_loglevel) > 3) {
                        console.log('Please file a Sencha Support ticket an include the following information: ');
                        console.error(err);
                    } else { 
                        console.log(`An error occurred while activating ${pkgJson.name}.`); 
                        console.log(`Please re-install using '-d' for more information.`); 
                    }
                }
                callback(pkgHome, pkgJsonPath, pkgJson);
            }
        );
    } else {
        callback(pkgHome, pkgJsonPath, pkgJson);
    }
};