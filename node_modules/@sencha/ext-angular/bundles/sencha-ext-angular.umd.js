(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/platform-browser-dynamic'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@sencha/ext-angular', ['exports', '@angular/platform-browser-dynamic', '@angular/core'], factory) :
    (factory((global.sencha = global.sencha || {}, global.sencha['ext-angular'] = {}),global.ng.platformBrowserDynamic,global.ng.core));
}(this, (function (exports,platformBrowserDynamic,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtAngularBootstrapService = /** @class */ (function () {
        function ExtAngularBootstrapService(componentFactoryResolver, appRef, injector) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.appRef = appRef;
            this.injector = injector;
        }
        /**
         * @return {?}
         */
        ExtAngularBootstrapService.prototype.appendComponentToViewport = /**
         * @return {?}
         */
            function () {
                //console.log("In appendComponentToViewport")
                if (!this.bootstrapComponent) {
                    throw new Error("Bootstrap component not set. Please use extAngularService.setBootStrapComponent(yourComponent) to setup bootstrap component from your root module constructor");
                }
                //console.log("bootstrapComponent : " + this.bootstrapComponent)
                /** @type {?} */
                var componentRef = this.componentFactoryResolver
                    .resolveComponentFactory(this.bootstrapComponent)
                    .create(this.injector);
                this.appRef.attachView(componentRef.hostView);
                /** @type {?} */
                var domElem = ( /** @type {?} */((( /** @type {?} */(componentRef.hostView)))
                    .rootNodes[0]));
                /** @type {?} */
                var root = document.getElementsByClassName('x-viewport-body-el')[0];
                root.appendChild(domElem);
            };
        /**
         * @param {?} component
         * @return {?}
         */
        ExtAngularBootstrapService.prototype.setBootStrapComponent = /**
         * @param {?} component
         * @return {?}
         */
            function (component) {
                //console.log("In setBootStrapComponent")
                this.bootstrapComponent = component;
            };
        ExtAngularBootstrapService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ExtAngularBootstrapService.ctorParameters = function () {
            return [
                { type: i0.ComponentFactoryResolver },
                { type: i0.ApplicationRef },
                { type: i0.Injector }
            ];
        };
        /** @nocollapse */ ExtAngularBootstrapService.ngInjectableDef = i0.defineInjectable({ factory: function ExtAngularBootstrapService_Factory() { return new ExtAngularBootstrapService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.ApplicationRef), i0.inject(i0.INJECTOR)); }, token: ExtAngularBootstrapService, providedIn: "root" });
        return ExtAngularBootstrapService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtAngularBootstrapComponent = /** @class */ (function () {
        function ExtAngularBootstrapComponent(extAngularService) {
            this.extAngularService = extAngularService;
            //console.log("In App constructor")
            this.extAngularService.appendComponentToViewport();
        }
        ExtAngularBootstrapComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-root',
                        template: ""
                    }] }
        ];
        /** @nocollapse */
        ExtAngularBootstrapComponent.ctorParameters = function () {
            return [
                { type: ExtAngularBootstrapService }
            ];
        };
        return ExtAngularBootstrapComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var base = /** @class */ (function () {
        function base(nativeElement, metaData, hostComponent) {
            var _this = this;
            this.metaData = metaData;
            this.hostComponent = hostComponent;
            this._extChildren = false;
            this.q = null;
            this._nativeElement = nativeElement;
            this._hostComponent = hostComponent;
            metaData.EVENTNAMES.forEach(( /**
             * @param {?} event
             * @param {?} n
             * @return {?}
             */function (event, n) {
                if (event != 'fullscreen') {
                    (( /** @type {?} */(_this)))[event] = new i0.EventEmitter();
                }
                else {
                    (( /** @type {?} */(_this)))[event + 'event'] = new i0.EventEmitter();
                }
            }));
        }
        /**
         * @param {?} metaData
         * @return {?}
         */
        base.prototype.baseOnInit = /**
         * @param {?} metaData
         * @return {?}
         */
            function (metaData) {
                //console.log(`ngOnInit: ${metaData.XTYPE}`)
                /** @type {?} */
                var me = this;
                /** @type {?} */
                var o = {};
                o.xtype = metaData.XTYPE;
                /** @type {?} */
                var listneresProvided = false;
                for (var i = 0; i < me.metaData.PROPERTIES.length; i++) {
                    /** @type {?} */
                    var prop = me.metaData.PROPERTIES[i];
                    if (prop == 'handler') {
                        if (me[prop] != undefined) {
                            o[prop] = me[prop];
                        }
                    }
                    //need to handle listeners coming in here
                    if ((o.xtype === 'cartesian' || o.xtype === 'polar') && prop === 'layout') ;
                    else if (prop == 'listeners' && me[prop] != undefined) {
                        o[prop] = me[prop];
                        listneresProvided = true;
                    }
                    else {
                        if (me[prop] != undefined &&
                            prop != 'listeners' &&
                            prop != 'config' &&
                            prop != 'handler' &&
                            prop != 'fitToParent') {
                            o[prop] = me[prop];
                        }
                    }
                }
                if (true === me.fitToParent) {
                    o.top = 0,
                        o.left = 0,
                        o.width = '100%',
                        o.height = '100%';
                }
                if (me.config !== {}) {
                    Ext.apply(o, me.config);
                }
                if (!listneresProvided) {
                    o.listeners = {};
                    /** @type {?} */
                    var EVENTS = metaData.EVENTS;
                    EVENTS.forEach(( /**
                     * @param {?} event
                     * @param {?} index
                     * @param {?} array
                     * @return {?}
                     */function (event, index, array) {
                        /** @type {?} */
                        var eventname = event.name;
                        /** @type {?} */
                        var eventparameters = event.parameters;
                        o.listeners[eventname] = ( /**
                         * @return {?}
                         */function () {
                            /** @type {?} */
                            var parameters = eventparameters;
                            /** @type {?} */
                            var parms = parameters.split(',');
                            /** @type {?} */
                            var args = Array.prototype.slice.call(arguments);
                            /** @type {?} */
                            var emitparms = {};
                            for (var i_1 = 0, j = parms.length; i_1 < j; i_1++) {
                                emitparms[parms[i_1]] = args[i_1];
                            }
                            me[eventname].emit(emitparms);
                        });
                    }));
                }
                if (this._nativeElement.parentElement != null) {
                    o.renderTo = this._nativeElement;
                }
                this.ext = Ext.create(o);
            };
        /**
         * @return {?}
         */
        base.prototype.baseAfterContentInit = /**
         * @return {?}
         */
            function () {
                if (this._extitems.length == 1) {
                    if (this._hostComponent != null) {
                        this.ext.setHtml(this._extitem.nativeElement);
                    }
                }
                if (this._extroutes.length == 1) {
                    this.ext.setHtml(this._extroute.nativeElement);
                }
                if (this._hostComponent != null) {
                    /** @type {?} */
                    var parentCmp = this._hostComponent.ext;
                    /** @type {?} */
                    var childCmp = this.ext;
                    this.addTheChild(parentCmp, childCmp);
                }
                this['ready'].emit(this);
            };
        /**
         * @param {?} parentCmp
         * @param {?} childCmp
         * @return {?}
         */
        base.prototype.addTheChild = /**
         * @param {?} parentCmp
         * @param {?} childCmp
         * @return {?}
         */
            function (parentCmp, childCmp) {
                /** @type {?} */
                var parentxtype = parentCmp.xtype;
                /** @type {?} */
                var childxtype = childCmp.xtype;
                if (this.ext.initialConfig.align != undefined) {
                    if (parentxtype != 'titlebar' && parentxtype != 'grid' && parentxtype != 'button') {
                        console.error('Can only use align property if parent is a Titlebar or Grid or Button');
                        return;
                    }
                }
                if (parentxtype === 'grid' || parentxtype === 'lockedgrid') {
                    if (childxtype === 'column' || childxtype === 'treecolumn' || childxtype === 'textcolumn' || childxtype === 'checkcolumn' || childxtype === 'datecolumn' || childxtype === 'rownumberer' || childxtype === 'numbercolumn' || childxtype === 'booleancolumn') {
                        parentCmp.addColumn(childCmp);
                        return;
                    }
                    else if ((childxtype === 'toolbar' || childxtype === 'titlebar') && parentCmp.getHideHeaders != undefined) {
                        if (parentCmp.getHideHeaders() === false) {
                            //var j = parentCmp.items.items.length;
                            parentCmp.insert(1, childCmp);
                            return;
                        }
                        else {
                            parentCmp.add(childCmp);
                            return;
                        }
                    }
                    else {
                        console.log('unhandled else in addTheChild');
                        console.log(parentxtype);
                        console.log(childxtype);
                    }
                }
                if (childxtype === 'tooltip') {
                    parentCmp.setTooltip(childCmp);
                    return;
                }
                if (childxtype === 'plugin') {
                    parentCmp.setPlugin(childCmp);
                    return;
                }
                else if (parentxtype === 'button') {
                    if (childxtype === 'menu') {
                        parentCmp.setMenu(childCmp);
                        return;
                    }
                    else {
                        console.log('child not added');
                    }
                }
                if (childxtype === 'toolbar' && Ext.isClassic === true) {
                    parentCmp.addDockedItems(childCmp);
                    return;
                }
                else if ((childxtype === 'toolbar' || childxtype === 'titlebar') && parentCmp.getHideHeaders != undefined) {
                    if (parentCmp.getHideHeaders() === false) {
                        //var j: any = parentCmp.items.items.length
                        //parentCmp.insert(j - 1, childCmp)
                        parentCmp.insert(1, childCmp);
                        return;
                    }
                    else {
                        parentCmp.add(childCmp);
                        return;
                    }
                }
                if (parentCmp.add != undefined) {
                    parentCmp.add(childCmp);
                    return;
                }
                console.log('child not added');
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        base.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                for (var propName in changes) {
                    /** @type {?} */
                    var verb = '';
                    if (changes[propName].firstChange === true) {
                        verb = 'initialized';
                    }
                    else {
                        verb = 'changed';
                    }
                    /** @type {?} */
                    var val = changes[propName].currentValue;
                    if (this.ext != undefined) {
                        /** @type {?} */
                        var capPropName = propName.charAt(0).toUpperCase() + propName.slice(1);
                        /** @type {?} */
                        var setFunction = 'set' + capPropName;
                        if (this.ext[setFunction] != undefined) {
                            this.ext[setFunction](val);
                        }
                        else {
                            console.error(setFunction + ' not found for ' + this.ext.xtype);
                        }
                    }
                    else {
                        if (verb == 'changed') {
                            console.log('change needed and ext not defined');
                        }
                    }
                }
                //console.log(`OnChanges: ${changesMsgs.join('; ')}`)
            };
        /**
         * @return {?}
         */
        base.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var childCmp;
                /** @type {?} */
                var parentCmp;
                try {
                    childCmp = this.ext;
                    if (this._hostComponent != null) {
                        parentCmp = this._hostComponent.ext;
                        if (parentCmp.xtype == 'button' && childCmp.xtype == 'menu') ;
                        else if (parentCmp.xtype == 'carousel') ;
                        else if (parentCmp.xtype == 'grid' && childCmp.xtype == 'column') ;
                        else if (parentCmp.xtype == 'segmentedbutton' && childCmp.xtype == 'button') ;
                        else if (parentCmp.xtype == 'button' && childCmp.xtype == 'tooltip') ;
                        else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'button') ;
                        else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'searchfield') ;
                        else {
                            parentCmp.remove([childCmp]);
                            childCmp.destroy();
                        }
                    }
                    else {
                        if (childCmp != undefined) {
                            childCmp.destroy();
                        }
                        else {
                            console.log('no destroy');
                        }
                    }
                }
                catch (e) {
                    console.error(e);
                    console.log('*****');
                    console.log(parentCmp);
                    console.log(childCmp);
                    console.log('*****');
                }
            };
        base.propDecorators = {
            _extroute: [{ type: i0.ContentChild, args: ['extroute',] }],
            _extroutes: [{ type: i0.ContentChildren, args: ['extroute',] }],
            _extitem: [{ type: i0.ContentChild, args: ['extitem',] }],
            _extitems: [{ type: i0.ContentChildren, args: ['extitem',] }]
        };
        return base;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var actionsheetMetaData = /** @class */ (function () {
        function actionsheetMetaData() {
        }
        actionsheetMetaData.XTYPE = 'actionsheet';
        actionsheetMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enter',
            'enterAnimation',
            'eventHandlers',
            'exit',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        actionsheetMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,actionsheet,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'actionsheet,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'actionsheet' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'actionsheet' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'actionsheet,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'actionsheet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'actionsheet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'actionsheet' },
            { name: 'deactivate', parameters: 'oldActiveItem,actionsheet,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'actionsheet' },
            { name: 'drawershow', parameters: 'actionsheet' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'actionsheet' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'actionsheet,event' },
            { name: 'focusenter', parameters: 'actionsheet,event' },
            { name: 'focusleave', parameters: 'actionsheet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'actionsheet,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'actionsheet,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'actionsheet,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'actionsheet,context' },
            { name: 'resizedragcancel', parameters: 'actionsheet,context' },
            { name: 'resizedragend', parameters: 'actionsheet,context' },
            { name: 'resizedragstart', parameters: 'actionsheet,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'actionsheet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        actionsheetMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return actionsheetMetaData;
    }());
    var ExtActionsheetComponent = /** @class */ (function (_super) {
        __extends(ExtActionsheetComponent, _super);
        function ExtActionsheetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, actionsheetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtActionsheetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(actionsheetMetaData);
            };
        /**
         * @return {?}
         */
        ExtActionsheetComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtActionsheetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'actionsheet',
                        inputs: actionsheetMetaData.PROPERTIES,
                        outputs: actionsheetMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtActionsheetComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtActionsheetComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtActionsheetComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var audioMetaData = /** @class */ (function () {
        function audioMetaData() {
        }
        audioMetaData.XTYPE = 'audio';
        audioMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoPause',
            'autoResume',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'controls',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableControls',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'loop',
            'margin',
            'maxHeight',
            'maxWidth',
            'media',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'muted',
            'name',
            'nameable',
            'padding',
            'plugins',
            'preload',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'volume',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        audioMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'audio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'audio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'audio,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'audio,event' },
            { name: 'focusenter', parameters: 'audio,event' },
            { name: 'focusleave', parameters: 'audio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'audio,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'audio,time' },
            { name: 'play', parameters: 'audio' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'audio' },
            { name: 'timeupdate', parameters: 'audio,time' },
            { name: 'tofront', parameters: 'audio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'audio,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        audioMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'ended',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'mutedchange',
            'orientationchange',
            'painted',
            'pause',
            'play',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'stop',
            'timeupdate',
            'tofront',
            'topchange',
            'updatedata',
            'volumechange',
            'widthchange',
            'ready'
        ];
        return audioMetaData;
    }());
    var ExtAudioComponent = /** @class */ (function (_super) {
        __extends(ExtAudioComponent, _super);
        function ExtAudioComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, audioMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtAudioComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(audioMetaData);
            };
        /**
         * @return {?}
         */
        ExtAudioComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtAudioComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'audio',
                        inputs: audioMetaData.PROPERTIES,
                        outputs: audioMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtAudioComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtAudioComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtAudioComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var buttonMetaData = /** @class */ (function () {
        function buttonMetaData() {
        }
        buttonMetaData.XTYPE = 'button';
        buttonMetaData.PROPERTIES = [
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        buttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'button' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'button,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'button,event' },
            { name: 'focusenter', parameters: 'button,event' },
            { name: 'focusleave', parameters: 'button,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'button,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'button,e' },
            { name: 'tofront', parameters: 'button' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        buttonMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return buttonMetaData;
    }());
    var ExtButtonComponent = /** @class */ (function (_super) {
        __extends(ExtButtonComponent, _super);
        function ExtButtonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, buttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(buttonMetaData);
            };
        /**
         * @return {?}
         */
        ExtButtonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'button',
                        inputs: buttonMetaData.PROPERTIES,
                        outputs: buttonMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtButtonComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtButtonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtButtonComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_eventMetaData = /** @class */ (function () {
        function calendar_eventMetaData() {
        }
        calendar_eventMetaData.XTYPE = 'calendar-event';
        calendar_eventMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultTitle',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'endDate',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'model',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'palette',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resize',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'startDate',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'timeFormat',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'view',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_eventMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-event' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-event,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-event,event' },
            { name: 'focusenter', parameters: 'calendar-event,event' },
            { name: 'focusleave', parameters: 'calendar-event,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-event' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_eventMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_eventMetaData;
    }());
    var ExtCalendar_eventComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_eventComponent, _super);
        function ExtCalendar_eventComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_eventMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_eventComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_eventMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_eventComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_eventComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-event',
                        inputs: calendar_eventMetaData.PROPERTIES,
                        outputs: calendar_eventMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_eventComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_eventComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_eventComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_form_addMetaData = /** @class */ (function () {
        function calendar_form_addMetaData() {
        }
        calendar_form_addMetaData.XTYPE = 'calendar-form-add';
        calendar_form_addMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allDayField',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'calendarField',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultEndTime',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultStartTime',
            'defaultToolWeights',
            'defaultType',
            'descriptionField',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'dropButton',
            'enableSubmissionForm',
            'enctype',
            'endDateField',
            'endTimeField',
            'enterAnimation',
            'event',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'saveButton',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'startDateField',
            'startTimeField',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleField',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'view',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_form_addMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-form-add,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-form-add,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-form-add' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar-form-add' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-form-add,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'calendar-form-add,values,options,e' },
            { name: 'beforetofront', parameters: 'calendar-form-add' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-form-add,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'calendar-form-add' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-form-add' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-add,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-form-add' },
            { name: 'drawershow', parameters: 'calendar-form-add' },
            { name: 'drop', parameters: 'calendar-form-add' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'calendar-form-add,result' },
            { name: 'expand', parameters: 'calendar-form-add' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-form-add,event' },
            { name: 'focusenter', parameters: 'calendar-form-add,event' },
            { name: 'focusleave', parameters: 'calendar-form-add,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-form-add,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-form-add,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-form-add,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-form-add,context' },
            { name: 'resizedragcancel', parameters: 'calendar-form-add,context' },
            { name: 'resizedragend', parameters: 'calendar-form-add,context' },
            { name: 'resizedragstart', parameters: 'calendar-form-add,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'save', parameters: 'calendar-form-add,context' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'calendar-form-add,result,e' },
            { name: 'tofront', parameters: 'calendar-form-add' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_form_addMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'drop',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'save',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_form_addMetaData;
    }());
    var ExtCalendar_form_addComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_addComponent, _super);
        function ExtCalendar_form_addComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_form_addMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_form_addComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_form_addMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_form_addComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_form_addComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-form-add',
                        inputs: calendar_form_addMetaData.PROPERTIES,
                        outputs: calendar_form_addMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_form_addComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_form_addComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_form_addComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_calendar_pickerMetaData = /** @class */ (function () {
        function calendar_calendar_pickerMetaData() {
        }
        calendar_calendar_pickerMetaData.XTYPE = 'calendar-calendar-picker';
        calendar_calendar_pickerMetaData.PROPERTIES = [
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_calendar_pickerMetaData.EVENTS = [
            { name: 'action', parameters: 'calendar-calendar-picker,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-calendar-picker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-calendar-picker,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'calendar-calendar-picker,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'calendar-calendar-picker,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'calendar-calendar-picker,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-calendar-picker,e' },
            { name: 'focusenter', parameters: 'calendar-calendar-picker,event' },
            { name: 'focusleave', parameters: 'calendar-calendar-picker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'calendar-calendar-picker,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'calendar-calendar-picker,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'calendar-calendar-picker,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-calendar-picker,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-calendar-picker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_calendar_pickerMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_calendar_pickerMetaData;
    }());
    var ExtCalendar_calendar_pickerComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_calendar_pickerComponent, _super);
        function ExtCalendar_calendar_pickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_calendar_pickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_calendar_pickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_calendar_pickerMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_calendar_pickerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_calendar_pickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-calendar-picker',
                        inputs: calendar_calendar_pickerMetaData.PROPERTIES,
                        outputs: calendar_calendar_pickerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_calendar_pickerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_calendar_pickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_calendar_pickerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_form_editMetaData = /** @class */ (function () {
        function calendar_form_editMetaData() {
        }
        calendar_form_editMetaData.XTYPE = 'calendar-form-edit';
        calendar_form_editMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allDayField',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'calendarField',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultEndTime',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultStartTime',
            'defaultToolWeights',
            'defaultType',
            'descriptionField',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'dropButton',
            'enableSubmissionForm',
            'enctype',
            'endDateField',
            'endTimeField',
            'enterAnimation',
            'event',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'saveButton',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'startDateField',
            'startTimeField',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'titleField',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'view',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_form_editMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-form-edit,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-form-edit,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-form-edit' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar-form-edit' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-form-edit,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'calendar-form-edit,values,options,e' },
            { name: 'beforetofront', parameters: 'calendar-form-edit' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-form-edit,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'calendar-form-edit' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-form-edit' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-edit,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-form-edit' },
            { name: 'drawershow', parameters: 'calendar-form-edit' },
            { name: 'drop', parameters: 'calendar-form-edit' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'calendar-form-edit,result' },
            { name: 'expand', parameters: 'calendar-form-edit' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-form-edit,event' },
            { name: 'focusenter', parameters: 'calendar-form-edit,event' },
            { name: 'focusleave', parameters: 'calendar-form-edit,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-form-edit,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-form-edit,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-form-edit,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragcancel', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragend', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragstart', parameters: 'calendar-form-edit,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'save', parameters: 'calendar-form-edit,context' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'calendar-form-edit,result,e' },
            { name: 'tofront', parameters: 'calendar-form-edit' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_form_editMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'drop',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'save',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_form_editMetaData;
    }());
    var ExtCalendar_form_editComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_editComponent, _super);
        function ExtCalendar_form_editComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_form_editMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_form_editComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_form_editMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_form_editComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_form_editComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-form-edit',
                        inputs: calendar_form_editMetaData.PROPERTIES,
                        outputs: calendar_form_editMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_form_editComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_form_editComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_form_editComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_timefieldMetaData = /** @class */ (function () {
        function calendar_timefieldMetaData() {
        }
        calendar_timefieldMetaData.XTYPE = 'calendar-timefield';
        calendar_timefieldMetaData.PROPERTIES = [
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_timefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'calendar-timefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-timefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-timefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'calendar-timefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'calendar-timefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'calendar-timefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-timefield,e' },
            { name: 'focusenter', parameters: 'calendar-timefield,event' },
            { name: 'focusleave', parameters: 'calendar-timefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'calendar-timefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'calendar-timefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'calendar-timefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-timefield,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-timefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_timefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_timefieldMetaData;
    }());
    var ExtCalendar_timefieldComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_timefieldComponent, _super);
        function ExtCalendar_timefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_timefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_timefieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_timefieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_timefieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_timefieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-timefield',
                        inputs: calendar_timefieldMetaData.PROPERTIES,
                        outputs: calendar_timefieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_timefieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_timefieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_timefieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_daysheaderMetaData = /** @class */ (function () {
        function calendar_daysheaderMetaData() {
        }
        calendar_daysheaderMetaData.XTYPE = 'calendar-daysheader';
        calendar_daysheaderMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cellCls',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_daysheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-daysheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-daysheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-daysheader,event' },
            { name: 'focusenter', parameters: 'calendar-daysheader,event' },
            { name: 'focusleave', parameters: 'calendar-daysheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-daysheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_daysheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_daysheaderMetaData;
    }());
    var ExtCalendar_daysheaderComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysheaderComponent, _super);
        function ExtCalendar_daysheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_daysheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_daysheaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_daysheaderMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_daysheaderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_daysheaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-daysheader',
                        inputs: calendar_daysheaderMetaData.PROPERTIES,
                        outputs: calendar_daysheaderMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_daysheaderComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_daysheaderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_daysheaderComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_weeksheaderMetaData = /** @class */ (function () {
        function calendar_weeksheaderMetaData() {
        }
        calendar_weeksheaderMetaData.XTYPE = 'calendar-weeksheader';
        calendar_weeksheaderMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cellCls',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weeksheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeksheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeksheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeksheader,event' },
            { name: 'focusenter', parameters: 'calendar-weeksheader,event' },
            { name: 'focusleave', parameters: 'calendar-weeksheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeksheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weeksheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_weeksheaderMetaData;
    }());
    var ExtCalendar_weeksheaderComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksheaderComponent, _super);
        function ExtCalendar_weeksheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weeksheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_weeksheaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_weeksheaderMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_weeksheaderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_weeksheaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-weeksheader',
                        inputs: calendar_weeksheaderMetaData.PROPERTIES,
                        outputs: calendar_weeksheaderMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_weeksheaderComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_weeksheaderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_weeksheaderComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_listMetaData = /** @class */ (function () {
        function calendar_listMetaData() {
        }
        calendar_listMetaData.XTYPE = 'calendar-list';
        calendar_listMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enableToggle',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_listMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-list,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'calendar-list' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-list,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'calendar-list,location' },
            { name: 'childlongpress', parameters: 'calendar-list,location' },
            { name: 'childmouseenter', parameters: 'calendar-list,location' },
            { name: 'childmouseleave', parameters: 'calendar-list,location' },
            { name: 'childsingletap', parameters: 'calendar-list,location' },
            { name: 'childtap', parameters: 'calendar-list,location' },
            { name: 'childtaphold', parameters: 'calendar-list,location' },
            { name: 'childtouchcancel', parameters: 'calendar-list,location' },
            { name: 'childtouchend', parameters: 'calendar-list,location' },
            { name: 'childtouchmove', parameters: 'calendar-list,location' },
            { name: 'childtouchstart', parameters: 'calendar-list,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-list,newActiveItem' },
            { name: 'deselect', parameters: 'calendar-list,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-list,event' },
            { name: 'focusenter', parameters: 'calendar-list,event' },
            { name: 'focusleave', parameters: 'calendar-list,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemswipe', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'calendar-list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'calendar-list,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'calendar-list' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-list,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-list,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'calendar-list' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_listMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendar_listMetaData;
    }());
    var ExtCalendar_listComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_listComponent, _super);
        function ExtCalendar_listComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_listMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_listComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_listMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_listComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_listComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-list',
                        inputs: calendar_listMetaData.PROPERTIES,
                        outputs: calendar_listMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_listComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_listComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_listComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_dayMetaData = /** @class */ (function () {
        function calendar_dayMetaData() {
        }
        calendar_dayMetaData.XTYPE = 'calendar-day';
        calendar_dayMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'eventRelayers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'standardButtons',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timeFormat',
            'timezoneOffset',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_dayMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-day,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-day,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-day' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-day,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-day,context' },
            { name: 'beforeeventedit', parameters: 'calendar-day,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-day,context' },
            { name: 'beforeexpand', parameters: 'calendar-day' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-day,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-day' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-day,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-day' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-day,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-day' },
            { name: 'drawershow', parameters: 'calendar-day' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-day,context' },
            { name: 'eventdrop', parameters: 'calendar-day,context' },
            { name: 'eventedit', parameters: 'calendar-day,context' },
            { name: 'eventresize', parameters: 'calendar-day,context' },
            { name: 'eventtap', parameters: 'calendar-day,context' },
            { name: 'expand', parameters: 'calendar-day' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-day,event' },
            { name: 'focusenter', parameters: 'calendar-day,event' },
            { name: 'focusleave', parameters: 'calendar-day,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-day,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-day,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-day,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-day,context' },
            { name: 'resizedragcancel', parameters: 'calendar-day,context' },
            { name: 'resizedragend', parameters: 'calendar-day,context' },
            { name: 'resizedragstart', parameters: 'calendar-day,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-day' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-day,context' },
            { name: 'validateeventdrop', parameters: 'calendar-day,context' },
            { name: 'validateeventedit', parameters: 'calendar-day,context' },
            { name: 'validateeventresize', parameters: 'calendar-day,context' },
            { name: 'valuechange', parameters: 'calendar-day,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_dayMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_dayMetaData;
    }());
    var ExtCalendar_dayComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayComponent, _super);
        function ExtCalendar_dayComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_dayMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_dayComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_dayMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_dayComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_dayComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-day',
                        inputs: calendar_dayMetaData.PROPERTIES,
                        outputs: calendar_dayMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_dayComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_dayComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_dayComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_daysMetaData = /** @class */ (function () {
        function calendar_daysMetaData() {
        }
        calendar_daysMetaData.XTYPE = 'calendar-days';
        calendar_daysMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'eventRelayers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'standardButtons',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timeFormat',
            'timezoneOffset',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_daysMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-days,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-days,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-days' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-days,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-days,context' },
            { name: 'beforeeventedit', parameters: 'calendar-days,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-days,context' },
            { name: 'beforeexpand', parameters: 'calendar-days' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-days,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-days' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-days,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-days' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-days,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-days' },
            { name: 'drawershow', parameters: 'calendar-days' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-days,context' },
            { name: 'eventdrop', parameters: 'calendar-days,context' },
            { name: 'eventedit', parameters: 'calendar-days,context' },
            { name: 'eventresize', parameters: 'calendar-days,context' },
            { name: 'eventtap', parameters: 'calendar-days,context' },
            { name: 'expand', parameters: 'calendar-days' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-days,event' },
            { name: 'focusenter', parameters: 'calendar-days,event' },
            { name: 'focusleave', parameters: 'calendar-days,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-days,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-days,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-days,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-days,context' },
            { name: 'resizedragcancel', parameters: 'calendar-days,context' },
            { name: 'resizedragend', parameters: 'calendar-days,context' },
            { name: 'resizedragstart', parameters: 'calendar-days,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-days' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-days,context' },
            { name: 'validateeventdrop', parameters: 'calendar-days,context' },
            { name: 'validateeventedit', parameters: 'calendar-days,context' },
            { name: 'validateeventresize', parameters: 'calendar-days,context' },
            { name: 'valuechange', parameters: 'calendar-days,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_daysMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_daysMetaData;
    }());
    var ExtCalendar_daysComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysComponent, _super);
        function ExtCalendar_daysComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_daysMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_daysComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_daysMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_daysComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_daysComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-days',
                        inputs: calendar_daysMetaData.PROPERTIES,
                        outputs: calendar_daysMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_daysComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_daysComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_daysComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_monthMetaData = /** @class */ (function () {
        function calendar_monthMetaData() {
        }
        calendar_monthMetaData.XTYPE = 'calendar-month';
        calendar_monthMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'addOnSelect',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'eventRelayers',
            'exitAnimation',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timezoneOffset',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_monthMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-month,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-month,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-month' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-month,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-month,context' },
            { name: 'beforeeventedit', parameters: 'calendar-month,context' },
            { name: 'beforeexpand', parameters: 'calendar-month' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-month,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-month' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-month,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-month' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-month,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-month' },
            { name: 'drawershow', parameters: 'calendar-month' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-month,context' },
            { name: 'eventdrop', parameters: 'calendar-month,context' },
            { name: 'eventedit', parameters: 'calendar-month,context' },
            { name: 'eventtap', parameters: 'calendar-month,context' },
            { name: 'expand', parameters: 'calendar-month' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-month,event' },
            { name: 'focusenter', parameters: 'calendar-month,event' },
            { name: 'focusleave', parameters: 'calendar-month,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-month,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-month,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-month,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-month,context' },
            { name: 'resizedragcancel', parameters: 'calendar-month,context' },
            { name: 'resizedragend', parameters: 'calendar-month,context' },
            { name: 'resizedragstart', parameters: 'calendar-month,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-month' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-month,context' },
            { name: 'validateeventdrop', parameters: 'calendar-month,context' },
            { name: 'validateeventedit', parameters: 'calendar-month,context' },
            { name: 'valuechange', parameters: 'calendar-month,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_monthMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_monthMetaData;
    }());
    var ExtCalendar_monthComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthComponent, _super);
        function ExtCalendar_monthComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_monthMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_monthComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_monthMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_monthComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_monthComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-month',
                        inputs: calendar_monthMetaData.PROPERTIES,
                        outputs: calendar_monthMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_monthComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_monthComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_monthComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendarMetaData = /** @class */ (function () {
        function calendarMetaData() {
        }
        calendarMetaData.XTYPE = 'calendar';
        calendarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'calendarList',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'createButton',
            'createButtonPosition',
            'data',
            'dateTitle',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultView',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menuButton',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'nextButton',
            'padding',
            'plugins',
            'previousButton',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'sheet',
            'shim',
            'showAnimation',
            'sideBar',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'switcher',
            'switcherPosition',
            'tabIndex',
            'tbar',
            'timezoneOffset',
            'title',
            'titleAlign',
            'titleBar',
            'todayButton',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'views',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar' },
            { name: 'drawershow', parameters: 'calendar' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'calendar' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar,event' },
            { name: 'focusenter', parameters: 'calendar,event' },
            { name: 'focusleave', parameters: 'calendar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar,context' },
            { name: 'resizedragcancel', parameters: 'calendar,context' },
            { name: 'resizedragend', parameters: 'calendar,context' },
            { name: 'resizedragstart', parameters: 'calendar,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return calendarMetaData;
    }());
    var ExtCalendarComponent = /** @class */ (function (_super) {
        __extends(ExtCalendarComponent, _super);
        function ExtCalendarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendarMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar',
                        inputs: calendarMetaData.PROPERTIES,
                        outputs: calendarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_weekMetaData = /** @class */ (function () {
        function calendar_weekMetaData() {
        }
        calendar_weekMetaData.XTYPE = 'calendar-week';
        calendar_weekMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'eventRelayers',
            'exitAnimation',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'standardButtons',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timeFormat',
            'timezoneOffset',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weekMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-week,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-week,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-week' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-week,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-week,context' },
            { name: 'beforeeventedit', parameters: 'calendar-week,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-week,context' },
            { name: 'beforeexpand', parameters: 'calendar-week' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-week,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-week' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-week,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-week' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-week,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-week' },
            { name: 'drawershow', parameters: 'calendar-week' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-week,context' },
            { name: 'eventdrop', parameters: 'calendar-week,context' },
            { name: 'eventedit', parameters: 'calendar-week,context' },
            { name: 'eventresize', parameters: 'calendar-week,context' },
            { name: 'eventtap', parameters: 'calendar-week,context' },
            { name: 'expand', parameters: 'calendar-week' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-week,event' },
            { name: 'focusenter', parameters: 'calendar-week,event' },
            { name: 'focusleave', parameters: 'calendar-week,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-week,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-week,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-week,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-week,context' },
            { name: 'resizedragcancel', parameters: 'calendar-week,context' },
            { name: 'resizedragend', parameters: 'calendar-week,context' },
            { name: 'resizedragstart', parameters: 'calendar-week,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-week' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-week,context' },
            { name: 'validateeventdrop', parameters: 'calendar-week,context' },
            { name: 'validateeventedit', parameters: 'calendar-week,context' },
            { name: 'validateeventresize', parameters: 'calendar-week,context' },
            { name: 'valuechange', parameters: 'calendar-week,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weekMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weekMetaData;
    }());
    var ExtCalendar_weekComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekComponent, _super);
        function ExtCalendar_weekComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weekMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_weekComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_weekMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_weekComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_weekComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-week',
                        inputs: calendar_weekMetaData.PROPERTIES,
                        outputs: calendar_weekMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_weekComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_weekComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_weekComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_weeksMetaData = /** @class */ (function () {
        function calendar_weeksMetaData() {
        }
        calendar_weeksMetaData.XTYPE = 'calendar-weeks';
        calendar_weeksMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'addForm',
            'addOnSelect',
            'allowFocusingDisabledChildren',
            'allowSelection',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'dayHeader',
            'dayHeaderFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'eventRelayers',
            'exitAnimation',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tbar',
            'timezoneOffset',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'view',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weeksMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-weeks,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-weeks,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-weeks' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weeks,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weeks,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weeks,context' },
            { name: 'beforeexpand', parameters: 'calendar-weeks' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-weeks,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeks' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeks,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-weeks' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-weeks,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-weeks' },
            { name: 'drawershow', parameters: 'calendar-weeks' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weeks,context' },
            { name: 'eventdrop', parameters: 'calendar-weeks,context' },
            { name: 'eventedit', parameters: 'calendar-weeks,context' },
            { name: 'eventtap', parameters: 'calendar-weeks,context' },
            { name: 'expand', parameters: 'calendar-weeks' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeks,event' },
            { name: 'focusenter', parameters: 'calendar-weeks,event' },
            { name: 'focusleave', parameters: 'calendar-weeks,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-weeks,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-weeks,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-weeks,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-weeks,context' },
            { name: 'resizedragcancel', parameters: 'calendar-weeks,context' },
            { name: 'resizedragend', parameters: 'calendar-weeks,context' },
            { name: 'resizedragstart', parameters: 'calendar-weeks,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeks' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weeks,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weeks,context' },
            { name: 'validateeventedit', parameters: 'calendar-weeks,context' },
            { name: 'valuechange', parameters: 'calendar-weeks,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weeksMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weeksMetaData;
    }());
    var ExtCalendar_weeksComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksComponent, _super);
        function ExtCalendar_weeksComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weeksMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_weeksComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_weeksMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_weeksComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_weeksComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-weeks',
                        inputs: calendar_weeksMetaData.PROPERTIES,
                        outputs: calendar_weeksMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_weeksComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_weeksComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_weeksComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_dayviewMetaData = /** @class */ (function () {
        function calendar_dayviewMetaData() {
        }
        calendar_dayviewMetaData.XTYPE = 'calendar-dayview';
        calendar_dayviewMetaData.PROPERTIES = [
            'addForm',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timeFormat',
            'timeRenderer',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_dayviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-dayview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-dayview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-dayview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-dayview,context' },
            { name: 'eventdrop', parameters: 'calendar-dayview,context' },
            { name: 'eventedit', parameters: 'calendar-dayview,context' },
            { name: 'eventresize', parameters: 'calendar-dayview,context' },
            { name: 'eventtap', parameters: 'calendar-dayview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-dayview,event' },
            { name: 'focusenter', parameters: 'calendar-dayview,event' },
            { name: 'focusleave', parameters: 'calendar-dayview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-dayview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-dayview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-dayview,context' },
            { name: 'validateeventedit', parameters: 'calendar-dayview,context' },
            { name: 'validateeventresize', parameters: 'calendar-dayview,context' },
            { name: 'valuechange', parameters: 'calendar-dayview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_dayviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_dayviewMetaData;
    }());
    var ExtCalendar_dayviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayviewComponent, _super);
        function ExtCalendar_dayviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_dayviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_dayviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_dayviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_dayviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_dayviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-dayview',
                        inputs: calendar_dayviewMetaData.PROPERTIES,
                        outputs: calendar_dayviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_dayviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_dayviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_dayviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_daysviewMetaData = /** @class */ (function () {
        function calendar_daysviewMetaData() {
        }
        calendar_daysviewMetaData.XTYPE = 'calendar-daysview';
        calendar_daysviewMetaData.PROPERTIES = [
            'addForm',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timeFormat',
            'timeRenderer',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_daysviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-daysview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-daysview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-daysview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-daysview,context' },
            { name: 'eventdrop', parameters: 'calendar-daysview,context' },
            { name: 'eventedit', parameters: 'calendar-daysview,context' },
            { name: 'eventresize', parameters: 'calendar-daysview,context' },
            { name: 'eventtap', parameters: 'calendar-daysview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-daysview,event' },
            { name: 'focusenter', parameters: 'calendar-daysview,event' },
            { name: 'focusleave', parameters: 'calendar-daysview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-daysview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-daysview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-daysview,context' },
            { name: 'validateeventedit', parameters: 'calendar-daysview,context' },
            { name: 'validateeventresize', parameters: 'calendar-daysview,context' },
            { name: 'valuechange', parameters: 'calendar-daysview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_daysviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_daysviewMetaData;
    }());
    var ExtCalendar_daysviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysviewComponent, _super);
        function ExtCalendar_daysviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_daysviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_daysviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_daysviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_daysviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_daysviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-daysview',
                        inputs: calendar_daysviewMetaData.PROPERTIES,
                        outputs: calendar_daysviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_daysviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_daysviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_daysviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_monthviewMetaData = /** @class */ (function () {
        function calendar_monthviewMetaData() {
        }
        calendar_monthviewMetaData.XTYPE = 'calendar-monthview';
        calendar_monthviewMetaData.PROPERTIES = [
            'addForm',
            'addOnSelect',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'exitAnimation',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_monthviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-monthview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-monthview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-monthview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-monthview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-monthview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-monthview,context' },
            { name: 'eventdrop', parameters: 'calendar-monthview,context' },
            { name: 'eventedit', parameters: 'calendar-monthview,context' },
            { name: 'eventtap', parameters: 'calendar-monthview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-monthview,event' },
            { name: 'focusenter', parameters: 'calendar-monthview,event' },
            { name: 'focusleave', parameters: 'calendar-monthview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-monthview,context' },
            { name: 'selectrange', parameters: 'calendar-monthview,context' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-monthview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-monthview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-monthview,context' },
            { name: 'validateeventedit', parameters: 'calendar-monthview,context' },
            { name: 'valuechange', parameters: 'calendar-monthview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_monthviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectrange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_monthviewMetaData;
    }());
    var ExtCalendar_monthviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthviewComponent, _super);
        function ExtCalendar_monthviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_monthviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_monthviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_monthviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_monthviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_monthviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-monthview',
                        inputs: calendar_monthviewMetaData.PROPERTIES,
                        outputs: calendar_monthviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_monthviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_monthviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_monthviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_multiviewMetaData = /** @class */ (function () {
        function calendar_multiviewMetaData() {
        }
        calendar_multiviewMetaData.XTYPE = 'calendar-multiview';
        calendar_multiviewMetaData.PROPERTIES = [
            'compact',
            'compactOptions',
            'defaultView',
            'layout',
            'store',
            'timezoneOffset',
            'value',
            'views',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_multiviewMetaData.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        calendar_multiviewMetaData.EVENTNAMES = [
            'ready'
        ];
        return calendar_multiviewMetaData;
    }());
    var ExtCalendar_multiviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_multiviewComponent, _super);
        function ExtCalendar_multiviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_multiviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_multiviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_multiviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_multiviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_multiviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-multiview',
                        inputs: calendar_multiviewMetaData.PROPERTIES,
                        outputs: calendar_multiviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_multiviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_multiviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_multiviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_weekviewMetaData = /** @class */ (function () {
        function calendar_weekviewMetaData() {
        }
        calendar_weekviewMetaData.XTYPE = 'calendar-weekview';
        calendar_weekviewMetaData.PROPERTIES = [
            'addForm',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'displayOverlap',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'endTime',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'exitAnimation',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'resizeEvents',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showNowMarker',
            'startTime',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timeFormat',
            'timeRenderer',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weekviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-weekview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weekview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weekview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weekview,context' },
            { name: 'eventdrop', parameters: 'calendar-weekview,context' },
            { name: 'eventedit', parameters: 'calendar-weekview,context' },
            { name: 'eventresize', parameters: 'calendar-weekview,context' },
            { name: 'eventtap', parameters: 'calendar-weekview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weekview,event' },
            { name: 'focusenter', parameters: 'calendar-weekview,event' },
            { name: 'focusleave', parameters: 'calendar-weekview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weekview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weekview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weekview,context' },
            { name: 'validateeventedit', parameters: 'calendar-weekview,context' },
            { name: 'validateeventresize', parameters: 'calendar-weekview,context' },
            { name: 'valuechange', parameters: 'calendar-weekview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weekviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeeventresizestart',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventresize',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'validateeventresize',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weekviewMetaData;
    }());
    var ExtCalendar_weekviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekviewComponent, _super);
        function ExtCalendar_weekviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weekviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_weekviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_weekviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_weekviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_weekviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-weekview',
                        inputs: calendar_weekviewMetaData.PROPERTIES,
                        outputs: calendar_weekviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_weekviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_weekviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_weekviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var calendar_weeksviewMetaData = /** @class */ (function () {
        function calendar_weeksviewMetaData() {
        }
        calendar_weeksviewMetaData.XTYPE = 'calendar-weeksview';
        calendar_weeksviewMetaData.PROPERTIES = [
            'addForm',
            'addOnSelect',
            'allowSelection',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'compact',
            'compactOptions',
            'constrainAlign',
            'contentEl',
            'controller',
            'controlStoreRange',
            'data',
            'dayFormat',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'droppable',
            'editForm',
            'enterAnimation',
            'eventDefaults',
            'eventHandlers',
            'exitAnimation',
            'firstDayOfWeek',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'gestureNavigation',
            'header',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'overflowText',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOverflow',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'timezoneOffset',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        calendar_weeksviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weeksview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weeksview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weeksview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeksview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeksview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weeksview,context' },
            { name: 'eventdrop', parameters: 'calendar-weeksview,context' },
            { name: 'eventedit', parameters: 'calendar-weeksview,context' },
            { name: 'eventtap', parameters: 'calendar-weeksview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeksview,event' },
            { name: 'focusenter', parameters: 'calendar-weeksview,event' },
            { name: 'focusleave', parameters: 'calendar-weeksview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-weeksview,context' },
            { name: 'selectrange', parameters: 'calendar-weeksview,context' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeksview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weeksview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weeksview,context' },
            { name: 'validateeventedit', parameters: 'calendar-weeksview,context' },
            { name: 'valuechange', parameters: 'calendar-weeksview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        calendar_weeksviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeeventadd',
            'beforeeventdragstart',
            'beforeeventedit',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'eventadd',
            'eventdrop',
            'eventedit',
            'eventtap',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectrange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'validateeventadd',
            'validateeventdrop',
            'validateeventedit',
            'valuechange',
            'widthchange',
            'ready'
        ];
        return calendar_weeksviewMetaData;
    }());
    var ExtCalendar_weeksviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksviewComponent, _super);
        function ExtCalendar_weeksviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, calendar_weeksviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCalendar_weeksviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(calendar_weeksviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtCalendar_weeksviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCalendar_weeksviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'calendar-weeksview',
                        inputs: calendar_weeksviewMetaData.PROPERTIES,
                        outputs: calendar_weeksviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCalendar_weeksviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCalendar_weeksviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCalendar_weeksviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var carouselMetaData = /** @class */ (function () {
        function carouselMetaData() {
        }
        carouselMetaData.XTYPE = 'carousel';
        carouselMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'direction',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indicator',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        carouselMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,carousel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'carousel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'carousel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'carousel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,carousel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'carousel,event' },
            { name: 'focusenter', parameters: 'carousel,event' },
            { name: 'focusleave', parameters: 'carousel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'carousel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'carousel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'carousel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'carousel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        carouselMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return carouselMetaData;
    }());
    var ExtCarouselComponent = /** @class */ (function (_super) {
        __extends(ExtCarouselComponent, _super);
        function ExtCarouselComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, carouselMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCarouselComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(carouselMetaData);
            };
        /**
         * @return {?}
         */
        ExtCarouselComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCarouselComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'carousel',
                        inputs: carouselMetaData.PROPERTIES,
                        outputs: carouselMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCarouselComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCarouselComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCarouselComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var axis3dMetaData = /** @class */ (function () {
        function axis3dMetaData() {
        }
        axis3dMetaData.XTYPE = 'axis3d';
        axis3dMetaData.PROPERTIES = [
            'adjustByMajorUnit',
            'background',
            'center',
            'chart',
            'depth',
            'expandRangeBy',
            'fields',
            'floating',
            'grid',
            'hidden',
            'id',
            'label',
            'layout',
            'length',
            'limits',
            'linkedTo',
            'majorTickSteps',
            'margin',
            'maximum',
            'maxZoom',
            'minimum',
            'minorTickSteps',
            'minZoom',
            'needHighPrecision',
            'position',
            'radius',
            'reconcileRange',
            'renderer',
            'rotation',
            'segmenter',
            'style',
            'title',
            'titleMargin',
            'totalAngle',
            'visibleRange',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        axis3dMetaData.EVENTS = [
            { name: 'rangechange', parameters: 'axis,range,oldRange' },
            { name: 'visiblerangechange', parameters: 'axis,visibleRange' },
            { name: 'ready', parameters: '' }
        ];
        axis3dMetaData.EVENTNAMES = [
            'rangechange',
            'visiblerangechange',
            'ready'
        ];
        return axis3dMetaData;
    }());
    var ExtAxis3dComponent = /** @class */ (function (_super) {
        __extends(ExtAxis3dComponent, _super);
        function ExtAxis3dComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, axis3dMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtAxis3dComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(axis3dMetaData);
            };
        /**
         * @return {?}
         */
        ExtAxis3dComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtAxis3dComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'axis3d',
                        inputs: axis3dMetaData.PROPERTIES,
                        outputs: axis3dMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtAxis3dComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtAxis3dComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtAxis3dComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var cartesianMetaData = /** @class */ (function () {
        function cartesianMetaData() {
        }
        cartesianMetaData.XTYPE = 'cartesian';
        cartesianMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'flipXY',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'innerPadding',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        cartesianMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,cartesian,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'cartesian,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'cartesian' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'cartesian' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cartesian,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,cartesian,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'cartesian,event' },
            { name: 'focusenter', parameters: 'cartesian,event' },
            { name: 'focusleave', parameters: 'cartesian,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'cartesian' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'cartesian,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'cartesian' },
            { name: 'refresh', parameters: 'cartesian' },
            { name: 'remove', parameters: 'cartesian,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'cartesian,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'cartesian' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        cartesianMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return cartesianMetaData;
    }());
    var ExtCartesianComponent = /** @class */ (function (_super) {
        __extends(ExtCartesianComponent, _super);
        function ExtCartesianComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, cartesianMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCartesianComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(cartesianMetaData);
            };
        /**
         * @return {?}
         */
        ExtCartesianComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCartesianComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'cartesian',
                        inputs: cartesianMetaData.PROPERTIES,
                        outputs: cartesianMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCartesianComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCartesianComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCartesianComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var chartMetaData = /** @class */ (function () {
        function chartMetaData() {
        }
        chartMetaData.XTYPE = 'chart';
        chartMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'flipXY',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'innerPadding',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chartMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,cartesian,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'cartesian,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'cartesian' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'cartesian' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cartesian,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,cartesian,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'cartesian,event' },
            { name: 'focusenter', parameters: 'cartesian,event' },
            { name: 'focusleave', parameters: 'cartesian,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'cartesian' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'cartesian,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'cartesian' },
            { name: 'refresh', parameters: 'cartesian' },
            { name: 'remove', parameters: 'cartesian,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'cartesian,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'cartesian' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chartMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chartMetaData;
    }());
    var ExtChartComponent = /** @class */ (function (_super) {
        __extends(ExtChartComponent, _super);
        function ExtChartComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chartMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(chartMetaData);
            };
        /**
         * @return {?}
         */
        ExtChartComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtChartComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'chart',
                        inputs: chartMetaData.PROPERTIES,
                        outputs: chartMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtChartComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtChartComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtChartComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var interactionMetaData = /** @class */ (function () {
        function interactionMetaData() {
        }
        interactionMetaData.XTYPE = 'interaction';
        interactionMetaData.PROPERTIES = [
            'chart',
            'enabled',
            'gesture',
            'listeners',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        interactionMetaData.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        interactionMetaData.EVENTNAMES = [
            'ready'
        ];
        return interactionMetaData;
    }());
    var ExtInteractionComponent = /** @class */ (function (_super) {
        __extends(ExtInteractionComponent, _super);
        function ExtInteractionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, interactionMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtInteractionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(interactionMetaData);
            };
        /**
         * @return {?}
         */
        ExtInteractionComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtInteractionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'interaction',
                        inputs: interactionMetaData.PROPERTIES,
                        outputs: interactionMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtInteractionComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtInteractionComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtInteractionComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var legendMetaData = /** @class */ (function () {
        function legendMetaData() {
        }
        legendMetaData.XTYPE = 'legend';
        legendMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'rect',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toggleable',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        legendMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,legend,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'legend' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'legend,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'legend,location' },
            { name: 'childlongpress', parameters: 'legend,location' },
            { name: 'childmouseenter', parameters: 'legend,location' },
            { name: 'childmouseleave', parameters: 'legend,location' },
            { name: 'childsingletap', parameters: 'legend,location' },
            { name: 'childtap', parameters: 'legend,location' },
            { name: 'childtaphold', parameters: 'legend,location' },
            { name: 'childtouchcancel', parameters: 'legend,location' },
            { name: 'childtouchend', parameters: 'legend,location' },
            { name: 'childtouchmove', parameters: 'legend,location' },
            { name: 'childtouchstart', parameters: 'legend,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,legend,newActiveItem' },
            { name: 'deselect', parameters: 'legend,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'legend,event' },
            { name: 'focusenter', parameters: 'legend,event' },
            { name: 'focusleave', parameters: 'legend,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'legend,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'legend,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'legend,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'legend,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'legend,index,target,record,e' },
            { name: 'itemswipe', parameters: 'legend,index,target,record,e' },
            { name: 'itemtap', parameters: 'legend,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'legend,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'legend,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'legend' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'legend,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'legend,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'legend' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        legendMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return legendMetaData;
    }());
    var ExtLegendComponent = /** @class */ (function (_super) {
        __extends(ExtLegendComponent, _super);
        function ExtLegendComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, legendMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtLegendComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(legendMetaData);
            };
        /**
         * @return {?}
         */
        ExtLegendComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtLegendComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'legend',
                        inputs: legendMetaData.PROPERTIES,
                        outputs: legendMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtLegendComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtLegendComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtLegendComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var chartnavigatorMetaData = /** @class */ (function () {
        function chartnavigatorMetaData() {
        }
        chartnavigatorMetaData.XTYPE = 'chartnavigator';
        chartnavigatorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'chart',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'navigator',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chartnavigatorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,chartnavigator,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'chartnavigator,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'chartnavigator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chartnavigator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,chartnavigator,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chartnavigator,event' },
            { name: 'focusenter', parameters: 'chartnavigator,event' },
            { name: 'focusleave', parameters: 'chartnavigator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'chartnavigator,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'chartnavigator,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'chartnavigator,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'chartnavigator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chartnavigatorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chartnavigatorMetaData;
    }());
    var ExtChartnavigatorComponent = /** @class */ (function (_super) {
        __extends(ExtChartnavigatorComponent, _super);
        function ExtChartnavigatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chartnavigatorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtChartnavigatorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(chartnavigatorMetaData);
            };
        /**
         * @return {?}
         */
        ExtChartnavigatorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtChartnavigatorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'chartnavigator',
                        inputs: chartnavigatorMetaData.PROPERTIES,
                        outputs: chartnavigatorMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtChartnavigatorComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtChartnavigatorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtChartnavigatorComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var polarMetaData = /** @class */ (function () {
        function polarMetaData() {
        }
        polarMetaData.XTYPE = 'polar';
        polarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'center',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'innerPadding',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'radius',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        polarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,polar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'polar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'polar' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'polar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'polar,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,polar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'polar,event' },
            { name: 'focusenter', parameters: 'polar,event' },
            { name: 'focusleave', parameters: 'polar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'polar,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'polar,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'polar' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'polar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'polar' },
            { name: 'refresh', parameters: 'polar' },
            { name: 'remove', parameters: 'polar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'polar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'polar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        polarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return polarMetaData;
    }());
    var ExtPolarComponent = /** @class */ (function (_super) {
        __extends(ExtPolarComponent, _super);
        function ExtPolarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, polarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPolarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(polarMetaData);
            };
        /**
         * @return {?}
         */
        ExtPolarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPolarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'polar',
                        inputs: polarMetaData.PROPERTIES,
                        outputs: polarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPolarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPolarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPolarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var spacefillingMetaData = /** @class */ (function () {
        function spacefillingMetaData() {
        }
        spacefillingMetaData.XTYPE = 'spacefilling';
        spacefillingMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axes',
            'axisLock',
            'background',
            'bind',
            'border',
            'bottom',
            'captions',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'colors',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightItem',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'insetPadding',
            'instanceCls',
            'interactions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'legend',
            'listeners',
            'mainRect',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'series',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'theme',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spacefillingMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,spacefilling,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'spacefilling,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'spacefilling' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spacefilling' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spacefilling,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,spacefilling,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spacefilling,event' },
            { name: 'focusenter', parameters: 'spacefilling,event' },
            { name: 'focusleave', parameters: 'spacefilling,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'spacefilling,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'spacefilling,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'spacefilling' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'spacefilling,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'spacefilling' },
            { name: 'refresh', parameters: 'spacefilling' },
            { name: 'remove', parameters: 'spacefilling,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'spacefilling,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'spacefilling' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spacefillingMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerefresh',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'itemdblclick',
            'itemhighlight',
            'itemhighlightchange',
            'itemmousedown',
            'itemmousemove',
            'itemmouseout',
            'itemmouseover',
            'itemmouseup',
            'itemtap',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'redraw',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return spacefillingMetaData;
    }());
    var ExtSpacefillingComponent = /** @class */ (function (_super) {
        __extends(ExtSpacefillingComponent, _super);
        function ExtSpacefillingComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spacefillingMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSpacefillingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(spacefillingMetaData);
            };
        /**
         * @return {?}
         */
        ExtSpacefillingComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSpacefillingComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'spacefilling',
                        inputs: spacefillingMetaData.PROPERTIES,
                        outputs: spacefillingMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSpacefillingComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSpacefillingComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSpacefillingComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var chipMetaData = /** @class */ (function () {
        function chipMetaData() {
        }
        chipMetaData.XTYPE = 'chip';
        chipMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'closable',
            'closeHandler',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chipMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'chip' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chip,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chip,event' },
            { name: 'focusenter', parameters: 'chip,event' },
            { name: 'focusleave', parameters: 'chip,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'chip' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chipMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chipMetaData;
    }());
    var ExtChipComponent = /** @class */ (function (_super) {
        __extends(ExtChipComponent, _super);
        function ExtChipComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chipMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtChipComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(chipMetaData);
            };
        /**
         * @return {?}
         */
        ExtChipComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtChipComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'chip',
                        inputs: chipMetaData.PROPERTIES,
                        outputs: chipMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtChipComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtChipComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtChipComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var componentMetaData = /** @class */ (function () {
        function componentMetaData() {
        }
        componentMetaData.XTYPE = 'component';
        componentMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        componentMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'component' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'component,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'component,event' },
            { name: 'focusenter', parameters: 'component,event' },
            { name: 'focusleave', parameters: 'component,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'component' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        componentMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return componentMetaData;
    }());
    var ExtComponentComponent = /** @class */ (function (_super) {
        __extends(ExtComponentComponent, _super);
        function ExtComponentComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, componentMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtComponentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(componentMetaData);
            };
        /**
         * @return {?}
         */
        ExtComponentComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtComponentComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'component',
                        inputs: componentMetaData.PROPERTIES,
                        outputs: componentMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtComponentComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtComponentComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtComponentComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var containerMetaData = /** @class */ (function () {
        function containerMetaData() {
        }
        containerMetaData.XTYPE = 'container';
        containerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        containerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,container,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'container,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'container' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'container,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,container,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'container,event' },
            { name: 'focusenter', parameters: 'container,event' },
            { name: 'focusleave', parameters: 'container,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'container,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'container,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'container,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'container' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        containerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return containerMetaData;
    }());
    var ExtContainerComponent = /** @class */ (function (_super) {
        __extends(ExtContainerComponent, _super);
        function ExtContainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, containerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtContainerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(containerMetaData);
            };
        /**
         * @return {?}
         */
        ExtContainerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtContainerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'container',
                        inputs: containerMetaData.PROPERTIES,
                        outputs: containerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtContainerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtContainerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtContainerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_canvasMetaData = /** @class */ (function () {
        function d3_canvasMetaData() {
        }
        d3_canvasMetaData.XTYPE = 'd3-canvas';
        d3_canvasMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'hdpi',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_canvasMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-canvas' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-canvas,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-canvas,event' },
            { name: 'focusenter', parameters: 'd3-canvas,event' },
            { name: 'focusleave', parameters: 'd3-canvas,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,canvas,size' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-canvas' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_canvasMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_canvasMetaData;
    }());
    var ExtD3_canvasComponent = /** @class */ (function (_super) {
        __extends(ExtD3_canvasComponent, _super);
        function ExtD3_canvasComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_canvasMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_canvasComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_canvasMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_canvasComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_canvasComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-canvas',
                        inputs: d3_canvasMetaData.PROPERTIES,
                        outputs: d3_canvasMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_canvasComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_canvasComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_canvasComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_heatmapMetaData = /** @class */ (function () {
        function d3_heatmapMetaData() {
        }
        d3_heatmapMetaData.XTYPE = 'd3-heatmap';
        d3_heatmapMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'labels',
            'left',
            'legend',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiles',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xAxis',
            'xtype',
            'y',
            'yAxis',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_heatmapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-heatmap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-heatmap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-heatmap,event' },
            { name: 'focusenter', parameters: 'd3-heatmap,event' },
            { name: 'focusleave', parameters: 'd3-heatmap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-heatmap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_heatmapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_heatmapMetaData;
    }());
    var ExtD3_heatmapComponent = /** @class */ (function (_super) {
        __extends(ExtD3_heatmapComponent, _super);
        function ExtD3_heatmapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_heatmapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_heatmapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_heatmapMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_heatmapComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_heatmapComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-heatmap',
                        inputs: d3_heatmapMetaData.PROPERTIES,
                        outputs: d3_heatmapMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_heatmapComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_heatmapComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_heatmapComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_packMetaData = /** @class */ (function () {
        function d3_packMetaData() {
        }
        d3_packMetaData.XTYPE = 'd3-pack';
        d3_packMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'clipText',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textPadding',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_packMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-pack' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-pack,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-pack,event' },
            { name: 'focusenter', parameters: 'd3-pack,event' },
            { name: 'focusleave', parameters: 'd3-pack,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-pack' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_packMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_packMetaData;
    }());
    var ExtD3_packComponent = /** @class */ (function (_super) {
        __extends(ExtD3_packComponent, _super);
        function ExtD3_packComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_packMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_packComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_packMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_packComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_packComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-pack',
                        inputs: d3_packMetaData.PROPERTIES,
                        outputs: d3_packMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_packComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_packComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_packComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_partitionMetaData = /** @class */ (function () {
        function d3_partitionMetaData() {
        }
        d3_partitionMetaData.XTYPE = 'd3-partition';
        d3_partitionMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_partitionMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-partition' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-partition,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-partition,event' },
            { name: 'focusenter', parameters: 'd3-partition,event' },
            { name: 'focusleave', parameters: 'd3-partition,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-partition' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_partitionMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_partitionMetaData;
    }());
    var ExtD3_partitionComponent = /** @class */ (function (_super) {
        __extends(ExtD3_partitionComponent, _super);
        function ExtD3_partitionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_partitionMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_partitionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_partitionMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_partitionComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_partitionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-partition',
                        inputs: d3_partitionMetaData.PROPERTIES,
                        outputs: d3_partitionMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_partitionComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_partitionComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_partitionComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_sunburstMetaData = /** @class */ (function () {
        function d3_sunburstMetaData() {
        }
        d3_sunburstMetaData.XTYPE = 'd3-sunburst';
        d3_sunburstMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textPadding',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'zoomParentDotRadius',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_sunburstMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-sunburst' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-sunburst,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-sunburst,event' },
            { name: 'focusenter', parameters: 'd3-sunburst,event' },
            { name: 'focusleave', parameters: 'd3-sunburst,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-sunburst' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_sunburstMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_sunburstMetaData;
    }());
    var ExtD3_sunburstComponent = /** @class */ (function (_super) {
        __extends(ExtD3_sunburstComponent, _super);
        function ExtD3_sunburstComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_sunburstMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_sunburstComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_sunburstMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_sunburstComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_sunburstComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-sunburst',
                        inputs: d3_sunburstMetaData.PROPERTIES,
                        outputs: d3_sunburstMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_sunburstComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_sunburstComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_sunburstComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_treeMetaData = /** @class */ (function () {
        function d3_treeMetaData() {
        }
        d3_treeMetaData.XTYPE = 'd3-tree';
        d3_treeMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'depth',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeRadius',
            'nodeSize',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_treeMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-tree,event' },
            { name: 'focusenter', parameters: 'd3-tree,event' },
            { name: 'focusleave', parameters: 'd3-tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_treeMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_treeMetaData;
    }());
    var ExtD3_treeComponent = /** @class */ (function (_super) {
        __extends(ExtD3_treeComponent, _super);
        function ExtD3_treeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_treeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_treeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_treeMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_treeComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_treeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-tree',
                        inputs: d3_treeMetaData.PROPERTIES,
                        outputs: d3_treeMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_treeComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_treeComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_treeComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_horizontal_treeMetaData = /** @class */ (function () {
        function d3_horizontal_treeMetaData() {
        }
        d3_horizontal_treeMetaData.XTYPE = 'd3-horizontal-tree';
        d3_horizontal_treeMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'depth',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeRadius',
            'nodeSize',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scrollable',
            'selectEventName',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_horizontal_treeMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-tree,event' },
            { name: 'focusenter', parameters: 'd3-tree,event' },
            { name: 'focusleave', parameters: 'd3-tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_horizontal_treeMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_horizontal_treeMetaData;
    }());
    var ExtD3_horizontal_treeComponent = /** @class */ (function (_super) {
        __extends(ExtD3_horizontal_treeComponent, _super);
        function ExtD3_horizontal_treeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_horizontal_treeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_horizontal_treeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_horizontal_treeMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_horizontal_treeComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_horizontal_treeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-horizontal-tree',
                        inputs: d3_horizontal_treeMetaData.PROPERTIES,
                        outputs: d3_horizontal_treeMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_horizontal_treeComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_horizontal_treeComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_horizontal_treeComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_treemapMetaData = /** @class */ (function () {
        function d3_treemapMetaData() {
        }
        d3_treemapMetaData.XTYPE = 'd3-treemap';
        d3_treemapMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'busyLayoutText',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'leafTile',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'parentTile',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scaleLabels',
            'scrollable',
            'selectEventName',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiling',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_treemapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-treemap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-treemap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-treemap,event' },
            { name: 'focusenter', parameters: 'd3-treemap,event' },
            { name: 'focusleave', parameters: 'd3-treemap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-treemap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_treemapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_treemapMetaData;
    }());
    var ExtD3_treemapComponent = /** @class */ (function (_super) {
        __extends(ExtD3_treemapComponent, _super);
        function ExtD3_treemapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_treemapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_treemapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_treemapMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_treemapComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_treemapComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-treemap',
                        inputs: d3_treemapMetaData.PROPERTIES,
                        outputs: d3_treemapMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_treemapComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_treemapComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_treemapComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3_svgMetaData = /** @class */ (function () {
        function d3_svgMetaData() {
        }
        d3_svgMetaData.XTYPE = 'd3-svg';
        d3_svgMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3_svgMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-svg' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-svg,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-svg,event' },
            { name: 'focusenter', parameters: 'd3-svg,event' },
            { name: 'focusleave', parameters: 'd3-svg,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-svg' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3_svgMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3_svgMetaData;
    }());
    var ExtD3_svgComponent = /** @class */ (function (_super) {
        __extends(ExtD3_svgComponent, _super);
        function ExtD3_svgComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3_svgMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3_svgComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3_svgMetaData);
            };
        /**
         * @return {?}
         */
        ExtD3_svgComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3_svgComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3-svg',
                        inputs: d3_svgMetaData.PROPERTIES,
                        outputs: d3_svgMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3_svgComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3_svgComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3_svgComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var d3MetaData = /** @class */ (function () {
        function d3MetaData() {
        }
        d3MetaData.XTYPE = 'd3';
        d3MetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        d3MetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-svg' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-svg,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-svg,event' },
            { name: 'focusenter', parameters: 'd3-svg,event' },
            { name: 'focusleave', parameters: 'd3-svg,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-svg' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        d3MetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return d3MetaData;
    }());
    var ExtD3Component = /** @class */ (function (_super) {
        __extends(ExtD3Component, _super);
        function ExtD3Component(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, d3MetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtD3Component.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(d3MetaData);
            };
        /**
         * @return {?}
         */
        ExtD3Component.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtD3Component.decorators = [
            { type: i0.Component, args: [{
                        selector: 'd3',
                        inputs: d3MetaData.PROPERTIES,
                        outputs: d3MetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtD3Component; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtD3Component.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtD3Component;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var boundlistMetaData = /** @class */ (function () {
        function boundlistMetaData() {
        }
        boundlistMetaData.XTYPE = 'boundlist';
        boundlistMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useSimpleItems',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        boundlistMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,boundlist,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'boundlist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'boundlist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'boundlist,location' },
            { name: 'childlongpress', parameters: 'boundlist,location' },
            { name: 'childmouseenter', parameters: 'boundlist,location' },
            { name: 'childmouseleave', parameters: 'boundlist,location' },
            { name: 'childsingletap', parameters: 'boundlist,location' },
            { name: 'childtap', parameters: 'boundlist,location' },
            { name: 'childtaphold', parameters: 'boundlist,location' },
            { name: 'childtouchcancel', parameters: 'boundlist,location' },
            { name: 'childtouchend', parameters: 'boundlist,location' },
            { name: 'childtouchmove', parameters: 'boundlist,location' },
            { name: 'childtouchstart', parameters: 'boundlist,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,boundlist,newActiveItem' },
            { name: 'deselect', parameters: 'boundlist,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'boundlist,event' },
            { name: 'focusenter', parameters: 'boundlist,event' },
            { name: 'focusleave', parameters: 'boundlist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'boundlist,index,record,action' },
            { name: 'itemdoubletap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemswipe', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'boundlist,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'boundlist,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'boundlist' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'boundlist,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'boundlist,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'boundlist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        boundlistMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return boundlistMetaData;
    }());
    var ExtBoundlistComponent = /** @class */ (function (_super) {
        __extends(ExtBoundlistComponent, _super);
        function ExtBoundlistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, boundlistMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtBoundlistComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(boundlistMetaData);
            };
        /**
         * @return {?}
         */
        ExtBoundlistComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtBoundlistComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'boundlist',
                        inputs: boundlistMetaData.PROPERTIES,
                        outputs: boundlistMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtBoundlistComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtBoundlistComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtBoundlistComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var chipviewMetaData = /** @class */ (function () {
        function chipviewMetaData() {
        }
        chipviewMetaData.XTYPE = 'chipview';
        chipviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closableField',
            'closeHandler',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconClsField',
            'iconField',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        chipviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,chipview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'chipview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chipview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'chipview,location' },
            { name: 'childlongpress', parameters: 'chipview,location' },
            { name: 'childmouseenter', parameters: 'chipview,location' },
            { name: 'childmouseleave', parameters: 'chipview,location' },
            { name: 'childsingletap', parameters: 'chipview,location' },
            { name: 'childtap', parameters: 'chipview,location' },
            { name: 'childtaphold', parameters: 'chipview,location' },
            { name: 'childtouchcancel', parameters: 'chipview,location' },
            { name: 'childtouchend', parameters: 'chipview,location' },
            { name: 'childtouchmove', parameters: 'chipview,location' },
            { name: 'childtouchstart', parameters: 'chipview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,chipview,newActiveItem' },
            { name: 'deselect', parameters: 'chipview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chipview,event' },
            { name: 'focusenter', parameters: 'chipview,event' },
            { name: 'focusleave', parameters: 'chipview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'chipview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'chipview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'chipview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'chipview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'chipview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'chipview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'chipview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'chipview,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'chipview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        chipviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return chipviewMetaData;
    }());
    var ExtChipviewComponent = /** @class */ (function (_super) {
        __extends(ExtChipviewComponent, _super);
        function ExtChipviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, chipviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtChipviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(chipviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtChipviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtChipviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'chipview',
                        inputs: chipviewMetaData.PROPERTIES,
                        outputs: chipviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtChipviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtChipviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtChipviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var componentdataviewMetaData = /** @class */ (function () {
        function componentdataviewMetaData() {
        }
        componentdataviewMetaData.XTYPE = 'componentdataview';
        componentdataviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        componentdataviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,componentdataview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'componentdataview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'componentdataview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'componentdataview,location' },
            { name: 'childlongpress', parameters: 'componentdataview,location' },
            { name: 'childmouseenter', parameters: 'componentdataview,location' },
            { name: 'childmouseleave', parameters: 'componentdataview,location' },
            { name: 'childsingletap', parameters: 'componentdataview,location' },
            { name: 'childtap', parameters: 'componentdataview,location' },
            { name: 'childtaphold', parameters: 'componentdataview,location' },
            { name: 'childtouchcancel', parameters: 'componentdataview,location' },
            { name: 'childtouchend', parameters: 'componentdataview,location' },
            { name: 'childtouchmove', parameters: 'componentdataview,location' },
            { name: 'childtouchstart', parameters: 'componentdataview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,componentdataview,newActiveItem' },
            { name: 'deselect', parameters: 'componentdataview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'componentdataview,event' },
            { name: 'focusenter', parameters: 'componentdataview,event' },
            { name: 'focusleave', parameters: 'componentdataview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'componentdataview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'componentdataview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'componentdataview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'componentdataview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'componentdataview,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'componentdataview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        componentdataviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return componentdataviewMetaData;
    }());
    var ExtComponentdataviewComponent = /** @class */ (function (_super) {
        __extends(ExtComponentdataviewComponent, _super);
        function ExtComponentdataviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, componentdataviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtComponentdataviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(componentdataviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtComponentdataviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtComponentdataviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'componentdataview',
                        inputs: componentdataviewMetaData.PROPERTIES,
                        outputs: componentdataviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtComponentdataviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtComponentdataviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtComponentdataviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var dataitemMetaData = /** @class */ (function () {
        function dataitemMetaData() {
        }
        dataitemMetaData.XTYPE = 'dataitem';
        dataitemMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataMap',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        dataitemMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dataitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dataitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataitem,event' },
            { name: 'focusenter', parameters: 'dataitem,event' },
            { name: 'focusleave', parameters: 'dataitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dataitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dataitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dataitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        dataitemMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return dataitemMetaData;
    }());
    var ExtDataitemComponent = /** @class */ (function (_super) {
        __extends(ExtDataitemComponent, _super);
        function ExtDataitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, dataitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDataitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(dataitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtDataitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDataitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'dataitem',
                        inputs: dataitemMetaData.PROPERTIES,
                        outputs: dataitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDataitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDataitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDataitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var dataviewMetaData = /** @class */ (function () {
        function dataviewMetaData() {
        }
        dataviewMetaData.XTYPE = 'dataview';
        dataviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        dataviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'dataview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'dataview,location' },
            { name: 'childlongpress', parameters: 'dataview,location' },
            { name: 'childmouseenter', parameters: 'dataview,location' },
            { name: 'childmouseleave', parameters: 'dataview,location' },
            { name: 'childsingletap', parameters: 'dataview,location' },
            { name: 'childtap', parameters: 'dataview,location' },
            { name: 'childtaphold', parameters: 'dataview,location' },
            { name: 'childtouchcancel', parameters: 'dataview,location' },
            { name: 'childtouchend', parameters: 'dataview,location' },
            { name: 'childtouchmove', parameters: 'dataview,location' },
            { name: 'childtouchstart', parameters: 'dataview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataview,newActiveItem' },
            { name: 'deselect', parameters: 'dataview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataview,event' },
            { name: 'focusenter', parameters: 'dataview,event' },
            { name: 'focusleave', parameters: 'dataview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'dataview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'dataview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'dataview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'dataview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'dataview,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'dataview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        dataviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return dataviewMetaData;
    }());
    var ExtDataviewComponent = /** @class */ (function (_super) {
        __extends(ExtDataviewComponent, _super);
        function ExtDataviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, dataviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDataviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(dataviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtDataviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDataviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'dataview',
                        inputs: dataviewMetaData.PROPERTIES,
                        outputs: dataviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDataviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDataviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDataviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var emptytextMetaData = /** @class */ (function () {
        function emptytextMetaData() {
        }
        emptytextMetaData.XTYPE = 'emptytext';
        emptytextMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        emptytextMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'emptytext' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'emptytext,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'emptytext,event' },
            { name: 'focusenter', parameters: 'emptytext,event' },
            { name: 'focusleave', parameters: 'emptytext,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'emptytext' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        emptytextMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return emptytextMetaData;
    }());
    var ExtEmptytextComponent = /** @class */ (function (_super) {
        __extends(ExtEmptytextComponent, _super);
        function ExtEmptytextComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, emptytextMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtEmptytextComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(emptytextMetaData);
            };
        /**
         * @return {?}
         */
        ExtEmptytextComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtEmptytextComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emptytext',
                        inputs: emptytextMetaData.PROPERTIES,
                        outputs: emptytextMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtEmptytextComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtEmptytextComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtEmptytextComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var indexbarMetaData = /** @class */ (function () {
        function indexbarMetaData() {
        }
        indexbarMetaData.XTYPE = 'indexbar';
        indexbarMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoHide',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'direction',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'dynamic',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'indicator',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'letters',
            'listeners',
            'listPrefix',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        indexbarMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedirectionchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'indexbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'indexbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'directionchange', parameters: 'sender,value,oldValue' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'indexbar,event' },
            { name: 'focusenter', parameters: 'indexbar,event' },
            { name: 'focusleave', parameters: 'indexbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'index', parameters: 'indexbar,html,target' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'indexbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        indexbarMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedirectionchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'directionchange',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'index',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return indexbarMetaData;
    }());
    var ExtIndexbarComponent = /** @class */ (function (_super) {
        __extends(ExtIndexbarComponent, _super);
        function ExtIndexbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, indexbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtIndexbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(indexbarMetaData);
            };
        /**
         * @return {?}
         */
        ExtIndexbarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtIndexbarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'indexbar',
                        inputs: indexbarMetaData.PROPERTIES,
                        outputs: indexbarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtIndexbarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtIndexbarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtIndexbarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var itemheaderMetaData = /** @class */ (function () {
        function itemheaderMetaData() {
        }
        itemheaderMetaData.XTYPE = 'itemheader';
        itemheaderMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        itemheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'itemheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'itemheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'itemheader,event' },
            { name: 'focusenter', parameters: 'itemheader,event' },
            { name: 'focusleave', parameters: 'itemheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'itemheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        itemheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return itemheaderMetaData;
    }());
    var ExtItemheaderComponent = /** @class */ (function (_super) {
        __extends(ExtItemheaderComponent, _super);
        function ExtItemheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, itemheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtItemheaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(itemheaderMetaData);
            };
        /**
         * @return {?}
         */
        ExtItemheaderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtItemheaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'itemheader',
                        inputs: itemheaderMetaData.PROPERTIES,
                        outputs: itemheaderMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtItemheaderComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtItemheaderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtItemheaderComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var listMetaData = /** @class */ (function () {
        function listMetaData() {
        }
        listMetaData.XTYPE = 'list';
        listMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useSimpleItems',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,list,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'list' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'list,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'list,location' },
            { name: 'childlongpress', parameters: 'list,location' },
            { name: 'childmouseenter', parameters: 'list,location' },
            { name: 'childmouseleave', parameters: 'list,location' },
            { name: 'childsingletap', parameters: 'list,location' },
            { name: 'childtap', parameters: 'list,location' },
            { name: 'childtaphold', parameters: 'list,location' },
            { name: 'childtouchcancel', parameters: 'list,location' },
            { name: 'childtouchend', parameters: 'list,location' },
            { name: 'childtouchmove', parameters: 'list,location' },
            { name: 'childtouchstart', parameters: 'list,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,list,newActiveItem' },
            { name: 'deselect', parameters: 'list,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'list,event' },
            { name: 'focusenter', parameters: 'list,event' },
            { name: 'focusleave', parameters: 'list,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'list,index,record,action' },
            { name: 'itemdoubletap', parameters: 'list,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'list,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'list,index,target,record,e' },
            { name: 'itemswipe', parameters: 'list,index,target,record,e' },
            { name: 'itemtap', parameters: 'list,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'list,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'list' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'list,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'list,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'list' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listMetaData;
    }());
    var ExtListComponent = /** @class */ (function (_super) {
        __extends(ExtListComponent, _super);
        function ExtListComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(listMetaData);
            };
        /**
         * @return {?}
         */
        ExtListComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtListComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'list',
                        inputs: listMetaData.PROPERTIES,
                        outputs: listMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtListComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtListComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtListComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var listitemMetaData = /** @class */ (function () {
        function listitemMetaData() {
        }
        listitemMetaData.XTYPE = 'listitem';
        listitemMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataMap',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listitemMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listitem,event' },
            { name: 'focusenter', parameters: 'listitem,event' },
            { name: 'focusleave', parameters: 'listitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listitemMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listitemMetaData;
    }());
    var ExtListitemComponent = /** @class */ (function (_super) {
        __extends(ExtListitemComponent, _super);
        function ExtListitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtListitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(listitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtListitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtListitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'listitem',
                        inputs: listitemMetaData.PROPERTIES,
                        outputs: listitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtListitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtListitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtListitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var listswiperitemMetaData = /** @class */ (function () {
        function listswiperitemMetaData() {
        }
        listswiperitemMetaData.XTYPE = 'listswiperitem';
        listswiperitemMetaData.PROPERTIES = [
            'action',
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'translationTarget',
            'twoWayBindable',
            'ui',
            'undo',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listswiperitemMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listswiperitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listswiperitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listswiperitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listswiperitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listswiperitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listswiperitem,event' },
            { name: 'focusenter', parameters: 'listswiperitem,event' },
            { name: 'focusleave', parameters: 'listswiperitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listswiperitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listswiperitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listswiperitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listswiperitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listswiperitemMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listswiperitemMetaData;
    }());
    var ExtListswiperitemComponent = /** @class */ (function (_super) {
        __extends(ExtListswiperitemComponent, _super);
        function ExtListswiperitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listswiperitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtListswiperitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(listswiperitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtListswiperitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtListswiperitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'listswiperitem',
                        inputs: listswiperitemMetaData.PROPERTIES,
                        outputs: listswiperitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtListswiperitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtListswiperitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtListswiperitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var listswiperstepperMetaData = /** @class */ (function () {
        function listswiperstepperMetaData() {
        }
        listswiperstepperMetaData.XTYPE = 'listswiperstepper';
        listswiperstepperMetaData.PROPERTIES = [
            'action',
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'step',
            'style',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'translationTarget',
            'twoWayBindable',
            'ui',
            'undo',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        listswiperstepperMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listswiperstepper,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listswiperstepper,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listswiperstepper' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listswiperstepper,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listswiperstepper,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listswiperstepper,event' },
            { name: 'focusenter', parameters: 'listswiperstepper,event' },
            { name: 'focusleave', parameters: 'listswiperstepper,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listswiperstepper,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listswiperstepper,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listswiperstepper,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listswiperstepper' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        listswiperstepperMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return listswiperstepperMetaData;
    }());
    var ExtListswiperstepperComponent = /** @class */ (function (_super) {
        __extends(ExtListswiperstepperComponent, _super);
        function ExtListswiperstepperComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, listswiperstepperMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtListswiperstepperComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(listswiperstepperMetaData);
            };
        /**
         * @return {?}
         */
        ExtListswiperstepperComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtListswiperstepperComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'listswiperstepper',
                        inputs: listswiperstepperMetaData.PROPERTIES,
                        outputs: listswiperstepperMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtListswiperstepperComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtListswiperstepperComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtListswiperstepperComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var nestedlistMetaData = /** @class */ (function () {
        function nestedlistMetaData() {
        }
        nestedlistMetaData.XTYPE = 'nestedlist';
        nestedlistMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowDeselect',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'backButton',
            'backText',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'detailCard',
            'detailContainer',
            'disabled',
            'displayed',
            'displayField',
            'docked',
            'draggable',
            'emptyText',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastActiveList',
            'lastNode',
            'layout',
            'left',
            'listConfig',
            'listeners',
            'loadingText',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'toolbar',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'updateTitleText',
            'userCls',
            'userSelectable',
            'useTitleAsBackText',
            'useToolbar',
            'variableHeights',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        nestedlistMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,nestedlist,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'nestedlist,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'back', parameters: 'nestedlist,node,lastActiveList,detailCardActive' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeload', parameters: 'nestedlist,store,operation' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionchange', parameters: 'nestedlist,list,node,selections' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'nestedlist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'nestedlist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'containertap', parameters: 'nestedlist,list,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,nestedlist,newActiveItem' },
            { name: 'deselect', parameters: 'nestedlist,list,selections' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'nestedlist,event' },
            { name: 'focusenter', parameters: 'nestedlist,event' },
            { name: 'focusleave', parameters: 'nestedlist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'itemtap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'leafitemtap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'listchange', parameters: 'nestedlist,listitem' },
            { name: 'load', parameters: 'nestedlist,store,records,successful,operation' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'nestedlist,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'nestedlist,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'nestedlist,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'nestedlist,list,selections' },
            { name: 'selectionchange', parameters: 'nestedlist,list,selections' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'nestedlist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        nestedlistMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'back',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforeload',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionchange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'containertap',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemtap',
            'leafitemtap',
            'leftchange',
            'listchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return nestedlistMetaData;
    }());
    var ExtNestedlistComponent = /** @class */ (function (_super) {
        __extends(ExtNestedlistComponent, _super);
        function ExtNestedlistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, nestedlistMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtNestedlistComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(nestedlistMetaData);
            };
        /**
         * @return {?}
         */
        ExtNestedlistComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtNestedlistComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'nestedlist',
                        inputs: nestedlistMetaData.PROPERTIES,
                        outputs: nestedlistMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtNestedlistComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtNestedlistComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtNestedlistComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pullrefreshbarMetaData = /** @class */ (function () {
        function pullrefreshbarMetaData() {
        }
        pullrefreshbarMetaData.XTYPE = 'pullrefreshbar';
        pullrefreshbarMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastUpdated',
            'lastUpdatedDateFormat',
            'lastUpdatedText',
            'left',
            'listeners',
            'loadedText',
            'loadingText',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'pull',
            'pullText',
            'record',
            'reference',
            'relative',
            'releaseText',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pullrefreshbarMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pullrefreshbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pullrefreshbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pullrefreshbar,event' },
            { name: 'focusenter', parameters: 'pullrefreshbar,event' },
            { name: 'focusleave', parameters: 'pullrefreshbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pullrefreshbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pullrefreshbarMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pullrefreshbarMetaData;
    }());
    var ExtPullrefreshbarComponent = /** @class */ (function (_super) {
        __extends(ExtPullrefreshbarComponent, _super);
        function ExtPullrefreshbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pullrefreshbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPullrefreshbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pullrefreshbarMetaData);
            };
        /**
         * @return {?}
         */
        ExtPullrefreshbarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPullrefreshbarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pullrefreshbar',
                        inputs: pullrefreshbarMetaData.PROPERTIES,
                        outputs: pullrefreshbarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPullrefreshbarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPullrefreshbarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPullrefreshbarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pullrefreshspinnerMetaData = /** @class */ (function () {
        function pullrefreshspinnerMetaData() {
        }
        pullrefreshspinnerMetaData.XTYPE = 'pullrefreshspinner';
        pullrefreshspinnerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastUpdated',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'pull',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'state',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pullrefreshspinnerMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pullrefreshspinner' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pullrefreshspinner,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pullrefreshspinner,event' },
            { name: 'focusenter', parameters: 'pullrefreshspinner,event' },
            { name: 'focusleave', parameters: 'pullrefreshspinner,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pullrefreshspinner' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pullrefreshspinnerMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pullrefreshspinnerMetaData;
    }());
    var ExtPullrefreshspinnerComponent = /** @class */ (function (_super) {
        __extends(ExtPullrefreshspinnerComponent, _super);
        function ExtPullrefreshspinnerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pullrefreshspinnerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPullrefreshspinnerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pullrefreshspinnerMetaData);
            };
        /**
         * @return {?}
         */
        ExtPullrefreshspinnerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPullrefreshspinnerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pullrefreshspinner',
                        inputs: pullrefreshspinnerMetaData.PROPERTIES,
                        outputs: pullrefreshspinnerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPullrefreshspinnerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPullrefreshspinnerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPullrefreshspinnerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var simplelistitemMetaData = /** @class */ (function () {
        function simplelistitemMetaData() {
        }
        simplelistitemMetaData.XTYPE = 'simplelistitem';
        simplelistitemMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        simplelistitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'simplelistitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'simplelistitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'simplelistitem,event' },
            { name: 'focusenter', parameters: 'simplelistitem,event' },
            { name: 'focusleave', parameters: 'simplelistitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'simplelistitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        simplelistitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return simplelistitemMetaData;
    }());
    var ExtSimplelistitemComponent = /** @class */ (function (_super) {
        __extends(ExtSimplelistitemComponent, _super);
        function ExtSimplelistitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, simplelistitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSimplelistitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(simplelistitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtSimplelistitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSimplelistitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'simplelistitem',
                        inputs: simplelistitemMetaData.PROPERTIES,
                        outputs: simplelistitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSimplelistitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSimplelistitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSimplelistitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var dialogMetaData = /** @class */ (function () {
        function dialogMetaData() {
        }
        dialogMetaData.XTYPE = 'dialog';
        dialogMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'constrainDrag',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'dismissAction',
            'dismissHandler',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maskTapHandler',
            'maxHeight',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        dialogMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dialog,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'dialog' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'dialog' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'dialog,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dialog' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dialog,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'dialog' },
            { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'dialog' },
            { name: 'drawershow', parameters: 'dialog' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'dialog' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dialog,event' },
            { name: 'focusenter', parameters: 'dialog,event' },
            { name: 'focusleave', parameters: 'dialog,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dialog,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dialog,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'dialog,context' },
            { name: 'resizedragcancel', parameters: 'dialog,context' },
            { name: 'resizedragend', parameters: 'dialog,context' },
            { name: 'resizedragstart', parameters: 'dialog,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dialog' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        dialogMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaximize',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerestore',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'restore',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return dialogMetaData;
    }());
    var ExtDialogComponent = /** @class */ (function (_super) {
        __extends(ExtDialogComponent, _super);
        function ExtDialogComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, dialogMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDialogComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(dialogMetaData);
            };
        /**
         * @return {?}
         */
        ExtDialogComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDialogComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'dialog',
                        inputs: dialogMetaData.PROPERTIES,
                        outputs: dialogMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDialogComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDialogComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDialogComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var windowMetaData = /** @class */ (function () {
        function windowMetaData() {
        }
        windowMetaData.XTYPE = 'window';
        windowMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'constrainDrag',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'dismissAction',
            'dismissHandler',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maskTapHandler',
            'maxHeight',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        windowMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dialog,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'dialog' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'dialog' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'dialog,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dialog' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dialog,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'dialog' },
            { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'dialog' },
            { name: 'drawershow', parameters: 'dialog' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'dialog' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dialog,event' },
            { name: 'focusenter', parameters: 'dialog,event' },
            { name: 'focusleave', parameters: 'dialog,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dialog,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dialog,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'dialog,context' },
            { name: 'resizedragcancel', parameters: 'dialog,context' },
            { name: 'resizedragend', parameters: 'dialog,context' },
            { name: 'resizedragstart', parameters: 'dialog,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dialog' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        windowMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaximize',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerestore',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'restore',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return windowMetaData;
    }());
    var ExtWindowComponent = /** @class */ (function (_super) {
        __extends(ExtWindowComponent, _super);
        function ExtWindowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, windowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtWindowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(windowMetaData);
            };
        /**
         * @return {?}
         */
        ExtWindowComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtWindowComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'window',
                        inputs: windowMetaData.PROPERTIES,
                        outputs: windowMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtWindowComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtWindowComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtWindowComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var drawMetaData = /** @class */ (function () {
        function drawMetaData() {
        }
        drawMetaData.XTYPE = 'draw';
        drawMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'downloadServerUrl',
            'draggable',
            'engine',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gradients',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizeHandler',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sprites',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'surfaceZIndexes',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        drawMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,draw,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'draw,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'draw' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'draw,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,draw,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'draw,event' },
            { name: 'focusenter', parameters: 'draw,event' },
            { name: 'focusleave', parameters: 'draw,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'draw,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'draw,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'draw,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'tofront', parameters: 'draw' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        drawMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bodyresize',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spriteclick',
            'spritedblclick',
            'spritemousedown',
            'spritemousemove',
            'spritemouseout',
            'spritemouseover',
            'spritemouseup',
            'spritetap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return drawMetaData;
    }());
    var ExtDrawComponent = /** @class */ (function (_super) {
        __extends(ExtDrawComponent, _super);
        function ExtDrawComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, drawMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDrawComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(drawMetaData);
            };
        /**
         * @return {?}
         */
        ExtDrawComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDrawComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'draw',
                        inputs: drawMetaData.PROPERTIES,
                        outputs: drawMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDrawComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDrawComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDrawComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var surfaceMetaData = /** @class */ (function () {
        function surfaceMetaData() {
        }
        surfaceMetaData.XTYPE = 'surface';
        surfaceMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'background',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'dirty',
            'disabled',
            'eventHandlers',
            'flex',
            'flipRtlText',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rect',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        surfaceMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'surface' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'surface,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'surface,event' },
            { name: 'focusenter', parameters: 'surface,event' },
            { name: 'focusleave', parameters: 'surface,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'surface' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        surfaceMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return surfaceMetaData;
    }());
    var ExtSurfaceComponent = /** @class */ (function (_super) {
        __extends(ExtSurfaceComponent, _super);
        function ExtSurfaceComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, surfaceMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSurfaceComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(surfaceMetaData);
            };
        /**
         * @return {?}
         */
        ExtSurfaceComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSurfaceComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'surface',
                        inputs: surfaceMetaData.PROPERTIES,
                        outputs: surfaceMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSurfaceComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSurfaceComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSurfaceComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var editorMetaData = /** @class */ (function () {
        function editorMetaData() {
        }
        editorMetaData.XTYPE = 'editor';
        editorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignment',
            'allowBlur',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cancelOnClear',
            'cancelOnEsc',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'completeOnEnter',
            'constrain',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'field',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideEl',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'ignoreNoChange',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'matchFont',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'offset',
            'padding',
            'parentEl',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'revertInvalid',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'swallowKeys',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'updateEl',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        editorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,editor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'editor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value' },
            { name: 'beforetofront', parameters: 'editor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'editor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'complete', parameters: 'editor,value,startValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,editor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'editor,event' },
            { name: 'focusenter', parameters: 'editor,event' },
            { name: 'focusleave', parameters: 'editor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'editor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'editor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'editor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value' },
            { name: 'tofront', parameters: 'editor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        editorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecomplete',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestartedit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'canceledit',
            'centeredchange',
            'complete',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'specialkey',
            'startedit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return editorMetaData;
    }());
    var ExtEditorComponent = /** @class */ (function (_super) {
        __extends(ExtEditorComponent, _super);
        function ExtEditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, editorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(editorMetaData);
            };
        /**
         * @return {?}
         */
        ExtEditorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtEditorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'editor',
                        inputs: editorMetaData.PROPERTIES,
                        outputs: editorMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtEditorComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtEditorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtEditorComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var checkboxMetaData = /** @class */ (function () {
        function checkboxMetaData() {
        }
        checkboxMetaData.XTYPE = 'checkbox';
        checkboxMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkboxMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkbox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkbox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkbox,newValue,oldValue' },
            { name: 'check', parameters: 'checkbox' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkbox,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkbox,event' },
            { name: 'focusenter', parameters: 'checkbox,event' },
            { name: 'focusleave', parameters: 'checkbox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkbox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'checkbox' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkboxMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return checkboxMetaData;
    }());
    var ExtCheckboxComponent = /** @class */ (function (_super) {
        __extends(ExtCheckboxComponent, _super);
        function ExtCheckboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(checkboxMetaData);
            };
        /**
         * @return {?}
         */
        ExtCheckboxComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCheckboxComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'checkbox',
                        inputs: checkboxMetaData.PROPERTIES,
                        outputs: checkboxMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCheckboxComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCheckboxComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCheckboxComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var checkboxfieldMetaData = /** @class */ (function () {
        function checkboxfieldMetaData() {
        }
        checkboxfieldMetaData.XTYPE = 'checkboxfield';
        checkboxfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkboxfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkbox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkbox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkbox,newValue,oldValue' },
            { name: 'check', parameters: 'checkbox' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkbox,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkbox,event' },
            { name: 'focusenter', parameters: 'checkbox,event' },
            { name: 'focusleave', parameters: 'checkbox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkbox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'checkbox' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkboxfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return checkboxfieldMetaData;
    }());
    var ExtCheckboxfieldComponent = /** @class */ (function (_super) {
        __extends(ExtCheckboxfieldComponent, _super);
        function ExtCheckboxfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkboxfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCheckboxfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(checkboxfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtCheckboxfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCheckboxfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'checkboxfield',
                        inputs: checkboxfieldMetaData.PROPERTIES,
                        outputs: checkboxfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCheckboxfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCheckboxfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCheckboxfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var comboboxMetaData = /** @class */ (function () {
        function comboboxMetaData() {
        }
        comboboxMetaData.XTYPE = 'combobox';
        comboboxMetaData.PROPERTIES = [
            'alignTarget',
            'allQuery',
            'alwaysOnTop',
            'animateUnderline',
            'anyMatch',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'caseSensitive',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enableRegEx',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minChars',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'primaryFilter',
            'publishes',
            'queryCaching',
            'queryDelay',
            'queryMode',
            'queryParam',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerAction',
            'triggers',
            'twoWayBindable',
            'typeAhead',
            'typeAheadDelay',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        comboboxMetaData.EVENTS = [
            { name: 'action', parameters: 'combobox,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepickercreate', parameters: 'combobox,newValue' },
            { name: 'beforequery', parameters: 'queryPlan' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'combobox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'combobox,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'combobox,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'combobox,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'combobox,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'combobox,e' },
            { name: 'focusenter', parameters: 'combobox,event' },
            { name: 'focusleave', parameters: 'combobox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'combobox,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'combobox,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'combobox,e' },
            { name: 'pickercreate', parameters: 'combobox,picker' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'combobox,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'combobox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        comboboxMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepickercreate',
            'beforequery',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'pickercreate',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return comboboxMetaData;
    }());
    var ExtComboboxComponent = /** @class */ (function (_super) {
        __extends(ExtComboboxComponent, _super);
        function ExtComboboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, comboboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtComboboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(comboboxMetaData);
            };
        /**
         * @return {?}
         */
        ExtComboboxComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtComboboxComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'combobox',
                        inputs: comboboxMetaData.PROPERTIES,
                        outputs: comboboxMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtComboboxComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtComboboxComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtComboboxComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var comboboxfieldMetaData = /** @class */ (function () {
        function comboboxfieldMetaData() {
        }
        comboboxfieldMetaData.XTYPE = 'comboboxfield';
        comboboxfieldMetaData.PROPERTIES = [
            'alignTarget',
            'allQuery',
            'alwaysOnTop',
            'animateUnderline',
            'anyMatch',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'caseSensitive',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enableRegEx',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minChars',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'primaryFilter',
            'publishes',
            'queryCaching',
            'queryDelay',
            'queryMode',
            'queryParam',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerAction',
            'triggers',
            'twoWayBindable',
            'typeAhead',
            'typeAheadDelay',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        comboboxfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'combobox,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepickercreate', parameters: 'combobox,newValue' },
            { name: 'beforequery', parameters: 'queryPlan' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'combobox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'combobox,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'combobox,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'combobox,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'combobox,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'combobox,e' },
            { name: 'focusenter', parameters: 'combobox,event' },
            { name: 'focusleave', parameters: 'combobox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'combobox,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'combobox,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'combobox,e' },
            { name: 'pickercreate', parameters: 'combobox,picker' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'combobox,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'combobox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        comboboxfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepickercreate',
            'beforequery',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'pickercreate',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return comboboxfieldMetaData;
    }());
    var ExtComboboxfieldComponent = /** @class */ (function (_super) {
        __extends(ExtComboboxfieldComponent, _super);
        function ExtComboboxfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, comboboxfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtComboboxfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(comboboxfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtComboboxfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtComboboxfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'comboboxfield',
                        inputs: comboboxfieldMetaData.PROPERTIES,
                        outputs: comboboxfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtComboboxfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtComboboxfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtComboboxfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var containerfieldMetaData = /** @class */ (function () {
        function containerfieldMetaData() {
        }
        containerfieldMetaData.XTYPE = 'containerfield';
        containerfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'autoSize',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'container',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'layout',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        containerfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'containerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'containerfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'containerfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'containerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'containerfield,event' },
            { name: 'focusenter', parameters: 'containerfield,event' },
            { name: 'focusleave', parameters: 'containerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'containerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        containerfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return containerfieldMetaData;
    }());
    var ExtContainerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtContainerfieldComponent, _super);
        function ExtContainerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, containerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtContainerfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(containerfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtContainerfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtContainerfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'containerfield',
                        inputs: containerfieldMetaData.PROPERTIES,
                        outputs: containerfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtContainerfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtContainerfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtContainerfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var fieldcontainerMetaData = /** @class */ (function () {
        function fieldcontainerMetaData() {
        }
        fieldcontainerMetaData.XTYPE = 'fieldcontainer';
        fieldcontainerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'autoSize',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'container',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'layout',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldcontainerMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'containerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'containerfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'containerfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'containerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'containerfield,event' },
            { name: 'focusenter', parameters: 'containerfield,event' },
            { name: 'focusleave', parameters: 'containerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'containerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldcontainerMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldcontainerMetaData;
    }());
    var ExtFieldcontainerComponent = /** @class */ (function (_super) {
        __extends(ExtFieldcontainerComponent, _super);
        function ExtFieldcontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldcontainerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtFieldcontainerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(fieldcontainerMetaData);
            };
        /**
         * @return {?}
         */
        ExtFieldcontainerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtFieldcontainerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'fieldcontainer',
                        inputs: fieldcontainerMetaData.PROPERTIES,
                        outputs: fieldcontainerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtFieldcontainerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtFieldcontainerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtFieldcontainerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datefieldMetaData = /** @class */ (function () {
        function datefieldMetaData() {
        }
        datefieldMetaData.XTYPE = 'datefield';
        datefieldMetaData.PROPERTIES = [
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'dateFormat',
            'defaultListenerScope',
            'destroyPickerOnHide',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxDate',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'datefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datefield,e' },
            { name: 'focusenter', parameters: 'datefield,event' },
            { name: 'focusleave', parameters: 'datefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'datefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datefieldMetaData;
    }());
    var ExtDatefieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatefieldComponent, _super);
        function ExtDatefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatefieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datefieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatefieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatefieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datefield',
                        inputs: datefieldMetaData.PROPERTIES,
                        outputs: datefieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatefieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatefieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatefieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datepickerfieldMetaData = /** @class */ (function () {
        function datepickerfieldMetaData() {
        }
        datepickerfieldMetaData.XTYPE = 'datepickerfield';
        datepickerfieldMetaData.PROPERTIES = [
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'dateFormat',
            'defaultListenerScope',
            'destroyPickerOnHide',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxDate',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepickerfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'datefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datefield,e' },
            { name: 'focusenter', parameters: 'datefield,event' },
            { name: 'focusleave', parameters: 'datefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'datefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepickerfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepickerfieldMetaData;
    }());
    var ExtDatepickerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickerfieldComponent, _super);
        function ExtDatepickerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepickerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatepickerfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datepickerfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatepickerfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatepickerfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datepickerfield',
                        inputs: datepickerfieldMetaData.PROPERTIES,
                        outputs: datepickerfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatepickerfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatepickerfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatepickerfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datepickernativefieldMetaData = /** @class */ (function () {
        function datepickernativefieldMetaData() {
        }
        datepickernativefieldMetaData.XTYPE = 'datepickernativefield';
        datepickernativefieldMetaData.PROPERTIES = [
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'dateFormat',
            'defaultListenerScope',
            'destroyPickerOnHide',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxDate',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepickernativefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'datepickernativefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepickernativefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepickernativefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datepickernativefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datepickernativefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datepickernativefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepickernativefield,e' },
            { name: 'focusenter', parameters: 'datepickernativefield,event' },
            { name: 'focusleave', parameters: 'datepickernativefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'datepickernativefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datepickernativefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datepickernativefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepickernativefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepickernativefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepickernativefieldMetaData;
    }());
    var ExtDatepickernativefieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickernativefieldComponent, _super);
        function ExtDatepickernativefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepickernativefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatepickernativefieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datepickernativefieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatepickernativefieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatepickernativefieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datepickernativefield',
                        inputs: datepickernativefieldMetaData.PROPERTIES,
                        outputs: datepickernativefieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatepickernativefieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatepickernativefieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatepickernativefieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var displayfieldMetaData = /** @class */ (function () {
        function displayfieldMetaData() {
        }
        displayfieldMetaData.XTYPE = 'displayfield';
        displayfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'encodeHtml',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusable',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        displayfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'displayfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'displayfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'displayfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'displayfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'displayfield,event' },
            { name: 'focusenter', parameters: 'displayfield,event' },
            { name: 'focusleave', parameters: 'displayfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'displayfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        displayfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return displayfieldMetaData;
    }());
    var ExtDisplayfieldComponent = /** @class */ (function (_super) {
        __extends(ExtDisplayfieldComponent, _super);
        function ExtDisplayfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, displayfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDisplayfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(displayfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtDisplayfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDisplayfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'displayfield',
                        inputs: displayfieldMetaData.PROPERTIES,
                        outputs: displayfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDisplayfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDisplayfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDisplayfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var emailfieldMetaData = /** @class */ (function () {
        function emailfieldMetaData() {
        }
        emailfieldMetaData.XTYPE = 'emailfield';
        emailfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        emailfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'emailfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'emailfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'emailfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'emailfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'emailfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'emailfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'emailfield,e' },
            { name: 'focusenter', parameters: 'emailfield,event' },
            { name: 'focusleave', parameters: 'emailfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'emailfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'emailfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'emailfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'emailfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        emailfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return emailfieldMetaData;
    }());
    var ExtEmailfieldComponent = /** @class */ (function (_super) {
        __extends(ExtEmailfieldComponent, _super);
        function ExtEmailfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, emailfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtEmailfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(emailfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtEmailfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtEmailfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'emailfield',
                        inputs: emailfieldMetaData.PROPERTIES,
                        outputs: emailfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtEmailfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtEmailfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtEmailfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var fieldMetaData = /** @class */ (function () {
        function fieldMetaData() {
        }
        fieldMetaData.XTYPE = 'field';
        fieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'field' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'field,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'field,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'field,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'field,event' },
            { name: 'focusenter', parameters: 'field,event' },
            { name: 'focusleave', parameters: 'field,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'field' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldMetaData;
    }());
    var ExtFieldComponent = /** @class */ (function (_super) {
        __extends(ExtFieldComponent, _super);
        function ExtFieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtFieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(fieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtFieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtFieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'field',
                        inputs: fieldMetaData.PROPERTIES,
                        outputs: fieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtFieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtFieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtFieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var filefieldMetaData = /** @class */ (function () {
        function filefieldMetaData() {
        }
        filefieldMetaData.XTYPE = 'filefield';
        filefieldMetaData.PROPERTIES = [
            'accept',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'capture',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiple',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        filefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'filefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'filefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'filefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'filefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'filefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'filefield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'filefield,e' },
            { name: 'focusenter', parameters: 'filefield,event' },
            { name: 'focusleave', parameters: 'filefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'filefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'filefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'filefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'filefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        filefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return filefieldMetaData;
    }());
    var ExtFilefieldComponent = /** @class */ (function (_super) {
        __extends(ExtFilefieldComponent, _super);
        function ExtFilefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, filefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtFilefieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(filefieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtFilefieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtFilefieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'filefield',
                        inputs: filefieldMetaData.PROPERTIES,
                        outputs: filefieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtFilefieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtFilefieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtFilefieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var filebuttonMetaData = /** @class */ (function () {
        function filebuttonMetaData() {
        }
        filebuttonMetaData.XTYPE = 'filebutton';
        filebuttonMetaData.PROPERTIES = [
            'accept',
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'capture',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiple',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        filebuttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'filebutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'filebutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'filebutton,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'filebutton,event' },
            { name: 'focusenter', parameters: 'filebutton,event' },
            { name: 'focusleave', parameters: 'filebutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'filebutton,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'filebutton,e' },
            { name: 'tofront', parameters: 'filebutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        filebuttonMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return filebuttonMetaData;
    }());
    var ExtFilebuttonComponent = /** @class */ (function (_super) {
        __extends(ExtFilebuttonComponent, _super);
        function ExtFilebuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, filebuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtFilebuttonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(filebuttonMetaData);
            };
        /**
         * @return {?}
         */
        ExtFilebuttonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtFilebuttonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'filebutton',
                        inputs: filebuttonMetaData.PROPERTIES,
                        outputs: filebuttonMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtFilebuttonComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtFilebuttonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtFilebuttonComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var hiddenfieldMetaData = /** @class */ (function () {
        function hiddenfieldMetaData() {
        }
        hiddenfieldMetaData.XTYPE = 'hiddenfield';
        hiddenfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        hiddenfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'hiddenfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'hiddenfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'hiddenfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'hiddenfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'hiddenfield,event' },
            { name: 'focusenter', parameters: 'hiddenfield,event' },
            { name: 'focusleave', parameters: 'hiddenfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'hiddenfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        hiddenfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return hiddenfieldMetaData;
    }());
    var ExtHiddenfieldComponent = /** @class */ (function (_super) {
        __extends(ExtHiddenfieldComponent, _super);
        function ExtHiddenfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, hiddenfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtHiddenfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(hiddenfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtHiddenfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtHiddenfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'hiddenfield',
                        inputs: hiddenfieldMetaData.PROPERTIES,
                        outputs: hiddenfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtHiddenfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtHiddenfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtHiddenfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var inputfieldMetaData = /** @class */ (function () {
        function inputfieldMetaData() {
        }
        inputfieldMetaData.XTYPE = 'inputfield';
        inputfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        inputfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'inputfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'inputfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'inputfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'inputfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'inputfield,event' },
            { name: 'focusenter', parameters: 'inputfield,event' },
            { name: 'focusleave', parameters: 'inputfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'inputfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        inputfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return inputfieldMetaData;
    }());
    var ExtInputfieldComponent = /** @class */ (function (_super) {
        __extends(ExtInputfieldComponent, _super);
        function ExtInputfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, inputfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtInputfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(inputfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtInputfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtInputfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'inputfield',
                        inputs: inputfieldMetaData.PROPERTIES,
                        outputs: inputfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtInputfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtInputfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtInputfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var numberfieldMetaData = /** @class */ (function () {
        function numberfieldMetaData() {
        }
        numberfieldMetaData.XTYPE = 'numberfield';
        numberfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'decimals',
            'decimalsText',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxValue',
            'maxValueText',
            'maxWidth',
            'minHeight',
            'minValue',
            'minValueText',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'trim',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        numberfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'numberfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'numberfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numberfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'numberfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'numberfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'numberfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'numberfield,e' },
            { name: 'focusenter', parameters: 'numberfield,event' },
            { name: 'focusleave', parameters: 'numberfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'numberfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'numberfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'numberfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'numberfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        numberfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return numberfieldMetaData;
    }());
    var ExtNumberfieldComponent = /** @class */ (function (_super) {
        __extends(ExtNumberfieldComponent, _super);
        function ExtNumberfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, numberfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtNumberfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(numberfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtNumberfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtNumberfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'numberfield',
                        inputs: numberfieldMetaData.PROPERTIES,
                        outputs: numberfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtNumberfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtNumberfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtNumberfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var fieldpanelMetaData = /** @class */ (function () {
        function fieldpanelMetaData() {
        }
        fieldpanelMetaData.XTYPE = 'fieldpanel';
        fieldpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,fieldpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'fieldpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'fieldpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'fieldpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'fieldpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'fieldpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'fieldpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'fieldpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,fieldpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'fieldpanel' },
            { name: 'drawershow', parameters: 'fieldpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'fieldpanel,result' },
            { name: 'expand', parameters: 'fieldpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'fieldpanel,event' },
            { name: 'focusenter', parameters: 'fieldpanel,event' },
            { name: 'focusleave', parameters: 'fieldpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'fieldpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'fieldpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'fieldpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'fieldpanel,context' },
            { name: 'resizedragcancel', parameters: 'fieldpanel,context' },
            { name: 'resizedragend', parameters: 'fieldpanel,context' },
            { name: 'resizedragstart', parameters: 'fieldpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'fieldpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldpanelMetaData;
    }());
    var ExtFieldpanelComponent = /** @class */ (function (_super) {
        __extends(ExtFieldpanelComponent, _super);
        function ExtFieldpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtFieldpanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(fieldpanelMetaData);
            };
        /**
         * @return {?}
         */
        ExtFieldpanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtFieldpanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'fieldpanel',
                        inputs: fieldpanelMetaData.PROPERTIES,
                        outputs: fieldpanelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtFieldpanelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtFieldpanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtFieldpanelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var passwordfieldMetaData = /** @class */ (function () {
        function passwordfieldMetaData() {
        }
        passwordfieldMetaData.XTYPE = 'passwordfield';
        passwordfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'revealable',
            'revealed',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        passwordfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'passwordfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'passwordfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'passwordfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'passwordfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'passwordfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'passwordfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'passwordfield,e' },
            { name: 'focusenter', parameters: 'passwordfield,event' },
            { name: 'focusleave', parameters: 'passwordfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'passwordfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'passwordfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'passwordfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'passwordfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        passwordfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return passwordfieldMetaData;
    }());
    var ExtPasswordfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPasswordfieldComponent, _super);
        function ExtPasswordfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, passwordfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPasswordfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(passwordfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtPasswordfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPasswordfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'passwordfield',
                        inputs: passwordfieldMetaData.PROPERTIES,
                        outputs: passwordfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPasswordfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPasswordfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPasswordfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pickerfieldMetaData = /** @class */ (function () {
        function pickerfieldMetaData() {
        }
        pickerfieldMetaData.XTYPE = 'pickerfield';
        pickerfieldMetaData.PROPERTIES = [
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pickerfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'pickerfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pickerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pickerfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'pickerfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'pickerfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'pickerfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pickerfield,e' },
            { name: 'focusenter', parameters: 'pickerfield,event' },
            { name: 'focusleave', parameters: 'pickerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'pickerfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'pickerfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'pickerfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pickerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pickerfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pickerfieldMetaData;
    }());
    var ExtPickerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPickerfieldComponent, _super);
        function ExtPickerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pickerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPickerfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pickerfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtPickerfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPickerfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pickerfield',
                        inputs: pickerfieldMetaData.PROPERTIES,
                        outputs: pickerfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPickerfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPickerfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPickerfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var radioMetaData = /** @class */ (function () {
        function radioMetaData() {
        }
        radioMetaData.XTYPE = 'radio';
        radioMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        radioMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'radio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'radio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'radio,newValue,oldValue' },
            { name: 'check', parameters: 'radio' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'radio,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'radio,event' },
            { name: 'focusenter', parameters: 'radio,event' },
            { name: 'focusleave', parameters: 'radio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'radio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'radio' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        radioMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return radioMetaData;
    }());
    var ExtRadioComponent = /** @class */ (function (_super) {
        __extends(ExtRadioComponent, _super);
        function ExtRadioComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, radioMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRadioComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(radioMetaData);
            };
        /**
         * @return {?}
         */
        ExtRadioComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRadioComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'radio',
                        inputs: radioMetaData.PROPERTIES,
                        outputs: radioMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRadioComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRadioComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRadioComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var radiofieldMetaData = /** @class */ (function () {
        function radiofieldMetaData() {
        }
        radiofieldMetaData.XTYPE = 'radiofield';
        radiofieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'centered',
            'checked',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMaskTap',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        radiofieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'radio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'radio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'radio,newValue,oldValue' },
            { name: 'check', parameters: 'radio' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'radio,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'radio,event' },
            { name: 'focusenter', parameters: 'radio,event' },
            { name: 'focusleave', parameters: 'radio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'radio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'radio' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        radiofieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'check',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'uncheck',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return radiofieldMetaData;
    }());
    var ExtRadiofieldComponent = /** @class */ (function (_super) {
        __extends(ExtRadiofieldComponent, _super);
        function ExtRadiofieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, radiofieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRadiofieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(radiofieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtRadiofieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRadiofieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'radiofield',
                        inputs: radiofieldMetaData.PROPERTIES,
                        outputs: radiofieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRadiofieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRadiofieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRadiofieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var searchfieldMetaData = /** @class */ (function () {
        function searchfieldMetaData() {
        }
        searchfieldMetaData.XTYPE = 'searchfield';
        searchfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        searchfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'searchfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'searchfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'searchfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'searchfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'searchfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'searchfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'searchfield,e' },
            { name: 'focusenter', parameters: 'searchfield,event' },
            { name: 'focusleave', parameters: 'searchfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'searchfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'searchfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'searchfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'searchfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        searchfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return searchfieldMetaData;
    }());
    var ExtSearchfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSearchfieldComponent, _super);
        function ExtSearchfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, searchfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSearchfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(searchfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtSearchfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSearchfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'searchfield',
                        inputs: searchfieldMetaData.PROPERTIES,
                        outputs: searchfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSearchfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSearchfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSearchfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var selectfieldMetaData = /** @class */ (function () {
        function selectfieldMetaData() {
        }
        selectfieldMetaData.XTYPE = 'selectfield';
        selectfieldMetaData.PROPERTIES = [
            'alignTarget',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoFocus',
            'autoFocusLast',
            'autoHideInputMask',
            'autoLoadOnValue',
            'autoSelect',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'chipView',
            'clearable',
            'cls',
            'collapseOnSelect',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'delimiter',
            'disabled',
            'displayed',
            'displayField',
            'displayTpl',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hiddenName',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemCls',
            'itemId',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multiSelect',
            'name',
            'nameable',
            'options',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'recordCreator',
            'recordCreatorScope',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnTab',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        selectfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'selectfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'selectfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'selectfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'selectfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectfield,e' },
            { name: 'focusenter', parameters: 'selectfield,event' },
            { name: 'focusleave', parameters: 'selectfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'selectfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'selectfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'selectfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'selectfield,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        selectfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return selectfieldMetaData;
    }());
    var ExtSelectfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSelectfieldComponent, _super);
        function ExtSelectfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, selectfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSelectfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(selectfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtSelectfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSelectfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'selectfield',
                        inputs: selectfieldMetaData.PROPERTIES,
                        outputs: selectfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSelectfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSelectfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSelectfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var singlesliderfieldMetaData = /** @class */ (function () {
        function singlesliderfieldMetaData() {
        }
        singlesliderfieldMetaData.XTYPE = 'singlesliderfield';
        singlesliderfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'liveUpdate',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'slider',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        singlesliderfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'singlesliderfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'singlesliderfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'me,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'singlesliderfield,sl,thumb,e' },
            { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
            { name: 'dragend', parameters: 'singlesliderfield,sl,thumb,value,e' },
            { name: 'dragstart', parameters: 'singlesliderfield,sl,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'singlesliderfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'singlesliderfield,event' },
            { name: 'focusenter', parameters: 'singlesliderfield,event' },
            { name: 'focusleave', parameters: 'singlesliderfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'singlesliderfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        singlesliderfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragchange',
            'dragend',
            'dragstart',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return singlesliderfieldMetaData;
    }());
    var ExtSinglesliderfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSinglesliderfieldComponent, _super);
        function ExtSinglesliderfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, singlesliderfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSinglesliderfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(singlesliderfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtSinglesliderfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSinglesliderfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'singlesliderfield',
                        inputs: singlesliderfieldMetaData.PROPERTIES,
                        outputs: singlesliderfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSinglesliderfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSinglesliderfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSinglesliderfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sliderfieldMetaData = /** @class */ (function () {
        function sliderfieldMetaData() {
        }
        sliderfieldMetaData.XTYPE = 'sliderfield';
        sliderfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'liveUpdate',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'slider',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sliderfieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sliderfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sliderfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'me,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'sliderfield,sl,thumb,e' },
            { name: 'dragchange', parameters: 'me,sl,thumb,newValue,oldValue' },
            { name: 'dragend', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'dragstart', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'sliderfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sliderfield,event' },
            { name: 'focusenter', parameters: 'sliderfield,event' },
            { name: 'focusleave', parameters: 'sliderfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sliderfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sliderfieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragchange',
            'dragend',
            'dragstart',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sliderfieldMetaData;
    }());
    var ExtSliderfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSliderfieldComponent, _super);
        function ExtSliderfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sliderfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSliderfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sliderfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtSliderfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSliderfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sliderfield',
                        inputs: sliderfieldMetaData.PROPERTIES,
                        outputs: sliderfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSliderfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSliderfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSliderfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var spinnerfieldMetaData = /** @class */ (function () {
        function spinnerfieldMetaData() {
        }
        spinnerfieldMetaData.XTYPE = 'spinnerfield';
        spinnerfieldMetaData.PROPERTIES = [
            'accelerateOnTapHold',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'cycle',
            'data',
            'decimals',
            'decimalsText',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'groupButtons',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxValue',
            'maxValueText',
            'maxWidth',
            'minHeight',
            'minValue',
            'minValueText',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stepValue',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'trim',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spinnerfieldMetaData.EVENTS = [
            { name: 'action', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spinnerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spinnerfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'spinnerfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'spinnerfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'spinnerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spinnerfield,e' },
            { name: 'focusenter', parameters: 'spinnerfield,event' },
            { name: 'focusleave', parameters: 'spinnerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'spinnerfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'spinnerfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'spinnerfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spin', parameters: 'spinnerfield,value,direction' },
            { name: 'spindown', parameters: 'spinnerfield,value' },
            { name: 'spinup', parameters: 'spinnerfield,value' },
            { name: 'tofront', parameters: 'spinnerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: '' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spinnerfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'spin',
            'spindown',
            'spinup',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return spinnerfieldMetaData;
    }());
    var ExtSpinnerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSpinnerfieldComponent, _super);
        function ExtSpinnerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spinnerfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSpinnerfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(spinnerfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtSpinnerfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSpinnerfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'spinnerfield',
                        inputs: spinnerfieldMetaData.PROPERTIES,
                        outputs: spinnerfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSpinnerfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSpinnerfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSpinnerfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var textfieldMetaData = /** @class */ (function () {
        function textfieldMetaData() {
        }
        textfieldMetaData.XTYPE = 'textfield';
        textfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'textfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'textfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'textfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'textfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textfield,e' },
            { name: 'focusenter', parameters: 'textfield,event' },
            { name: 'focusleave', parameters: 'textfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'textfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'textfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'textfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return textfieldMetaData;
    }());
    var ExtTextfieldComponent = /** @class */ (function (_super) {
        __extends(ExtTextfieldComponent, _super);
        function ExtTextfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTextfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(textfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtTextfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTextfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'textfield',
                        inputs: textfieldMetaData.PROPERTIES,
                        outputs: textfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTextfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTextfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTextfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var textareafieldMetaData = /** @class */ (function () {
        function textareafieldMetaData() {
        }
        textareafieldMetaData.XTYPE = 'textareafield';
        textareafieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxRows',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textareafieldMetaData.EVENTS = [
            { name: 'action', parameters: 'textareafield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textareafield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textareafield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'textareafield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'textareafield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'textareafield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textareafield,e' },
            { name: 'focusenter', parameters: 'textareafield,event' },
            { name: 'focusleave', parameters: 'textareafield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'textareafield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'textareafield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'textareafield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textareafield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textareafieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return textareafieldMetaData;
    }());
    var ExtTextareafieldComponent = /** @class */ (function (_super) {
        __extends(ExtTextareafieldComponent, _super);
        function ExtTextareafieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textareafieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTextareafieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(textareafieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtTextareafieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTextareafieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'textareafield',
                        inputs: textareafieldMetaData.PROPERTIES,
                        outputs: textareafieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTextareafieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTextareafieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTextareafieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var timefieldMetaData = /** @class */ (function () {
        function timefieldMetaData() {
        }
        timefieldMetaData.XTYPE = 'timefield';
        timefieldMetaData.PROPERTIES = [
            'alignTarget',
            'altFormats',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        timefieldMetaData.EVENTS = [
            { name: 'action', parameters: 'timefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'timefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'timefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'timefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'timefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'timefield,e' },
            { name: 'focusenter', parameters: 'timefield,event' },
            { name: 'focusleave', parameters: 'timefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'timefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'timefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'timefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'timefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        timefieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return timefieldMetaData;
    }());
    var ExtTimefieldComponent = /** @class */ (function (_super) {
        __extends(ExtTimefieldComponent, _super);
        function ExtTimefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, timefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTimefieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(timefieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtTimefieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTimefieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'timefield',
                        inputs: timefieldMetaData.PROPERTIES,
                        outputs: timefieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTimefieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTimefieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTimefieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var togglefieldMetaData = /** @class */ (function () {
        function togglefieldMetaData() {
        }
        togglefieldMetaData.XTYPE = 'togglefield';
        togglefieldMetaData.PROPERTIES = [
            'activeLabel',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoFitErrors',
            'axisLock',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'boxLabel',
            'boxLabelAlign',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveLabel',
            'increment',
            'inline',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'liveUpdate',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'slider',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        togglefieldMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'togglefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'togglefield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'togglefield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: '' },
            { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
            { name: 'dragend', parameters: '' },
            { name: 'dragstart', parameters: '' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'togglefield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'togglefield,event' },
            { name: 'focusenter', parameters: 'togglefield,event' },
            { name: 'focusleave', parameters: 'togglefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'togglefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        togglefieldMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragchange',
            'dragend',
            'dragstart',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return togglefieldMetaData;
    }());
    var ExtTogglefieldComponent = /** @class */ (function (_super) {
        __extends(ExtTogglefieldComponent, _super);
        function ExtTogglefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, togglefieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTogglefieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(togglefieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtTogglefieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTogglefieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'togglefield',
                        inputs: togglefieldMetaData.PROPERTIES,
                        outputs: togglefieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTogglefieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTogglefieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTogglefieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var cleartriggerMetaData = /** @class */ (function () {
        function cleartriggerMetaData() {
        }
        cleartriggerMetaData.XTYPE = 'cleartrigger';
        cleartriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        cleartriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'cleartrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cleartrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'cleartrigger,event' },
            { name: 'focusenter', parameters: 'cleartrigger,event' },
            { name: 'focusleave', parameters: 'cleartrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'cleartrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        cleartriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return cleartriggerMetaData;
    }());
    var ExtCleartriggerComponent = /** @class */ (function (_super) {
        __extends(ExtCleartriggerComponent, _super);
        function ExtCleartriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, cleartriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCleartriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(cleartriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtCleartriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCleartriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'cleartrigger',
                        inputs: cleartriggerMetaData.PROPERTIES,
                        outputs: cleartriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCleartriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCleartriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCleartriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datetriggerMetaData = /** @class */ (function () {
        function datetriggerMetaData() {
        }
        datetriggerMetaData.XTYPE = 'datetrigger';
        datetriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datetriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'datetrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datetrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'datetrigger,event' },
            { name: 'focusenter', parameters: 'datetrigger,event' },
            { name: 'focusleave', parameters: 'datetrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'datetrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datetriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return datetriggerMetaData;
    }());
    var ExtDatetriggerComponent = /** @class */ (function (_super) {
        __extends(ExtDatetriggerComponent, _super);
        function ExtDatetriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datetriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatetriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datetriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatetriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatetriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datetrigger',
                        inputs: datetriggerMetaData.PROPERTIES,
                        outputs: datetriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatetriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatetriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatetriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var expandtriggerMetaData = /** @class */ (function () {
        function expandtriggerMetaData() {
        }
        expandtriggerMetaData.XTYPE = 'expandtrigger';
        expandtriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        expandtriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'expandtrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'expandtrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'expandtrigger,event' },
            { name: 'focusenter', parameters: 'expandtrigger,event' },
            { name: 'focusleave', parameters: 'expandtrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'expandtrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        expandtriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return expandtriggerMetaData;
    }());
    var ExtExpandtriggerComponent = /** @class */ (function (_super) {
        __extends(ExtExpandtriggerComponent, _super);
        function ExtExpandtriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, expandtriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtExpandtriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(expandtriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtExpandtriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtExpandtriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'expandtrigger',
                        inputs: expandtriggerMetaData.PROPERTIES,
                        outputs: expandtriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtExpandtriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtExpandtriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtExpandtriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var menutriggerMetaData = /** @class */ (function () {
        function menutriggerMetaData() {
        }
        menutriggerMetaData.XTYPE = 'menutrigger';
        menutriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'menu',
            'menuAlign',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menutriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'menutrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menutrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'menutrigger,event' },
            { name: 'focusenter', parameters: 'menutrigger,event' },
            { name: 'focusleave', parameters: 'menutrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'menutrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menutriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return menutriggerMetaData;
    }());
    var ExtMenutriggerComponent = /** @class */ (function (_super) {
        __extends(ExtMenutriggerComponent, _super);
        function ExtMenutriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menutriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMenutriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(menutriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtMenutriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMenutriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'menutrigger',
                        inputs: menutriggerMetaData.PROPERTIES,
                        outputs: menutriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMenutriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMenutriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMenutriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var revealtriggerMetaData = /** @class */ (function () {
        function revealtriggerMetaData() {
        }
        revealtriggerMetaData.XTYPE = 'revealtrigger';
        revealtriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        revealtriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'revealtrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'revealtrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'revealtrigger,event' },
            { name: 'focusenter', parameters: 'revealtrigger,event' },
            { name: 'focusleave', parameters: 'revealtrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'revealtrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        revealtriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return revealtriggerMetaData;
    }());
    var ExtRevealtriggerComponent = /** @class */ (function (_super) {
        __extends(ExtRevealtriggerComponent, _super);
        function ExtRevealtriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, revealtriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRevealtriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(revealtriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtRevealtriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRevealtriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'revealtrigger',
                        inputs: revealtriggerMetaData.PROPERTIES,
                        outputs: revealtriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRevealtriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRevealtriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRevealtriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var spindowntriggerMetaData = /** @class */ (function () {
        function spindowntriggerMetaData() {
        }
        spindowntriggerMetaData.XTYPE = 'spindowntrigger';
        spindowntriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spindowntriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'spindowntrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spindowntrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'spindowntrigger,event' },
            { name: 'focusenter', parameters: 'spindowntrigger,event' },
            { name: 'focusleave', parameters: 'spindowntrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'spindowntrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spindowntriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return spindowntriggerMetaData;
    }());
    var ExtSpindowntriggerComponent = /** @class */ (function (_super) {
        __extends(ExtSpindowntriggerComponent, _super);
        function ExtSpindowntriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spindowntriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSpindowntriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(spindowntriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtSpindowntriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSpindowntriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'spindowntrigger',
                        inputs: spindowntriggerMetaData.PROPERTIES,
                        outputs: spindowntriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSpindowntriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSpindowntriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSpindowntriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var spinuptriggerMetaData = /** @class */ (function () {
        function spinuptriggerMetaData() {
        }
        spinuptriggerMetaData.XTYPE = 'spinuptrigger';
        spinuptriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spinuptriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'spinuptrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spinuptrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'spinuptrigger,event' },
            { name: 'focusenter', parameters: 'spinuptrigger,event' },
            { name: 'focusleave', parameters: 'spinuptrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'spinuptrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spinuptriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return spinuptriggerMetaData;
    }());
    var ExtSpinuptriggerComponent = /** @class */ (function (_super) {
        __extends(ExtSpinuptriggerComponent, _super);
        function ExtSpinuptriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spinuptriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSpinuptriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(spinuptriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtSpinuptriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSpinuptriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'spinuptrigger',
                        inputs: spinuptriggerMetaData.PROPERTIES,
                        outputs: spinuptriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSpinuptriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSpinuptriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSpinuptriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var timetriggerMetaData = /** @class */ (function () {
        function timetriggerMetaData() {
        }
        timetriggerMetaData.XTYPE = 'timetrigger';
        timetriggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        timetriggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'timetrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timetrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'timetrigger,event' },
            { name: 'focusenter', parameters: 'timetrigger,event' },
            { name: 'focusleave', parameters: 'timetrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'timetrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        timetriggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return timetriggerMetaData;
    }());
    var ExtTimetriggerComponent = /** @class */ (function (_super) {
        __extends(ExtTimetriggerComponent, _super);
        function ExtTimetriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, timetriggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTimetriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(timetriggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtTimetriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTimetriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'timetrigger',
                        inputs: timetriggerMetaData.PROPERTIES,
                        outputs: timetriggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTimetriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTimetriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTimetriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var triggerMetaData = /** @class */ (function () {
        function triggerMetaData() {
        }
        triggerMetaData.XTYPE = 'trigger';
        triggerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'field',
            'flex',
            'floated',
            'focusCls',
            'focusOnTap',
            'group',
            'handler',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'repeat',
            'ripple',
            'scope',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'side',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        triggerMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'trigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'trigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'trigger,event' },
            { name: 'focusenter', parameters: 'trigger,event' },
            { name: 'focusleave', parameters: 'trigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'trigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        triggerMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return triggerMetaData;
    }());
    var ExtTriggerComponent = /** @class */ (function (_super) {
        __extends(ExtTriggerComponent, _super);
        function ExtTriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, triggerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTriggerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(triggerMetaData);
            };
        /**
         * @return {?}
         */
        ExtTriggerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTriggerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'trigger',
                        inputs: triggerMetaData.PROPERTIES,
                        outputs: triggerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTriggerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTriggerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTriggerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var urlfieldMetaData = /** @class */ (function () {
        function urlfieldMetaData() {
        }
        urlfieldMetaData.XTYPE = 'urlfield';
        urlfieldMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'placeholder',
            'placeHolder',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        urlfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'urlfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'urlfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'urlfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'urlfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'urlfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'urlfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'urlfield,e' },
            { name: 'focusenter', parameters: 'urlfield,event' },
            { name: 'focusleave', parameters: 'urlfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'urlfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'urlfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'urlfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'urlfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        urlfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return urlfieldMetaData;
    }());
    var ExtUrlfieldComponent = /** @class */ (function (_super) {
        __extends(ExtUrlfieldComponent, _super);
        function ExtUrlfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, urlfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtUrlfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(urlfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtUrlfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtUrlfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'urlfield',
                        inputs: urlfieldMetaData.PROPERTIES,
                        outputs: urlfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtUrlfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtUrlfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtUrlfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var fieldsetMetaData = /** @class */ (function () {
        function fieldsetMetaData() {
        }
        fieldsetMetaData.XTYPE = 'fieldset';
        fieldsetMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'instructions',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        fieldsetMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,fieldset,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'fieldset,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'fieldset' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'fieldset,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,fieldset,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'fieldset,event' },
            { name: 'focusenter', parameters: 'fieldset,event' },
            { name: 'focusleave', parameters: 'fieldset,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'fieldset,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'fieldset,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'fieldset,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'fieldset' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        fieldsetMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return fieldsetMetaData;
    }());
    var ExtFieldsetComponent = /** @class */ (function (_super) {
        __extends(ExtFieldsetComponent, _super);
        function ExtFieldsetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, fieldsetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtFieldsetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(fieldsetMetaData);
            };
        /**
         * @return {?}
         */
        ExtFieldsetComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtFieldsetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'fieldset',
                        inputs: fieldsetMetaData.PROPERTIES,
                        outputs: fieldsetMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtFieldsetComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtFieldsetComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtFieldsetComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var formpanelMetaData = /** @class */ (function () {
        function formpanelMetaData() {
        }
        formpanelMetaData.XTYPE = 'formpanel';
        formpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        formpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,formpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'formpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'formpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'formpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'formpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'formpanel,values,options,e' },
            { name: 'beforetofront', parameters: 'formpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'formpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'formpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,formpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'formpanel' },
            { name: 'drawershow', parameters: 'formpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'formpanel,result' },
            { name: 'expand', parameters: 'formpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'formpanel,event' },
            { name: 'focusenter', parameters: 'formpanel,event' },
            { name: 'focusleave', parameters: 'formpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'formpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'formpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'formpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'formpanel,context' },
            { name: 'resizedragcancel', parameters: 'formpanel,context' },
            { name: 'resizedragend', parameters: 'formpanel,context' },
            { name: 'resizedragstart', parameters: 'formpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'formpanel,result,e' },
            { name: 'tofront', parameters: 'formpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        formpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return formpanelMetaData;
    }());
    var ExtFormpanelComponent = /** @class */ (function (_super) {
        __extends(ExtFormpanelComponent, _super);
        function ExtFormpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, formpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtFormpanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(formpanelMetaData);
            };
        /**
         * @return {?}
         */
        ExtFormpanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtFormpanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'formpanel',
                        inputs: formpanelMetaData.PROPERTIES,
                        outputs: formpanelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtFormpanelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtFormpanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtFormpanelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridcellbaseMetaData = /** @class */ (function () {
        function gridcellbaseMetaData() {
        }
        gridcellbaseMetaData.XTYPE = 'gridcellbase';
        gridcellbaseMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcellbaseMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'gridcellbase' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcellbase,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'gridcellbase,event' },
            { name: 'focusenter', parameters: 'gridcellbase,event' },
            { name: 'focusleave', parameters: 'gridcellbase,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'gridcellbase' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcellbaseMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return gridcellbaseMetaData;
    }());
    var ExtGridcellbaseComponent = /** @class */ (function (_super) {
        __extends(ExtGridcellbaseComponent, _super);
        function ExtGridcellbaseComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcellbaseMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridcellbaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridcellbaseMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridcellbaseComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridcellbaseComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridcellbase',
                        inputs: gridcellbaseMetaData.PROPERTIES,
                        outputs: gridcellbaseMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridcellbaseComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridcellbaseComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridcellbaseComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var booleancellMetaData = /** @class */ (function () {
        function booleancellMetaData() {
        }
        booleancellMetaData.XTYPE = 'booleancell';
        booleancellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'falseText',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'trueText',
            'twoWayBindable',
            'ui',
            'undefinedText',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        booleancellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'booleancell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'booleancell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'booleancell,event' },
            { name: 'focusenter', parameters: 'booleancell,event' },
            { name: 'focusleave', parameters: 'booleancell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'booleancell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        booleancellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return booleancellMetaData;
    }());
    var ExtBooleancellComponent = /** @class */ (function (_super) {
        __extends(ExtBooleancellComponent, _super);
        function ExtBooleancellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, booleancellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtBooleancellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(booleancellMetaData);
            };
        /**
         * @return {?}
         */
        ExtBooleancellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtBooleancellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'booleancell',
                        inputs: booleancellMetaData.PROPERTIES,
                        outputs: booleancellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtBooleancellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtBooleancellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtBooleancellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridcellMetaData = /** @class */ (function () {
        function gridcellMetaData() {
        }
        gridcellMetaData.XTYPE = 'gridcell';
        gridcellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'gridcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'gridcell,event' },
            { name: 'focusenter', parameters: 'gridcell,event' },
            { name: 'focusleave', parameters: 'gridcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'gridcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return gridcellMetaData;
    }());
    var ExtGridcellComponent = /** @class */ (function (_super) {
        __extends(ExtGridcellComponent, _super);
        function ExtGridcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridcellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridcellMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridcellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridcellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridcell',
                        inputs: gridcellMetaData.PROPERTIES,
                        outputs: gridcellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridcellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridcellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridcellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var checkcellMetaData = /** @class */ (function () {
        function checkcellMetaData() {
        }
        checkcellMetaData.XTYPE = 'checkcell';
        checkcellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'checkcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'checkcell,event' },
            { name: 'focusenter', parameters: 'checkcell,event' },
            { name: 'focusleave', parameters: 'checkcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'checkcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return checkcellMetaData;
    }());
    var ExtCheckcellComponent = /** @class */ (function (_super) {
        __extends(ExtCheckcellComponent, _super);
        function ExtCheckcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCheckcellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(checkcellMetaData);
            };
        /**
         * @return {?}
         */
        ExtCheckcellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCheckcellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'checkcell',
                        inputs: checkcellMetaData.PROPERTIES,
                        outputs: checkcellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCheckcellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCheckcellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCheckcellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datecellMetaData = /** @class */ (function () {
        function datecellMetaData() {
        }
        datecellMetaData.XTYPE = 'datecell';
        datecellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'format',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datecellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'datecell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datecell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'datecell,event' },
            { name: 'focusenter', parameters: 'datecell,event' },
            { name: 'focusleave', parameters: 'datecell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'datecell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datecellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return datecellMetaData;
    }());
    var ExtDatecellComponent = /** @class */ (function (_super) {
        __extends(ExtDatecellComponent, _super);
        function ExtDatecellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datecellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatecellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datecellMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatecellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatecellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datecell',
                        inputs: datecellMetaData.PROPERTIES,
                        outputs: datecellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatecellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatecellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatecellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var numbercellMetaData = /** @class */ (function () {
        function numbercellMetaData() {
        }
        numbercellMetaData.XTYPE = 'numbercell';
        numbercellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'format',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        numbercellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'numbercell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numbercell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'numbercell,event' },
            { name: 'focusenter', parameters: 'numbercell,event' },
            { name: 'focusleave', parameters: 'numbercell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'numbercell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        numbercellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return numbercellMetaData;
    }());
    var ExtNumbercellComponent = /** @class */ (function (_super) {
        __extends(ExtNumbercellComponent, _super);
        function ExtNumbercellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, numbercellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtNumbercellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(numbercellMetaData);
            };
        /**
         * @return {?}
         */
        ExtNumbercellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtNumbercellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'numbercell',
                        inputs: numbercellMetaData.PROPERTIES,
                        outputs: numbercellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtNumbercellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtNumbercellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtNumbercellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var rownumberercellMetaData = /** @class */ (function () {
        function rownumberercellMetaData() {
        }
        rownumberercellMetaData.XTYPE = 'rownumberercell';
        rownumberercellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'format',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rownumberercellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'rownumberercell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rownumberercell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'rownumberercell,event' },
            { name: 'focusenter', parameters: 'rownumberercell,event' },
            { name: 'focusleave', parameters: 'rownumberercell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'rownumberercell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rownumberercellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return rownumberercellMetaData;
    }());
    var ExtRownumberercellComponent = /** @class */ (function (_super) {
        __extends(ExtRownumberercellComponent, _super);
        function ExtRownumberercellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rownumberercellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRownumberercellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(rownumberercellMetaData);
            };
        /**
         * @return {?}
         */
        ExtRownumberercellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRownumberercellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rownumberercell',
                        inputs: rownumberercellMetaData.PROPERTIES,
                        outputs: rownumberercellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRownumberercellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRownumberercellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRownumberercellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var textcellMetaData = /** @class */ (function () {
        function textcellMetaData() {
        }
        textcellMetaData.XTYPE = 'textcell';
        textcellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'textcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'textcell,event' },
            { name: 'focusenter', parameters: 'textcell,event' },
            { name: 'focusleave', parameters: 'textcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'textcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return textcellMetaData;
    }());
    var ExtTextcellComponent = /** @class */ (function (_super) {
        __extends(ExtTextcellComponent, _super);
        function ExtTextcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTextcellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(textcellMetaData);
            };
        /**
         * @return {?}
         */
        ExtTextcellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTextcellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'textcell',
                        inputs: textcellMetaData.PROPERTIES,
                        outputs: textcellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTextcellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTextcellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTextcellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var treecellMetaData = /** @class */ (function () {
        function treecellMetaData() {
        }
        treecellMetaData.XTYPE = 'treecell';
        treecellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'iconClsProperty',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treecellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'treecell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treecell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'treecell,event' },
            { name: 'focusenter', parameters: 'treecell,event' },
            { name: 'focusleave', parameters: 'treecell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'treecell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treecellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return treecellMetaData;
    }());
    var ExtTreecellComponent = /** @class */ (function (_super) {
        __extends(ExtTreecellComponent, _super);
        function ExtTreecellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treecellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTreecellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(treecellMetaData);
            };
        /**
         * @return {?}
         */
        ExtTreecellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTreecellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'treecell',
                        inputs: treecellMetaData.PROPERTIES,
                        outputs: treecellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTreecellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTreecellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTreecellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var widgetcellMetaData = /** @class */ (function () {
        function widgetcellMetaData() {
        }
        widgetcellMetaData.XTYPE = 'widgetcell';
        widgetcellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'forceWidth',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'widget',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        widgetcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'widgetcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'widgetcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'widgetcell,event' },
            { name: 'focusenter', parameters: 'widgetcell,event' },
            { name: 'focusleave', parameters: 'widgetcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'widgetcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        widgetcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return widgetcellMetaData;
    }());
    var ExtWidgetcellComponent = /** @class */ (function (_super) {
        __extends(ExtWidgetcellComponent, _super);
        function ExtWidgetcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, widgetcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtWidgetcellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(widgetcellMetaData);
            };
        /**
         * @return {?}
         */
        ExtWidgetcellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtWidgetcellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'widgetcell',
                        inputs: widgetcellMetaData.PROPERTIES,
                        outputs: widgetcellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtWidgetcellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtWidgetcellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtWidgetcellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var celleditorMetaData = /** @class */ (function () {
        function celleditorMetaData() {
        }
        celleditorMetaData.XTYPE = 'celleditor';
        celleditorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'alignment',
            'allowBlur',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoPin',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cancelOnClear',
            'cancelOnEsc',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'completeOnEnter',
            'constrain',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'field',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideEl',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'ignoreNoChange',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'matchFont',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'offset',
            'padding',
            'parentEl',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'revertInvalid',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'swallowKeys',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'updateEl',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        celleditorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,celleditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'celleditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'celleditor,value,startValue' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'celleditor,boundEl,value' },
            { name: 'beforetofront', parameters: 'celleditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'celleditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'celleditor,value,startValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'complete', parameters: 'celleditor,value,startValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,celleditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'celleditor,event' },
            { name: 'focusenter', parameters: 'celleditor,event' },
            { name: 'focusleave', parameters: 'celleditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'celleditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'celleditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'celleditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'celleditor,field,event' },
            { name: 'startedit', parameters: 'celleditor,boundEl,value' },
            { name: 'tofront', parameters: 'celleditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        celleditorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecomplete',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestartedit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'canceledit',
            'centeredchange',
            'complete',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'specialkey',
            'startedit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return celleditorMetaData;
    }());
    var ExtCelleditorComponent = /** @class */ (function (_super) {
        __extends(ExtCelleditorComponent, _super);
        function ExtCelleditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, celleditorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCelleditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(celleditorMetaData);
            };
        /**
         * @return {?}
         */
        ExtCelleditorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCelleditorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'celleditor',
                        inputs: celleditorMetaData.PROPERTIES,
                        outputs: celleditorMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCelleditorComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCelleditorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCelleditorComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var booleancolumnMetaData = /** @class */ (function () {
        function booleancolumnMetaData() {
        }
        booleancolumnMetaData.XTYPE = 'booleancolumn';
        booleancolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'falseText',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'trueText',
            'twoWayBindable',
            'ui',
            'undefinedText',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        booleancolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,booleancolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'booleancolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'booleancolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'booleancolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,booleancolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'booleancolumn,event' },
            { name: 'focusenter', parameters: 'booleancolumn,event' },
            { name: 'focusleave', parameters: 'booleancolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'booleancolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'booleancolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'booleancolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'booleancolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        booleancolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return booleancolumnMetaData;
    }());
    var ExtBooleancolumnComponent = /** @class */ (function (_super) {
        __extends(ExtBooleancolumnComponent, _super);
        function ExtBooleancolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, booleancolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtBooleancolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(booleancolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtBooleancolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtBooleancolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'booleancolumn',
                        inputs: booleancolumnMetaData.PROPERTIES,
                        outputs: booleancolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtBooleancolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtBooleancolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtBooleancolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var checkcolumnMetaData = /** @class */ (function () {
        function checkcolumnMetaData() {
        }
        checkcolumnMetaData.XTYPE = 'checkcolumn';
        checkcolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'headerCheckbox',
            'headerCheckboxAlign',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopSelection',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        checkcolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,checkcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'checkcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,checkcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkcolumn,event' },
            { name: 'focusenter', parameters: 'checkcolumn,event' },
            { name: 'focusleave', parameters: 'checkcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'checkcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'checkcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'checkcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        checkcolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return checkcolumnMetaData;
    }());
    var ExtCheckcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtCheckcolumnComponent, _super);
        function ExtCheckcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, checkcolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtCheckcolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(checkcolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtCheckcolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtCheckcolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'checkcolumn',
                        inputs: checkcolumnMetaData.PROPERTIES,
                        outputs: checkcolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtCheckcolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtCheckcolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtCheckcolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridcolumnMetaData = /** @class */ (function () {
        function gridcolumnMetaData() {
        }
        gridcolumnMetaData.XTYPE = 'gridcolumn';
        gridcolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridcolumnMetaData;
    }());
    var ExtGridcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtGridcolumnComponent, _super);
        function ExtGridcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridcolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridcolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridcolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridcolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridcolumn',
                        inputs: gridcolumnMetaData.PROPERTIES,
                        outputs: gridcolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridcolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridcolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridcolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var columnMetaData = /** @class */ (function () {
        function columnMetaData() {
        }
        columnMetaData.XTYPE = 'column';
        columnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        columnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        columnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return columnMetaData;
    }());
    var ExtColumnComponent = /** @class */ (function (_super) {
        __extends(ExtColumnComponent, _super);
        function ExtColumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, columnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtColumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(columnMetaData);
            };
        /**
         * @return {?}
         */
        ExtColumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtColumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'column',
                        inputs: columnMetaData.PROPERTIES,
                        outputs: columnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtColumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtColumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtColumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var templatecolumnMetaData = /** @class */ (function () {
        function templatecolumnMetaData() {
        }
        templatecolumnMetaData.XTYPE = 'templatecolumn';
        templatecolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        templatecolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        templatecolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return templatecolumnMetaData;
    }());
    var ExtTemplatecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTemplatecolumnComponent, _super);
        function ExtTemplatecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, templatecolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTemplatecolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(templatecolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtTemplatecolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTemplatecolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'templatecolumn',
                        inputs: templatecolumnMetaData.PROPERTIES,
                        outputs: templatecolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTemplatecolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTemplatecolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTemplatecolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datecolumnMetaData = /** @class */ (function () {
        function datecolumnMetaData() {
        }
        datecolumnMetaData.XTYPE = 'datecolumn';
        datecolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'format',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datecolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datecolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datecolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datecolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datecolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,datecolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datecolumn,event' },
            { name: 'focusenter', parameters: 'datecolumn,event' },
            { name: 'focusleave', parameters: 'datecolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datecolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datecolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datecolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datecolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datecolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datecolumnMetaData;
    }());
    var ExtDatecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtDatecolumnComponent, _super);
        function ExtDatecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datecolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatecolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datecolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatecolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatecolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datecolumn',
                        inputs: datecolumnMetaData.PROPERTIES,
                        outputs: datecolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatecolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatecolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatecolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var numbercolumnMetaData = /** @class */ (function () {
        function numbercolumnMetaData() {
        }
        numbercolumnMetaData.XTYPE = 'numbercolumn';
        numbercolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'format',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        numbercolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,numbercolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'numbercolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'numbercolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numbercolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,numbercolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'numbercolumn,event' },
            { name: 'focusenter', parameters: 'numbercolumn,event' },
            { name: 'focusleave', parameters: 'numbercolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'numbercolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'numbercolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'numbercolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'numbercolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        numbercolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return numbercolumnMetaData;
    }());
    var ExtNumbercolumnComponent = /** @class */ (function (_super) {
        __extends(ExtNumbercolumnComponent, _super);
        function ExtNumbercolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, numbercolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtNumbercolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(numbercolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtNumbercolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtNumbercolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'numbercolumn',
                        inputs: numbercolumnMetaData.PROPERTIES,
                        outputs: numbercolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtNumbercolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtNumbercolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtNumbercolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var rownumbererMetaData = /** @class */ (function () {
        function rownumbererMetaData() {
        }
        rownumbererMetaData.XTYPE = 'rownumberer';
        rownumbererMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'format',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rownumbererMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,rownumberer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'rownumberer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rownumberer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rownumberer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,rownumberer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rownumberer,event' },
            { name: 'focusenter', parameters: 'rownumberer,event' },
            { name: 'focusleave', parameters: 'rownumberer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'rownumberer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'rownumberer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'rownumberer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rownumberer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rownumbererMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return rownumbererMetaData;
    }());
    var ExtRownumbererComponent = /** @class */ (function (_super) {
        __extends(ExtRownumbererComponent, _super);
        function ExtRownumbererComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rownumbererMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRownumbererComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(rownumbererMetaData);
            };
        /**
         * @return {?}
         */
        ExtRownumbererComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRownumbererComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rownumberer',
                        inputs: rownumbererMetaData.PROPERTIES,
                        outputs: rownumbererMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRownumbererComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRownumbererComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRownumbererComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var selectioncolumnMetaData = /** @class */ (function () {
        function selectioncolumnMetaData() {
        }
        selectioncolumnMetaData.XTYPE = 'selectioncolumn';
        selectioncolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'headerCheckbox',
            'headerCheckboxAlign',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopSelection',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        selectioncolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,selectioncolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'selectioncolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectioncolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectioncolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,selectioncolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectioncolumn,event' },
            { name: 'focusenter', parameters: 'selectioncolumn,event' },
            { name: 'focusleave', parameters: 'selectioncolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'selectioncolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'selectioncolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'selectioncolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectioncolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        selectioncolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return selectioncolumnMetaData;
    }());
    var ExtSelectioncolumnComponent = /** @class */ (function (_super) {
        __extends(ExtSelectioncolumnComponent, _super);
        function ExtSelectioncolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, selectioncolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSelectioncolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(selectioncolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtSelectioncolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSelectioncolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'selectioncolumn',
                        inputs: selectioncolumnMetaData.PROPERTIES,
                        outputs: selectioncolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSelectioncolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSelectioncolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSelectioncolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var textcolumnMetaData = /** @class */ (function () {
        function textcolumnMetaData() {
        }
        textcolumnMetaData.XTYPE = 'textcolumn';
        textcolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        textcolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,textcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'textcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,textcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textcolumn,event' },
            { name: 'focusenter', parameters: 'textcolumn,event' },
            { name: 'focusleave', parameters: 'textcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'textcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'textcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'textcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        textcolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return textcolumnMetaData;
    }());
    var ExtTextcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTextcolumnComponent, _super);
        function ExtTextcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, textcolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTextcolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(textcolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtTextcolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTextcolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'textcolumn',
                        inputs: textcolumnMetaData.PROPERTIES,
                        outputs: textcolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTextcolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTextcolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTextcolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var treecolumnMetaData = /** @class */ (function () {
        function treecolumnMetaData() {
        }
        treecolumnMetaData.XTYPE = 'treecolumn';
        treecolumnMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'cell',
            'centered',
            'cls',
            'columns',
            'computedWidth',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataIndex',
            'defaultColumnUI',
            'defaultEditor',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'defaultWidth',
            'depends',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'editable',
            'editor',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'formatter',
            'fullscreen',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'height',
            'hidden',
            'hideable',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideShowMenuItem',
            'html',
            'id',
            'ignore',
            'ignoreExport',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuDisabled',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderer',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scratchCell',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'summaryType',
            'tabIndex',
            'text',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treecolumnMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,treecolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'treecolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'treecolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treecolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,treecolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'treecolumn,event' },
            { name: 'focusenter', parameters: 'treecolumn,event' },
            { name: 'focusleave', parameters: 'treecolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'treecolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'treecolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'treecolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'treecolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treecolumnMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return treecolumnMetaData;
    }());
    var ExtTreecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTreecolumnComponent, _super);
        function ExtTreecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treecolumnMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTreecolumnComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(treecolumnMetaData);
            };
        /**
         * @return {?}
         */
        ExtTreecolumnComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTreecolumnComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'treecolumn',
                        inputs: treecolumnMetaData.PROPERTIES,
                        outputs: treecolumnMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTreecolumnComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTreecolumnComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTreecolumnComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridMetaData = /** @class */ (function () {
        function gridMetaData() {
        }
        gridMetaData.XTYPE = 'grid';
        gridMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'columnLines',
            'columnMenu',
            'columnResize',
            'columns',
            'columnsMenuItem',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'hideScrollbar',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'multiColumnSort',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'rowNumbers',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'title',
            'titleBar',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useSimpleItems',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,grid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'grid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'grid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'grid,location' },
            { name: 'childlongpress', parameters: 'grid,location' },
            { name: 'childmouseenter', parameters: 'grid,location' },
            { name: 'childmouseleave', parameters: 'grid,location' },
            { name: 'childsingletap', parameters: 'grid,location' },
            { name: 'childtap', parameters: 'grid,location' },
            { name: 'childtaphold', parameters: 'grid,location' },
            { name: 'childtouchcancel', parameters: 'grid,location' },
            { name: 'childtouchend', parameters: 'grid,location' },
            { name: 'childtouchmove', parameters: 'grid,location' },
            { name: 'childtouchstart', parameters: 'grid,location' },
            { name: 'columnadd', parameters: 'grid,column,index' },
            { name: 'columnhide', parameters: 'grid,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'grid,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'grid,column' },
            { name: 'columnresize', parameters: 'grid,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'grid,column' },
            { name: 'columnsort', parameters: 'grid,column,direction' },
            { name: 'deactivate', parameters: 'oldActiveItem,grid,newActiveItem' },
            { name: 'deselect', parameters: 'grid,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'grid,event' },
            { name: 'focusenter', parameters: 'grid,event' },
            { name: 'focusleave', parameters: 'grid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'grid,index,record,action' },
            { name: 'itemdoubletap', parameters: 'grid,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'grid,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'grid,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'grid,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'grid,index,target,record,e' },
            { name: 'itemswipe', parameters: 'grid,index,target,record,e' },
            { name: 'itemtap', parameters: 'grid,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'grid,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'grid,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'grid' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'grid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'grid,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'grid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionextend',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cellselection',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'columnadd',
            'columnhide',
            'columnmenucreated',
            'columnmove',
            'columnremove',
            'columnresize',
            'columnselection',
            'columnshow',
            'columnsort',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionextenderdrag',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridMetaData;
    }());
    var ExtGridComponent = /** @class */ (function (_super) {
        __extends(ExtGridComponent, _super);
        function ExtGridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'grid',
                        inputs: gridMetaData.PROPERTIES,
                        outputs: gridMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var headercontainerMetaData = /** @class */ (function () {
        function headercontainerMetaData() {
        }
        headercontainerMetaData.XTYPE = 'headercontainer';
        headercontainerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'columns',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultColumnUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'verticalOverflow',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        headercontainerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,headercontainer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'headercontainer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'headercontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'headercontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,headercontainer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'headercontainer,event' },
            { name: 'focusenter', parameters: 'headercontainer,event' },
            { name: 'focusleave', parameters: 'headercontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'headercontainer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'headercontainer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'headercontainer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'headercontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        headercontainerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return headercontainerMetaData;
    }());
    var ExtHeadercontainerComponent = /** @class */ (function (_super) {
        __extends(ExtHeadercontainerComponent, _super);
        function ExtHeadercontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, headercontainerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtHeadercontainerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(headercontainerMetaData);
            };
        /**
         * @return {?}
         */
        ExtHeadercontainerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtHeadercontainerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'headercontainer',
                        inputs: headercontainerMetaData.PROPERTIES,
                        outputs: headercontainerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtHeadercontainerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtHeadercontainerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtHeadercontainerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var lockedgridMetaData = /** @class */ (function () {
        function lockedgridMetaData() {
        }
        lockedgridMetaData.XTYPE = 'lockedgrid';
        lockedgridMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'columnMenu',
            'columns',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaultLockedRegion',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'gridDefaults',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemConfig',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'leftGridDefaults',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'regions',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'rightGridDefaults',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'variableHeights',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        lockedgridMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,lockedgrid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'lockedgrid,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'lockedgrid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'lockedgrid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,lockedgrid,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'lockedgrid,event' },
            { name: 'focusenter', parameters: 'lockedgrid,event' },
            { name: 'focusleave', parameters: 'lockedgrid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'lockedgrid,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'lockedgrid,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'lockedgrid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'lockedgrid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        lockedgridMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return lockedgridMetaData;
    }());
    var ExtLockedgridComponent = /** @class */ (function (_super) {
        __extends(ExtLockedgridComponent, _super);
        function ExtLockedgridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, lockedgridMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtLockedgridComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(lockedgridMetaData);
            };
        /**
         * @return {?}
         */
        ExtLockedgridComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtLockedgridComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lockedgrid',
                        inputs: lockedgridMetaData.PROPERTIES,
                        outputs: lockedgridMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtLockedgridComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtLockedgridComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtLockedgridComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var lockedgridregionMetaData = /** @class */ (function () {
        function lockedgridregionMetaData() {
        }
        lockedgridregionMetaData.XTYPE = 'lockedgridregion';
        lockedgridregionMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grid',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'locked',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menuLabel',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'regionKey',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        lockedgridregionMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,lockedgridregion,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'lockedgridregion,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'lockedgridregion' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'lockedgridregion' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'lockedgridregion,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'lockedgridregion' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'lockedgridregion,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'lockedgridregion' },
            { name: 'deactivate', parameters: 'oldActiveItem,lockedgridregion,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'lockedgridregion' },
            { name: 'drawershow', parameters: 'lockedgridregion' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'lockedgridregion' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'lockedgridregion,event' },
            { name: 'focusenter', parameters: 'lockedgridregion,event' },
            { name: 'focusleave', parameters: 'lockedgridregion,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'lockedgridregion,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'lockedgridregion,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'lockedgridregion,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'lockedgridregion,context' },
            { name: 'resizedragcancel', parameters: 'lockedgridregion,context' },
            { name: 'resizedragend', parameters: 'lockedgridregion,context' },
            { name: 'resizedragstart', parameters: 'lockedgridregion,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'lockedgridregion' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        lockedgridregionMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return lockedgridregionMetaData;
    }());
    var ExtLockedgridregionComponent = /** @class */ (function (_super) {
        __extends(ExtLockedgridregionComponent, _super);
        function ExtLockedgridregionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, lockedgridregionMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtLockedgridregionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(lockedgridregionMetaData);
            };
        /**
         * @return {?}
         */
        ExtLockedgridregionComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtLockedgridregionComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lockedgridregion',
                        inputs: lockedgridregionMetaData.PROPERTIES,
                        outputs: lockedgridregionMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtLockedgridregionComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtLockedgridregionComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtLockedgridregionComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridcolumnsmenuMetaData = /** @class */ (function () {
        function gridcolumnsmenuMetaData() {
        }
        gridcolumnsmenuMetaData.XTYPE = 'gridcolumnsmenu';
        gridcolumnsmenuMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridcolumnsmenuMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumnsmenu' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumnsmenu,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumnsmenu,event' },
            { name: 'focusenter', parameters: 'gridcolumnsmenu,event' },
            { name: 'focusleave', parameters: 'gridcolumnsmenu,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumnsmenu' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridcolumnsmenuMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridcolumnsmenuMetaData;
    }());
    var ExtGridcolumnsmenuComponent = /** @class */ (function (_super) {
        __extends(ExtGridcolumnsmenuComponent, _super);
        function ExtGridcolumnsmenuComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridcolumnsmenuMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridcolumnsmenuComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridcolumnsmenuMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridcolumnsmenuComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridcolumnsmenuComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridcolumnsmenu',
                        inputs: gridcolumnsmenuMetaData.PROPERTIES,
                        outputs: gridcolumnsmenuMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridcolumnsmenuComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridcolumnsmenuComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridcolumnsmenuComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridgroupbythismenuitemMetaData = /** @class */ (function () {
        function gridgroupbythismenuitemMetaData() {
        }
        gridgroupbythismenuitemMetaData.XTYPE = 'gridgroupbythismenuitem';
        gridgroupbythismenuitemMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridgroupbythismenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridgroupbythismenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'focusenter', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'focusleave', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridgroupbythismenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridgroupbythismenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridgroupbythismenuitemMetaData;
    }());
    var ExtGridgroupbythismenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridgroupbythismenuitemComponent, _super);
        function ExtGridgroupbythismenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridgroupbythismenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridgroupbythismenuitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridgroupbythismenuitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridgroupbythismenuitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridgroupbythismenuitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridgroupbythismenuitem',
                        inputs: gridgroupbythismenuitemMetaData.PROPERTIES,
                        outputs: gridgroupbythismenuitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridgroupbythismenuitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridgroupbythismenuitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridgroupbythismenuitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridshowingroupsmenuitemMetaData = /** @class */ (function () {
        function gridshowingroupsmenuitemMetaData() {
        }
        gridshowingroupsmenuitemMetaData.XTYPE = 'gridshowingroupsmenuitem';
        gridshowingroupsmenuitemMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridshowingroupsmenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridshowingroupsmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridshowingroupsmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridshowingroupsmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'focusenter', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'focusleave', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridshowingroupsmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridshowingroupsmenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridshowingroupsmenuitemMetaData;
    }());
    var ExtGridshowingroupsmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridshowingroupsmenuitemComponent, _super);
        function ExtGridshowingroupsmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridshowingroupsmenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridshowingroupsmenuitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridshowingroupsmenuitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridshowingroupsmenuitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridshowingroupsmenuitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridshowingroupsmenuitem',
                        inputs: gridshowingroupsmenuitemMetaData.PROPERTIES,
                        outputs: gridshowingroupsmenuitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridshowingroupsmenuitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridshowingroupsmenuitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridshowingroupsmenuitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridsortascmenuitemMetaData = /** @class */ (function () {
        function gridsortascmenuitemMetaData() {
        }
        gridsortascmenuitemMetaData.XTYPE = 'gridsortascmenuitem';
        gridsortascmenuitemMetaData.PROPERTIES = [
            'allowUncheck',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridsortascmenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridsortascmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsortascmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsortascmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridsortascmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsortascmenuitem,event' },
            { name: 'focusenter', parameters: 'gridsortascmenuitem,event' },
            { name: 'focusleave', parameters: 'gridsortascmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsortascmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridsortascmenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridsortascmenuitemMetaData;
    }());
    var ExtGridsortascmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridsortascmenuitemComponent, _super);
        function ExtGridsortascmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridsortascmenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridsortascmenuitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridsortascmenuitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridsortascmenuitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridsortascmenuitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridsortascmenuitem',
                        inputs: gridsortascmenuitemMetaData.PROPERTIES,
                        outputs: gridsortascmenuitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridsortascmenuitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridsortascmenuitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridsortascmenuitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridsortdescmenuitemMetaData = /** @class */ (function () {
        function gridsortdescmenuitemMetaData() {
        }
        gridsortdescmenuitemMetaData.XTYPE = 'gridsortdescmenuitem';
        gridsortdescmenuitemMetaData.PROPERTIES = [
            'allowUncheck',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridsortdescmenuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridsortdescmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsortdescmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsortdescmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridsortdescmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsortdescmenuitem,event' },
            { name: 'focusenter', parameters: 'gridsortdescmenuitem,event' },
            { name: 'focusleave', parameters: 'gridsortdescmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsortdescmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridsortdescmenuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridsortdescmenuitemMetaData;
    }());
    var ExtGridsortdescmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridsortdescmenuitemComponent, _super);
        function ExtGridsortdescmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridsortdescmenuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridsortdescmenuitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridsortdescmenuitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridsortdescmenuitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridsortdescmenuitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridsortdescmenuitem',
                        inputs: gridsortdescmenuitemMetaData.PROPERTIES,
                        outputs: gridsortdescmenuitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridsortdescmenuitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridsortdescmenuitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridsortdescmenuitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pagingtoolbarMetaData = /** @class */ (function () {
        function pagingtoolbarMetaData() {
        }
        pagingtoolbarMetaData.XTYPE = 'pagingtoolbar';
        pagingtoolbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'nextButton',
            'padding',
            'plugins',
            'prevButton',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sliderField',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'summaryComponent',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pagingtoolbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pagingtoolbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pagingtoolbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pagingtoolbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pagingtoolbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,pagingtoolbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pagingtoolbar,event' },
            { name: 'focusenter', parameters: 'pagingtoolbar,event' },
            { name: 'focusleave', parameters: 'pagingtoolbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pagingtoolbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pagingtoolbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pagingtoolbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pagingtoolbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pagingtoolbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pagingtoolbarMetaData;
    }());
    var ExtPagingtoolbarComponent = /** @class */ (function (_super) {
        __extends(ExtPagingtoolbarComponent, _super);
        function ExtPagingtoolbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pagingtoolbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPagingtoolbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pagingtoolbarMetaData);
            };
        /**
         * @return {?}
         */
        ExtPagingtoolbarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPagingtoolbarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pagingtoolbar',
                        inputs: pagingtoolbarMetaData.PROPERTIES,
                        outputs: pagingtoolbarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPagingtoolbarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPagingtoolbarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPagingtoolbarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridrowMetaData = /** @class */ (function () {
        function gridrowMetaData() {
        }
        gridrowMetaData.XTYPE = 'gridrow';
        gridrowMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'body',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultCellUI',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandedField',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stickyVisibility',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridrowMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridrow,event' },
            { name: 'focusenter', parameters: 'gridrow,event' },
            { name: 'focusleave', parameters: 'gridrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridrowMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridrowMetaData;
    }());
    var ExtGridrowComponent = /** @class */ (function (_super) {
        __extends(ExtGridrowComponent, _super);
        function ExtGridrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridrowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridrowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridrowMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridrowComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridrowComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridrow',
                        inputs: gridrowMetaData.PROPERTIES,
                        outputs: gridrowMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridrowComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridrowComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridrowComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var rowbodyMetaData = /** @class */ (function () {
        function rowbodyMetaData() {
        }
        rowbodyMetaData.XTYPE = 'rowbody';
        rowbodyMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rowbodyMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rowbody' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rowbody,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rowbody,event' },
            { name: 'focusenter', parameters: 'rowbody,event' },
            { name: 'focusleave', parameters: 'rowbody,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rowbody' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rowbodyMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return rowbodyMetaData;
    }());
    var ExtRowbodyComponent = /** @class */ (function (_super) {
        __extends(ExtRowbodyComponent, _super);
        function ExtRowbodyComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rowbodyMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRowbodyComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(rowbodyMetaData);
            };
        /**
         * @return {?}
         */
        ExtRowbodyComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRowbodyComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rowbody',
                        inputs: rowbodyMetaData.PROPERTIES,
                        outputs: rowbodyMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRowbodyComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRowbodyComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRowbodyComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var rowheaderMetaData = /** @class */ (function () {
        function rowheaderMetaData() {
        }
        rowheaderMetaData.XTYPE = 'rowheader';
        rowheaderMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        rowheaderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rowheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rowheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rowheader,event' },
            { name: 'focusenter', parameters: 'rowheader,event' },
            { name: 'focusleave', parameters: 'rowheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rowheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        rowheaderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return rowheaderMetaData;
    }());
    var ExtRowheaderComponent = /** @class */ (function (_super) {
        __extends(ExtRowheaderComponent, _super);
        function ExtRowheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, rowheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRowheaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(rowheaderMetaData);
            };
        /**
         * @return {?}
         */
        ExtRowheaderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRowheaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rowheader',
                        inputs: rowheaderMetaData.PROPERTIES,
                        outputs: rowheaderMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRowheaderComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRowheaderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRowheaderComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gridsummaryrowMetaData = /** @class */ (function () {
        function gridsummaryrowMetaData() {
        }
        gridsummaryrowMetaData.XTYPE = 'gridsummaryrow';
        gridsummaryrowMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'body',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultCellUI',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandedField',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stickyVisibility',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gridsummaryrowMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsummaryrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsummaryrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsummaryrow,event' },
            { name: 'focusenter', parameters: 'gridsummaryrow,event' },
            { name: 'focusleave', parameters: 'gridsummaryrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsummaryrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gridsummaryrowMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gridsummaryrowMetaData;
    }());
    var ExtGridsummaryrowComponent = /** @class */ (function (_super) {
        __extends(ExtGridsummaryrowComponent, _super);
        function ExtGridsummaryrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gridsummaryrowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGridsummaryrowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gridsummaryrowMetaData);
            };
        /**
         * @return {?}
         */
        ExtGridsummaryrowComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGridsummaryrowComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gridsummaryrow',
                        inputs: gridsummaryrowMetaData.PROPERTIES,
                        outputs: gridsummaryrowMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGridsummaryrowComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGridsummaryrowComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGridsummaryrowComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var treeMetaData = /** @class */ (function () {
        function treeMetaData() {
        }
        treeMetaData.XTYPE = 'tree';
        treeMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'columnLines',
            'columnMenu',
            'columnResize',
            'columns',
            'columnsMenuItem',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expanderFirst',
            'expanderOnly',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'folderSort',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'hideScrollbar',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'multiColumnSort',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'rowNumbers',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selectOnExpander',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'singleExpand',
            'sortable',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'title',
            'titleBar',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useSimpleItems',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treeMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tree,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeload', parameters: 'store,operation' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforenodecollapse', parameters: 'node,record' },
            { name: 'beforenodeexpand', parameters: 'row,record' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'tree,location' },
            { name: 'childlongpress', parameters: 'tree,location' },
            { name: 'childmouseenter', parameters: 'tree,location' },
            { name: 'childmouseleave', parameters: 'tree,location' },
            { name: 'childsingletap', parameters: 'tree,location' },
            { name: 'childtap', parameters: 'tree,location' },
            { name: 'childtaphold', parameters: 'tree,location' },
            { name: 'childtouchcancel', parameters: 'tree,location' },
            { name: 'childtouchend', parameters: 'tree,location' },
            { name: 'childtouchmove', parameters: 'tree,location' },
            { name: 'childtouchstart', parameters: 'tree,location' },
            { name: 'columnadd', parameters: 'tree,column,index' },
            { name: 'columnhide', parameters: 'tree,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'tree,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'tree,column' },
            { name: 'columnresize', parameters: 'tree,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'tree,column' },
            { name: 'columnsort', parameters: 'tree,column,direction' },
            { name: 'deactivate', parameters: 'oldActiveItem,tree,newActiveItem' },
            { name: 'deselect', parameters: 'tree,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tree,event' },
            { name: 'focusenter', parameters: 'tree,event' },
            { name: 'focusleave', parameters: 'tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'tree,index,record,action' },
            { name: 'itemdoubletap', parameters: 'tree,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'tree,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'tree,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'tree,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'tree,index,target,record,e' },
            { name: 'itemswipe', parameters: 'tree,index,target,record,e' },
            { name: 'itemtap', parameters: 'tree,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'tree,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'tree,records,successful,operation,node' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'tree,to,from' },
            { name: 'nodecollapse', parameters: 'node,record' },
            { name: 'nodeexpand', parameters: 'row,record' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'tree' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tree,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'tree,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treeMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforeload',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforenodecollapse',
            'beforenodeexpand',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionextend',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cellselection',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'columnadd',
            'columnhide',
            'columnmenucreated',
            'columnmove',
            'columnremove',
            'columnresize',
            'columnselection',
            'columnshow',
            'columnsort',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'nodecollapse',
            'nodeexpand',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionextenderdrag',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return treeMetaData;
    }());
    var ExtTreeComponent = /** @class */ (function (_super) {
        __extends(ExtTreeComponent, _super);
        function ExtTreeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTreeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(treeMetaData);
            };
        /**
         * @return {?}
         */
        ExtTreeComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTreeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tree',
                        inputs: treeMetaData.PROPERTIES,
                        outputs: treeMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTreeComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTreeComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTreeComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var imageMetaData = /** @class */ (function () {
        function imageMetaData() {
        }
        imageMetaData.XTYPE = 'image';
        imageMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'backgroundCls',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'imageCls',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'src',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        imageMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'image' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'image,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'error', parameters: 'image,e' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'image,event' },
            { name: 'focusenter', parameters: 'image,event' },
            { name: 'focusleave', parameters: 'image,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'image,e' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'image,e' },
            { name: 'tofront', parameters: 'image' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        imageMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'error',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return imageMetaData;
    }());
    var ExtImageComponent = /** @class */ (function (_super) {
        __extends(ExtImageComponent, _super);
        function ExtImageComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, imageMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtImageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(imageMetaData);
            };
        /**
         * @return {?}
         */
        ExtImageComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtImageComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'image',
                        inputs: imageMetaData.PROPERTIES,
                        outputs: imageMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtImageComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtImageComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtImageComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var imgMetaData = /** @class */ (function () {
        function imgMetaData() {
        }
        imgMetaData.XTYPE = 'img';
        imgMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'backgroundCls',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'imageCls',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'src',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        imgMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'image' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'image,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'error', parameters: 'image,e' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'image,event' },
            { name: 'focusenter', parameters: 'image,event' },
            { name: 'focusleave', parameters: 'image,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'image,e' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'image,e' },
            { name: 'tofront', parameters: 'image' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        imgMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'error',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'load',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return imgMetaData;
    }());
    var ExtImgComponent = /** @class */ (function (_super) {
        __extends(ExtImgComponent, _super);
        function ExtImgComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, imgMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtImgComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(imgMetaData);
            };
        /**
         * @return {?}
         */
        ExtImgComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtImgComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'img',
                        inputs: imgMetaData.PROPERTIES,
                        outputs: imgMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtImgComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtImgComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtImgComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var indicatorMetaData = /** @class */ (function () {
        function indicatorMetaData() {
        }
        indicatorMetaData.XTYPE = 'indicator';
        indicatorMetaData.PROPERTIES = [
            'activeIndex',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'count',
            'data',
            'defaultListenerScope',
            'direction',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tapMode',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        indicatorMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'indicator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'indicator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'indicator,event' },
            { name: 'focusenter', parameters: 'indicator,event' },
            { name: 'focusleave', parameters: 'indicator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'indicatortap', parameters: 'indicator,index,item' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'next', parameters: 'indicator' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'previous', parameters: 'indicator' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'indicator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        indicatorMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'indicatortap',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'next',
            'orientationchange',
            'painted',
            'positionedchange',
            'previous',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return indicatorMetaData;
    }());
    var ExtIndicatorComponent = /** @class */ (function (_super) {
        __extends(ExtIndicatorComponent, _super);
        function ExtIndicatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, indicatorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtIndicatorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(indicatorMetaData);
            };
        /**
         * @return {?}
         */
        ExtIndicatorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtIndicatorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'indicator',
                        inputs: indicatorMetaData.PROPERTIES,
                        outputs: indicatorMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtIndicatorComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtIndicatorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtIndicatorComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var labelMetaData = /** @class */ (function () {
        function labelMetaData() {
        }
        labelMetaData.XTYPE = 'label';
        labelMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        labelMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'label' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'label,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'label,event' },
            { name: 'focusenter', parameters: 'label,event' },
            { name: 'focusleave', parameters: 'label,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'label' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        labelMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return labelMetaData;
    }());
    var ExtLabelComponent = /** @class */ (function (_super) {
        __extends(ExtLabelComponent, _super);
        function ExtLabelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, labelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtLabelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(labelMetaData);
            };
        /**
         * @return {?}
         */
        ExtLabelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtLabelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'label',
                        inputs: labelMetaData.PROPERTIES,
                        outputs: labelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtLabelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtLabelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtLabelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var treelistMetaData = /** @class */ (function () {
        function treelistMetaData() {
        }
        treelistMetaData.XTYPE = 'treelist';
        treelistMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'defaults',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expanderFirst',
            'expanderOnly',
            'flex',
            'floated',
            'floatLeafItems',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightPath',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'itemRipple',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'micro',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selection',
            'selectOnExpander',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'singleExpand',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treelistMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'treelist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treelist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'treelist,event' },
            { name: 'focusenter', parameters: 'treelist,event' },
            { name: 'focusleave', parameters: 'treelist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'sender,info' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'selectionchange', parameters: 'treelist,record' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'treelist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treelistMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemclick',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'selectionchange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return treelistMetaData;
    }());
    var ExtTreelistComponent = /** @class */ (function (_super) {
        __extends(ExtTreelistComponent, _super);
        function ExtTreelistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treelistMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTreelistComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(treelistMetaData);
            };
        /**
         * @return {?}
         */
        ExtTreelistComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTreelistComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'treelist',
                        inputs: treelistMetaData.PROPERTIES,
                        outputs: treelistMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTreelistComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTreelistComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTreelistComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var treelistitemMetaData = /** @class */ (function () {
        function treelistitemMetaData() {
        }
        treelistitemMetaData.XTYPE = 'treelistitem';
        treelistitemMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'expandable',
            'expanded',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'iconCls',
            'iconClsProperty',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'leaf',
            'listeners',
            'loading',
            'name',
            'nameable',
            'node',
            'over',
            'owner',
            'parentItem',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'rowCls',
            'rowClsProperty',
            'selected',
            'selectedParent',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'text',
            'textProperty',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        treelistitemMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'treelistitem' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treelistitem,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'treelistitem,event' },
            { name: 'focusenter', parameters: 'treelistitem,event' },
            { name: 'focusleave', parameters: 'treelistitem,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'treelistitem' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        treelistitemMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return treelistitemMetaData;
    }());
    var ExtTreelistitemComponent = /** @class */ (function (_super) {
        __extends(ExtTreelistitemComponent, _super);
        function ExtTreelistitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, treelistitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTreelistitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(treelistitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtTreelistitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTreelistitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'treelistitem',
                        inputs: treelistitemMetaData.PROPERTIES,
                        outputs: treelistitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTreelistitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTreelistitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTreelistitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var loadmaskMetaData = /** @class */ (function () {
        function loadmaskMetaData() {
        }
        loadmaskMetaData.XTYPE = 'loadmask';
        loadmaskMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'indicator',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'message',
            'messageCls',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'transparent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        loadmaskMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'loadmask' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'loadmask,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'loadmask,event' },
            { name: 'focusenter', parameters: 'loadmask,event' },
            { name: 'focusleave', parameters: 'loadmask,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'loadmask,e' },
            { name: 'tofront', parameters: 'loadmask' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        loadmaskMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return loadmaskMetaData;
    }());
    var ExtLoadmaskComponent = /** @class */ (function (_super) {
        __extends(ExtLoadmaskComponent, _super);
        function ExtLoadmaskComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, loadmaskMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtLoadmaskComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(loadmaskMetaData);
            };
        /**
         * @return {?}
         */
        ExtLoadmaskComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtLoadmaskComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'loadmask',
                        inputs: loadmaskMetaData.PROPERTIES,
                        outputs: loadmaskMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtLoadmaskComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtLoadmaskComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtLoadmaskComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var maskMetaData = /** @class */ (function () {
        function maskMetaData() {
        }
        maskMetaData.XTYPE = 'mask';
        maskMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'transparent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        maskMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'mask' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'mask,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'mask,event' },
            { name: 'focusenter', parameters: 'mask,event' },
            { name: 'focusleave', parameters: 'mask,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'mask,e' },
            { name: 'tofront', parameters: 'mask' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        maskMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return maskMetaData;
    }());
    var ExtMaskComponent = /** @class */ (function (_super) {
        __extends(ExtMaskComponent, _super);
        function ExtMaskComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, maskMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMaskComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(maskMetaData);
            };
        /**
         * @return {?}
         */
        ExtMaskComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMaskComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'mask',
                        inputs: maskMetaData.PROPERTIES,
                        outputs: maskMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMaskComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMaskComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMaskComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var mediaMetaData = /** @class */ (function () {
        function mediaMetaData() {
        }
        mediaMetaData.XTYPE = 'media';
        mediaMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoPause',
            'autoResume',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'controls',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableControls',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'loop',
            'margin',
            'maxHeight',
            'maxWidth',
            'media',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'muted',
            'name',
            'nameable',
            'padding',
            'plugins',
            'preload',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'volume',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        mediaMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'media' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'media,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'media,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'media,event' },
            { name: 'focusenter', parameters: 'media,event' },
            { name: 'focusleave', parameters: 'media,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'media,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'media,time' },
            { name: 'play', parameters: 'media' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'media' },
            { name: 'timeupdate', parameters: 'media,time' },
            { name: 'tofront', parameters: 'media' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'media,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        mediaMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'ended',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'mutedchange',
            'orientationchange',
            'painted',
            'pause',
            'play',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'stop',
            'timeupdate',
            'tofront',
            'topchange',
            'updatedata',
            'volumechange',
            'widthchange',
            'ready'
        ];
        return mediaMetaData;
    }());
    var ExtMediaComponent = /** @class */ (function (_super) {
        __extends(ExtMediaComponent, _super);
        function ExtMediaComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, mediaMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMediaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(mediaMetaData);
            };
        /**
         * @return {?}
         */
        ExtMediaComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMediaComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'media',
                        inputs: mediaMetaData.PROPERTIES,
                        outputs: mediaMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMediaComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMediaComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMediaComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var menucheckitemMetaData = /** @class */ (function () {
        function menucheckitemMetaData() {
        }
        menucheckitemMetaData.XTYPE = 'menucheckitem';
        menucheckitemMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menucheckitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'menucheckitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menucheckitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menucheckitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'menucheckitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menucheckitem,event' },
            { name: 'focusenter', parameters: 'menucheckitem,event' },
            { name: 'focusleave', parameters: 'menucheckitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menucheckitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menucheckitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menucheckitemMetaData;
    }());
    var ExtMenucheckitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenucheckitemComponent, _super);
        function ExtMenucheckitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menucheckitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMenucheckitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(menucheckitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtMenucheckitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMenucheckitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'menucheckitem',
                        inputs: menucheckitemMetaData.PROPERTIES,
                        outputs: menucheckitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMenucheckitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMenucheckitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMenucheckitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var menuitemMetaData = /** @class */ (function () {
        function menuitemMetaData() {
        }
        menuitemMetaData.XTYPE = 'menuitem';
        menuitemMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuitem,event' },
            { name: 'focusenter', parameters: 'menuitem,event' },
            { name: 'focusleave', parameters: 'menuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuitemMetaData;
    }());
    var ExtMenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenuitemComponent, _super);
        function ExtMenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMenuitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(menuitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtMenuitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMenuitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'menuitem',
                        inputs: menuitemMetaData.PROPERTIES,
                        outputs: menuitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMenuitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMenuitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMenuitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var menuMetaData = /** @class */ (function () {
        function menuMetaData() {
        }
        menuMetaData.XTYPE = 'menu';
        menuMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'allowOtherMenus',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoHide',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'groups',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'ignoreParentClicks',
            'inactiveChildTabIndex',
            'indented',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'mouseLeaveDelay',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,menu,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'menu,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'menu' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'menu' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'menu,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menu' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menu,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'menu' },
            { name: 'deactivate', parameters: 'oldActiveItem,menu,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'menu' },
            { name: 'drawershow', parameters: 'menu' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'menu' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menu,event' },
            { name: 'focusenter', parameters: 'menu,event' },
            { name: 'focusleave', parameters: 'menu,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupchange', parameters: 'menu,groupName,newValue,oldValue' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'menu,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'menu,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'menu,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'menu,context' },
            { name: 'resizedragcancel', parameters: 'menu,context' },
            { name: 'resizedragend', parameters: 'menu,context' },
            { name: 'resizedragstart', parameters: 'menu,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menu' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'groupchange',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuMetaData;
    }());
    var ExtMenuComponent = /** @class */ (function (_super) {
        __extends(ExtMenuComponent, _super);
        function ExtMenuComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMenuComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(menuMetaData);
            };
        /**
         * @return {?}
         */
        ExtMenuComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMenuComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'menu',
                        inputs: menuMetaData.PROPERTIES,
                        outputs: menuMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMenuComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMenuComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMenuComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var menuradioitemMetaData = /** @class */ (function () {
        function menuradioitemMetaData() {
        }
        menuradioitemMetaData.XTYPE = 'menuradioitem';
        menuradioitemMetaData.PROPERTIES = [
            'allowUncheck',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'clickHideDelay',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'group',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnClick',
            'hideOnMaskTap',
            'href',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'indented',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'separator',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submenuText',
            'tabIndex',
            'target',
            'text',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuradioitemMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'menuradioitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuradioitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuradioitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'menuradioitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuradioitem,event' },
            { name: 'focusenter', parameters: 'menuradioitem,event' },
            { name: 'focusleave', parameters: 'menuradioitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuradioitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuradioitemMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecheckchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'checkchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuradioitemMetaData;
    }());
    var ExtMenuradioitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenuradioitemComponent, _super);
        function ExtMenuradioitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuradioitemMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMenuradioitemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(menuradioitemMetaData);
            };
        /**
         * @return {?}
         */
        ExtMenuradioitemComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMenuradioitemComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'menuradioitem',
                        inputs: menuradioitemMetaData.PROPERTIES,
                        outputs: menuradioitemMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMenuradioitemComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMenuradioitemComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMenuradioitemComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var menuseparatorMetaData = /** @class */ (function () {
        function menuseparatorMetaData() {
        }
        menuseparatorMetaData.XTYPE = 'menuseparator';
        menuseparatorMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        menuseparatorMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuseparator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuseparator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuseparator,event' },
            { name: 'focusenter', parameters: 'menuseparator,event' },
            { name: 'focusleave', parameters: 'menuseparator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuseparator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        menuseparatorMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return menuseparatorMetaData;
    }());
    var ExtMenuseparatorComponent = /** @class */ (function (_super) {
        __extends(ExtMenuseparatorComponent, _super);
        function ExtMenuseparatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, menuseparatorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMenuseparatorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(menuseparatorMetaData);
            };
        /**
         * @return {?}
         */
        ExtMenuseparatorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMenuseparatorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'menuseparator',
                        inputs: menuseparatorMetaData.PROPERTIES,
                        outputs: menuseparatorMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMenuseparatorComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMenuseparatorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMenuseparatorComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var messageboxMetaData = /** @class */ (function () {
        function messageboxMetaData() {
        }
        messageboxMetaData.XTYPE = 'messagebox';
        messageboxMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'constrainDrag',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultTextHeight',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'dismissAction',
            'dismissHandler',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maskTapHandler',
            'maxHeight',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'maxWidth',
            'message',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'msg',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'prompt',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        messageboxMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,messagebox,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'messagebox,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'messagebox' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'messagebox' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'messagebox,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'messagebox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'messagebox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'messagebox' },
            { name: 'deactivate', parameters: 'oldActiveItem,messagebox,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'messagebox' },
            { name: 'drawershow', parameters: 'messagebox' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'messagebox' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'messagebox,event' },
            { name: 'focusenter', parameters: 'messagebox,event' },
            { name: 'focusleave', parameters: 'messagebox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'messagebox,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'messagebox,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'messagebox,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'messagebox,context' },
            { name: 'resizedragcancel', parameters: 'messagebox,context' },
            { name: 'resizedragend', parameters: 'messagebox,context' },
            { name: 'resizedragstart', parameters: 'messagebox,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'messagebox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        messageboxMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaximize',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerestore',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'restore',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return messageboxMetaData;
    }());
    var ExtMessageboxComponent = /** @class */ (function (_super) {
        __extends(ExtMessageboxComponent, _super);
        function ExtMessageboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, messageboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMessageboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(messageboxMetaData);
            };
        /**
         * @return {?}
         */
        ExtMessageboxComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMessageboxComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'messagebox',
                        inputs: messageboxMetaData.PROPERTIES,
                        outputs: messageboxMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMessageboxComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMessageboxComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMessageboxComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var navigationviewMetaData = /** @class */ (function () {
        function navigationviewMetaData() {
        }
        navigationviewMetaData.XTYPE = 'navigationview';
        navigationviewMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultBackButtonText',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'navigationBar',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitleForBackButtonText',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        navigationviewMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,navigationview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'navigationview,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'back', parameters: 'navigationview' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'navigationview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'navigationview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,navigationview,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'navigationview,event' },
            { name: 'focusenter', parameters: 'navigationview,event' },
            { name: 'focusleave', parameters: 'navigationview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'navigationview,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pop', parameters: 'navigationview,view' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'push', parameters: 'navigationview,view' },
            { name: 'remove', parameters: 'navigationview,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'navigationview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'navigationview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        navigationviewMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'back',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pop',
            'positionedchange',
            'push',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return navigationviewMetaData;
    }());
    var ExtNavigationviewComponent = /** @class */ (function (_super) {
        __extends(ExtNavigationviewComponent, _super);
        function ExtNavigationviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, navigationviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtNavigationviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(navigationviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtNavigationviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtNavigationviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'navigationview',
                        inputs: navigationviewMetaData.PROPERTIES,
                        outputs: navigationviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtNavigationviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtNavigationviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtNavigationviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var panelMetaData = /** @class */ (function () {
        function panelMetaData() {
        }
        panelMetaData.XTYPE = 'panel';
        panelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        panelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,panel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'panel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'panel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'panel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'panel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'panel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'panel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'panel' },
            { name: 'deactivate', parameters: 'oldActiveItem,panel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'panel' },
            { name: 'drawershow', parameters: 'panel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'panel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'panel,event' },
            { name: 'focusenter', parameters: 'panel,event' },
            { name: 'focusleave', parameters: 'panel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'panel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'panel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'panel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'panel,context' },
            { name: 'resizedragcancel', parameters: 'panel,context' },
            { name: 'resizedragend', parameters: 'panel,context' },
            { name: 'resizedragstart', parameters: 'panel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'panel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        panelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return panelMetaData;
    }());
    var ExtPanelComponent = /** @class */ (function (_super) {
        __extends(ExtPanelComponent, _super);
        function ExtPanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, panelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(panelMetaData);
            };
        /**
         * @return {?}
         */
        ExtPanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'panel',
                        inputs: panelMetaData.PROPERTIES,
                        outputs: panelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPanelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPanelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datepanelMetaData = /** @class */ (function () {
        function datepanelMetaData() {
        }
        datepanelMetaData.XTYPE = 'datepanel';
        datepanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoConfirm',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'captionFormat',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dateCellFormat',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'disabledDates',
            'disabledDays',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusableDate',
            'focusCls',
            'format',
            'fullscreen',
            'handler',
            'header',
            'headerFormat',
            'headerLength',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideCaptions',
            'hideMode',
            'hideOnMaskTap',
            'hideOutside',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxDate',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minDate',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'navigationPosition',
            'nextText',
            'padding',
            'panes',
            'plugins',
            'prevText',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selectOnNavigate',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAfterMaxDate',
            'showAnimation',
            'showBeforeMinDate',
            'showFooter',
            'showTodayButton',
            'specialDates',
            'specialDays',
            'splitTitle',
            'standardButtons',
            'startDay',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'titleAnimation',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transformCellCls',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weekendDays',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'yearPicker',
            'yearPickerDefaults',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datepanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datepanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'datepanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'datepanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'datepanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'datepanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,datepanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'datepanel' },
            { name: 'drawershow', parameters: 'datepanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'datepanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepanel,event' },
            { name: 'focusenter', parameters: 'datepanel,event' },
            { name: 'focusleave', parameters: 'datepanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datepanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datepanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datepanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'datepanel,context' },
            { name: 'resizedragcancel', parameters: 'datepanel,context' },
            { name: 'resizedragend', parameters: 'datepanel,context' },
            { name: 'resizedragstart', parameters: 'datepanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepanelMetaData;
    }());
    var ExtDatepanelComponent = /** @class */ (function (_super) {
        __extends(ExtDatepanelComponent, _super);
        function ExtDatepanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatepanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datepanelMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatepanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatepanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datepanel',
                        inputs: datepanelMetaData.PROPERTIES,
                        outputs: datepanelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatepanelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatepanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatepanelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datetitleMetaData = /** @class */ (function () {
        function datetitleMetaData() {
        }
        datetitleMetaData.XTYPE = 'datetitle';
        datetitleMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'glyph',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'rotateIcon',
            'rotation',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datetitleMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datetitle' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datetitle,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datetitle,event' },
            { name: 'focusenter', parameters: 'datetitle,event' },
            { name: 'focusleave', parameters: 'datetitle,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datetitle' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datetitleMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datetitleMetaData;
    }());
    var ExtDatetitleComponent = /** @class */ (function (_super) {
        __extends(ExtDatetitleComponent, _super);
        function ExtDatetitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datetitleMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatetitleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datetitleMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatetitleComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatetitleComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datetitle',
                        inputs: datetitleMetaData.PROPERTIES,
                        outputs: datetitleMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatetitleComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatetitleComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatetitleComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var panelheaderMetaData = /** @class */ (function () {
        function panelheaderMetaData() {
        }
        panelheaderMetaData.XTYPE = 'panelheader';
        panelheaderMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'glyph',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'position',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'titleAlign',
            'titleRotation',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        panelheaderMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,panelheader,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'panelheader,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'panelheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'panelheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,panelheader,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'panelheader,event' },
            { name: 'focusenter', parameters: 'panelheader,event' },
            { name: 'focusleave', parameters: 'panelheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'panelheader,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'panelheader,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'panelheader,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'panelheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        panelheaderMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return panelheaderMetaData;
    }());
    var ExtPanelheaderComponent = /** @class */ (function (_super) {
        __extends(ExtPanelheaderComponent, _super);
        function ExtPanelheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, panelheaderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPanelheaderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(panelheaderMetaData);
            };
        /**
         * @return {?}
         */
        ExtPanelheaderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPanelheaderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'panelheader',
                        inputs: panelheaderMetaData.PROPERTIES,
                        outputs: panelheaderMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPanelheaderComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPanelheaderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPanelheaderComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var timepanelMetaData = /** @class */ (function () {
        function timepanelMetaData() {
        }
        timepanelMetaData.XTYPE = 'timepanel';
        timepanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoAdvance',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'confirmable',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'declineHandler',
            'defaultButtons',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'handler',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'mode',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'vertical',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        timepanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,timepanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'timepanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'timepanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'timepanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'timepanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'timepanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timepanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'timepanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,timepanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'timepanel' },
            { name: 'drawershow', parameters: 'timepanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'timepanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'timepanel,event' },
            { name: 'focusenter', parameters: 'timepanel,event' },
            { name: 'focusleave', parameters: 'timepanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'timepanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'timepanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'timepanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'timepanel,context' },
            { name: 'resizedragcancel', parameters: 'timepanel,context' },
            { name: 'resizedragend', parameters: 'timepanel,context' },
            { name: 'resizedragstart', parameters: 'timepanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'timepanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        timepanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return timepanelMetaData;
    }());
    var ExtTimepanelComponent = /** @class */ (function (_super) {
        __extends(ExtTimepanelComponent, _super);
        function ExtTimepanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, timepanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTimepanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(timepanelMetaData);
            };
        /**
         * @return {?}
         */
        ExtTimepanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTimepanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'timepanel',
                        inputs: timepanelMetaData.PROPERTIES,
                        outputs: timepanelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTimepanelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTimepanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTimepanelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var paneltitleMetaData = /** @class */ (function () {
        function paneltitleMetaData() {
        }
        paneltitleMetaData.XTYPE = 'paneltitle';
        paneltitleMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'glyph',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'rotateIcon',
            'rotation',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        paneltitleMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'paneltitle' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'paneltitle,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'paneltitle,event' },
            { name: 'focusenter', parameters: 'paneltitle,event' },
            { name: 'focusleave', parameters: 'paneltitle,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'paneltitle' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        paneltitleMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return paneltitleMetaData;
    }());
    var ExtPaneltitleComponent = /** @class */ (function (_super) {
        __extends(ExtPaneltitleComponent, _super);
        function ExtPaneltitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, paneltitleMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPaneltitleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(paneltitleMetaData);
            };
        /**
         * @return {?}
         */
        ExtPaneltitleComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPaneltitleComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'paneltitle',
                        inputs: paneltitleMetaData.PROPERTIES,
                        outputs: paneltitleMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPaneltitleComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPaneltitleComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPaneltitleComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var yearpickerMetaData = /** @class */ (function () {
        function yearpickerMetaData() {
        }
        yearpickerMetaData.XTYPE = 'yearpicker';
        yearpickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useSimpleItems',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        yearpickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,yearpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'yearpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'yearpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'yearpicker,location' },
            { name: 'childlongpress', parameters: 'yearpicker,location' },
            { name: 'childmouseenter', parameters: 'yearpicker,location' },
            { name: 'childmouseleave', parameters: 'yearpicker,location' },
            { name: 'childsingletap', parameters: 'yearpicker,location' },
            { name: 'childtap', parameters: 'yearpicker,location' },
            { name: 'childtaphold', parameters: 'yearpicker,location' },
            { name: 'childtouchcancel', parameters: 'yearpicker,location' },
            { name: 'childtouchend', parameters: 'yearpicker,location' },
            { name: 'childtouchmove', parameters: 'yearpicker,location' },
            { name: 'childtouchstart', parameters: 'yearpicker,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,yearpicker,newActiveItem' },
            { name: 'deselect', parameters: 'yearpicker,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'yearpicker,event' },
            { name: 'focusenter', parameters: 'yearpicker,event' },
            { name: 'focusleave', parameters: 'yearpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'yearpicker,index,record,action' },
            { name: 'itemdoubletap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemswipe', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'yearpicker,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'yearpicker,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'yearpicker' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'yearpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'yearpicker,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'yearpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        yearpickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return yearpickerMetaData;
    }());
    var ExtYearpickerComponent = /** @class */ (function (_super) {
        __extends(ExtYearpickerComponent, _super);
        function ExtYearpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, yearpickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtYearpickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(yearpickerMetaData);
            };
        /**
         * @return {?}
         */
        ExtYearpickerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtYearpickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'yearpicker',
                        inputs: yearpickerMetaData.PROPERTIES,
                        outputs: yearpickerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtYearpickerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtYearpickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtYearpickerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var datepickerMetaData = /** @class */ (function () {
        function datepickerMetaData() {
        }
        datepickerMetaData.XTYPE = 'datepicker';
        datepickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'dayText',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'doneButton',
            'draggable',
            'enter',
            'enterAnimation',
            'eventHandlers',
            'exit',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'monthText',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'slotOrder',
            'slots',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolbar',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitles',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'yearFrom',
            'yearText',
            'yearTo',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        datepickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datepicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datepicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'datepicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'datepicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'datepicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'datepicker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datepicker,value' },
            { name: 'collapse', parameters: 'datepicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,datepicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'datepicker' },
            { name: 'drawershow', parameters: 'datepicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'datepicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepicker,event' },
            { name: 'focusenter', parameters: 'datepicker,event' },
            { name: 'focusleave', parameters: 'datepicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datepicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'datepicker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datepicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datepicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'datepicker,context' },
            { name: 'resizedragcancel', parameters: 'datepicker,context' },
            { name: 'resizedragend', parameters: 'datepicker,context' },
            { name: 'resizedragstart', parameters: 'datepicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        datepickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'change',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pick',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return datepickerMetaData;
    }());
    var ExtDatepickerComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickerComponent, _super);
        function ExtDatepickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, datepickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtDatepickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(datepickerMetaData);
            };
        /**
         * @return {?}
         */
        ExtDatepickerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtDatepickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'datepicker',
                        inputs: datepickerMetaData.PROPERTIES,
                        outputs: datepickerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtDatepickerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtDatepickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtDatepickerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pickerMetaData = /** @class */ (function () {
        function pickerMetaData() {
        }
        pickerMetaData.XTYPE = 'picker';
        pickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'doneButton',
            'draggable',
            'enter',
            'enterAnimation',
            'eventHandlers',
            'exit',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'slots',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolbar',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitles',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,picker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'picker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'picker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'picker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'picker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'picker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'picker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'picker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'picker,values' },
            { name: 'collapse', parameters: 'picker' },
            { name: 'deactivate', parameters: 'oldActiveItem,picker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'picker' },
            { name: 'drawershow', parameters: 'picker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'picker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'picker,event' },
            { name: 'focusenter', parameters: 'picker,event' },
            { name: 'focusleave', parameters: 'picker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'picker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'picker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'picker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'picker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'picker,context' },
            { name: 'resizedragcancel', parameters: 'picker,context' },
            { name: 'resizedragend', parameters: 'picker,context' },
            { name: 'resizedragstart', parameters: 'picker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'picker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'change',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pick',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pickerMetaData;
    }());
    var ExtPickerComponent = /** @class */ (function (_super) {
        __extends(ExtPickerComponent, _super);
        function ExtPickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pickerMetaData);
            };
        /**
         * @return {?}
         */
        ExtPickerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'picker',
                        inputs: pickerMetaData.PROPERTIES,
                        outputs: pickerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPickerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPickerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var selectpickerMetaData = /** @class */ (function () {
        function selectpickerMetaData() {
        }
        selectpickerMetaData.XTYPE = 'selectpicker';
        selectpickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cancelButton',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'doneButton',
            'draggable',
            'enter',
            'enterAnimation',
            'eventHandlers',
            'exit',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'slots',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolbar',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useTitles',
            'value',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        selectpickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,selectpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'selectpicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'selectpicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'selectpicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'selectpicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'selectpicker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'selectpicker,values' },
            { name: 'collapse', parameters: 'selectpicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,selectpicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'selectpicker' },
            { name: 'drawershow', parameters: 'selectpicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'selectpicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectpicker,event' },
            { name: 'focusenter', parameters: 'selectpicker,event' },
            { name: 'focusleave', parameters: 'selectpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'selectpicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'selectpicker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'selectpicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'selectpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'selectpicker,context' },
            { name: 'resizedragcancel', parameters: 'selectpicker,context' },
            { name: 'resizedragend', parameters: 'selectpicker,context' },
            { name: 'resizedragstart', parameters: 'selectpicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        selectpickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cancel',
            'centeredchange',
            'change',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'pick',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return selectpickerMetaData;
    }());
    var ExtSelectpickerComponent = /** @class */ (function (_super) {
        __extends(ExtSelectpickerComponent, _super);
        function ExtSelectpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, selectpickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSelectpickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(selectpickerMetaData);
            };
        /**
         * @return {?}
         */
        ExtSelectpickerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSelectpickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'selectpicker',
                        inputs: selectpickerMetaData.PROPERTIES,
                        outputs: selectpickerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSelectpickerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSelectpickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSelectpickerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pickerslotMetaData = /** @class */ (function () {
        function pickerslotMetaData() {
        }
        pickerslotMetaData.XTYPE = 'pickerslot';
        pickerslotMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'displayed',
            'displayField',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'inline',
            'innerCls',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemId',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'lastSelected',
            'layout',
            'left',
            'listeners',
            'loadingHeight',
            'loadingText',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selected',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showTitle',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueField',
            'verticallyCenterItems',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pickerslotMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pickerslot,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pickerslot' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pickerslot,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'pickerslot,location' },
            { name: 'childlongpress', parameters: 'pickerslot,location' },
            { name: 'childmouseenter', parameters: 'pickerslot,location' },
            { name: 'childmouseleave', parameters: 'pickerslot,location' },
            { name: 'childsingletap', parameters: 'pickerslot,location' },
            { name: 'childtap', parameters: 'pickerslot,location' },
            { name: 'childtaphold', parameters: 'pickerslot,location' },
            { name: 'childtouchcancel', parameters: 'pickerslot,location' },
            { name: 'childtouchend', parameters: 'pickerslot,location' },
            { name: 'childtouchmove', parameters: 'pickerslot,location' },
            { name: 'childtouchstart', parameters: 'pickerslot,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,pickerslot,newActiveItem' },
            { name: 'deselect', parameters: 'pickerslot,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pickerslot,event' },
            { name: 'focusenter', parameters: 'pickerslot,event' },
            { name: 'focusleave', parameters: 'pickerslot,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemswipe', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'pickerslot,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'pickerslot,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'pickerslot' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pickerslot,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'pickerslot,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'slotpick', parameters: 'pickerslot,value,node' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pickerslot' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pickerslotMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'rowselection',
            'scrollablechange',
            'select',
            'selectionchange',
            'show',
            'slotpick',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pickerslotMetaData;
    }());
    var ExtPickerslotComponent = /** @class */ (function (_super) {
        __extends(ExtPickerslotComponent, _super);
        function ExtPickerslotComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pickerslotMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPickerslotComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pickerslotMetaData);
            };
        /**
         * @return {?}
         */
        ExtPickerslotComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPickerslotComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pickerslot',
                        inputs: pickerslotMetaData.PROPERTIES,
                        outputs: pickerslotMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPickerslotComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPickerslotComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPickerslotComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var tabletpickerMetaData = /** @class */ (function () {
        function tabletpickerMetaData() {
        }
        tabletpickerMetaData.XTYPE = 'tabletpicker';
        tabletpickerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabletpickerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabletpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabletpicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'tabletpicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'tabletpicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'tabletpicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabletpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabletpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'tabletpicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabletpicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'tabletpicker' },
            { name: 'drawershow', parameters: 'tabletpicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'tabletpicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabletpicker,event' },
            { name: 'focusenter', parameters: 'tabletpicker,event' },
            { name: 'focusleave', parameters: 'tabletpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabletpicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabletpicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabletpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'tabletpicker,context' },
            { name: 'resizedragcancel', parameters: 'tabletpicker,context' },
            { name: 'resizedragend', parameters: 'tabletpicker,context' },
            { name: 'resizedragstart', parameters: 'tabletpicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tabletpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabletpickerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabletpickerMetaData;
    }());
    var ExtTabletpickerComponent = /** @class */ (function (_super) {
        __extends(ExtTabletpickerComponent, _super);
        function ExtTabletpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabletpickerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTabletpickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(tabletpickerMetaData);
            };
        /**
         * @return {?}
         */
        ExtTabletpickerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTabletpickerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tabletpicker',
                        inputs: tabletpickerMetaData.PROPERTIES,
                        outputs: tabletpickerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTabletpickerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTabletpickerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTabletpickerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotgridcellMetaData = /** @class */ (function () {
        function pivotgridcellMetaData() {
        }
        pivotgridcellMetaData.XTYPE = 'pivotgridcell';
        pivotgridcellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgridcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'pivotgridcell,event' },
            { name: 'focusenter', parameters: 'pivotgridcell,event' },
            { name: 'focusleave', parameters: 'pivotgridcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgridcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return pivotgridcellMetaData;
    }());
    var ExtPivotgridcellComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridcellComponent, _super);
        function ExtPivotgridcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotgridcellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotgridcellMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotgridcellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotgridcellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotgridcell',
                        inputs: pivotgridcellMetaData.PROPERTIES,
                        outputs: pivotgridcellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotgridcellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotgridcellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotgridcellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotgridgroupcellMetaData = /** @class */ (function () {
        function pivotgridgroupcellMetaData() {
        }
        pivotgridgroupcellMetaData.XTYPE = 'pivotgridgroupcell';
        pivotgridgroupcellMetaData.PROPERTIES = [
            'align',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'bodyCls',
            'bodyStyle',
            'border',
            'cellCls',
            'cls',
            'column',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'defaultToolWeights',
            'disabled',
            'encodeHtml',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'formatter',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'rawValue',
            'record',
            'reference',
            'relative',
            'renderer',
            'renderTo',
            'ripple',
            'scope',
            'selectable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'touchAction',
            'tpl',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'value',
            'viewModel',
            'width',
            'x',
            'y',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridgroupcellMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgridgroupcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridgroupcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'pivotgridgroupcell,event' },
            { name: 'focusenter', parameters: 'pivotgridgroupcell,event' },
            { name: 'focusleave', parameters: 'pivotgridgroupcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgridgroupcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridgroupcellMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return pivotgridgroupcellMetaData;
    }());
    var ExtPivotgridgroupcellComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridgroupcellComponent, _super);
        function ExtPivotgridgroupcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridgroupcellMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotgridgroupcellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotgridgroupcellMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotgridgroupcellComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotgridgroupcellComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotgridgroupcell',
                        inputs: pivotgridgroupcellMetaData.PROPERTIES,
                        outputs: pivotgridgroupcellMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotgridgroupcellComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotgridgroupcellComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotgridgroupcellComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotd3containerMetaData = /** @class */ (function () {
        function pivotd3containerMetaData() {
        }
        pivotd3containerMetaData.XTYPE = 'pivotd3container';
        pivotd3containerMetaData.PROPERTIES = [
            'configurator',
            'drawing',
            'matrix',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotd3containerMetaData.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        pivotd3containerMetaData.EVENTNAMES = [
            'ready'
        ];
        return pivotd3containerMetaData;
    }());
    var ExtPivotd3containerComponent = /** @class */ (function (_super) {
        __extends(ExtPivotd3containerComponent, _super);
        function ExtPivotd3containerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotd3containerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotd3containerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotd3containerMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotd3containerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotd3containerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotd3container',
                        inputs: pivotd3containerMetaData.PROPERTIES,
                        outputs: pivotd3containerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotd3containerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotd3containerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotd3containerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotheatmapMetaData = /** @class */ (function () {
        function pivotheatmapMetaData() {
        }
        pivotheatmapMetaData.XTYPE = 'pivotheatmap';
        pivotheatmapMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultFormatter',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'labels',
            'left',
            'legend',
            'listeners',
            'margin',
            'matrix',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiles',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xAxis',
            'xtype',
            'y',
            'yAxis',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotheatmapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotheatmap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotheatmap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotheatmap,event' },
            { name: 'focusenter', parameters: 'pivotheatmap,event' },
            { name: 'focusleave', parameters: 'pivotheatmap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotheatmap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotheatmapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotheatmapMetaData;
    }());
    var ExtPivotheatmapComponent = /** @class */ (function (_super) {
        __extends(ExtPivotheatmapComponent, _super);
        function ExtPivotheatmapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotheatmapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotheatmapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotheatmapMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotheatmapComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotheatmapComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotheatmap',
                        inputs: pivotheatmapMetaData.PROPERTIES,
                        outputs: pivotheatmapMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotheatmapComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotheatmapComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotheatmapComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivottreemapMetaData = /** @class */ (function () {
        function pivottreemapMetaData() {
        }
        pivottreemapMetaData.XTYPE = 'pivottreemap';
        pivottreemapMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoExpand',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'busyLayoutText',
            'centered',
            'clipScene',
            'cls',
            'colorAxis',
            'componentCls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandEventName',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hierarchyCls',
            'html',
            'id',
            'instanceCls',
            'interactions',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'leafTile',
            'left',
            'linkKey',
            'listeners',
            'margin',
            'matrix',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'padding',
            'parentTile',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderLinks',
            'renderTo',
            'right',
            'ripple',
            'rootVisible',
            'scaleLabels',
            'scrollable',
            'selectEventName',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'size',
            'sorter',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'style',
            'tabIndex',
            'tiling',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'transitions',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivottreemapMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivottreemap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivottreemap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivottreemap,event' },
            { name: 'focusenter', parameters: 'pivottreemap,event' },
            { name: 'focusleave', parameters: 'pivottreemap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivottreemap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivottreemapMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'layout',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'sceneresize',
            'scenesetup',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivottreemapMetaData;
    }());
    var ExtPivottreemapComponent = /** @class */ (function (_super) {
        __extends(ExtPivottreemapComponent, _super);
        function ExtPivottreemapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivottreemapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivottreemapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivottreemapMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivottreemapComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivottreemapComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivottreemap',
                        inputs: pivottreemapMetaData.PROPERTIES,
                        outputs: pivottreemapMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivottreemapComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivottreemapComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivottreemapComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotgridMetaData = /** @class */ (function () {
        function pivotgridMetaData() {
        }
        pivotgridMetaData.XTYPE = 'pivotgrid';
        pivotgridMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'associatedData',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'bufferSize',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'clsGrandTotal',
            'clsGroupTotal',
            'columnLines',
            'columnMenu',
            'columnResize',
            'columns',
            'columnsMenuItem',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disabled',
            'disableSelection',
            'disclosureProperty',
            'displayed',
            'docked',
            'draggable',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'enableColumnSort',
            'enableLoadMask',
            'enableTextSelection',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'grouped',
            'groupFooter',
            'groupHeader',
            'height',
            'hidden',
            'hideAnimation',
            'hideHeaders',
            'hideMode',
            'hideOnMaskTap',
            'hideScrollbar',
            'horizontalOverflow',
            'html',
            'id',
            'inactiveChildTabIndex',
            'indexBar',
            'infinite',
            'inline',
            'innerCls',
            'innerCtHeight',
            'innerWidth',
            'instanceCls',
            'itemButtonMode',
            'itemCls',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemId',
            'itemInnerCls',
            'itemRipple',
            'items',
            'itemsFocusable',
            'itemTpl',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'leftAxisCellConfig',
            'listeners',
            'loadingHeight',
            'loadingText',
            'maintainChildNodes',
            'manageBorders',
            'margin',
            'markDirty',
            'masked',
            'matrix',
            'maxHeight',
            'maxItemCache',
            'maxWidth',
            'minHeight',
            'minimumBufferDistance',
            'minWidth',
            'modal',
            'modelValidation',
            'multiColumnSort',
            'name',
            'nameable',
            'nameHolder',
            'onItemDisclosure',
            'padding',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'plugins',
            'pressedDelay',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'reserveScrollbar',
            'resetFocusPosition',
            'right',
            'ripple',
            'rowLines',
            'rowNumbers',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sortable',
            'startColGroupsCollapsed',
            'startRowGroupsCollapsed',
            'stateful',
            'statefulDefaults',
            'stateId',
            'store',
            'striped',
            'style',
            'tabIndex',
            'title',
            'titleBar',
            'toFrontOnShow',
            'tooltip',
            'top',
            'topAxisCellConfig',
            'topRenderedIndex',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'useSimpleItems',
            'variableHeights',
            'verticalOverflow',
            'viewModel',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotgrid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgrid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgrid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'pivotgrid,location' },
            { name: 'childlongpress', parameters: 'pivotgrid,location' },
            { name: 'childmouseenter', parameters: 'pivotgrid,location' },
            { name: 'childmouseleave', parameters: 'pivotgrid,location' },
            { name: 'childsingletap', parameters: 'pivotgrid,location' },
            { name: 'childtap', parameters: 'pivotgrid,location' },
            { name: 'childtaphold', parameters: 'pivotgrid,location' },
            { name: 'childtouchcancel', parameters: 'pivotgrid,location' },
            { name: 'childtouchend', parameters: 'pivotgrid,location' },
            { name: 'childtouchmove', parameters: 'pivotgrid,location' },
            { name: 'childtouchstart', parameters: 'pivotgrid,location' },
            { name: 'columnadd', parameters: 'pivotgrid,column,index' },
            { name: 'columnhide', parameters: 'pivotgrid,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'pivotgrid,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'pivotgrid,column' },
            { name: 'columnresize', parameters: 'pivotgrid,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'pivotgrid,column' },
            { name: 'columnsort', parameters: 'pivotgrid,column,direction' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotgrid,newActiveItem' },
            { name: 'deselect', parameters: 'pivotgrid,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotgrid,event' },
            { name: 'focusenter', parameters: 'pivotgrid,event' },
            { name: 'focusleave', parameters: 'pivotgrid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'pivotgrid,index,record,action' },
            { name: 'itemdoubletap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemswipe', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'pivotgrid,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pivotbeforereconfigure', parameters: 'matrix,config' },
            { name: 'pivotbeforerequest', parameters: 'matrix,params' },
            { name: 'pivotbuildtotals', parameters: 'matrix,totals' },
            { name: 'pivotcolumnsbuilt', parameters: 'matrix,columns' },
            { name: 'pivotdone', parameters: 'matrix' },
            { name: 'pivotgroupcelldoubletap', parameters: 'params,e' },
            { name: 'pivotgroupcelltap', parameters: 'params,e' },
            { name: 'pivotgroupcelltaphold', parameters: 'params,e' },
            { name: 'pivotgroupcollapse', parameters: 'matrix,type,group' },
            { name: 'pivotgroupdoubletap', parameters: 'params,e' },
            { name: 'pivotgroupexpand', parameters: 'matrix,type,group' },
            { name: 'pivotgrouptap', parameters: 'params,e' },
            { name: 'pivotgrouptaphold', parameters: 'params,e' },
            { name: 'pivotitemcelldoubletap', parameters: 'params,e' },
            { name: 'pivotitemcelltap', parameters: 'params,e' },
            { name: 'pivotitemcelltaphold', parameters: 'params,e' },
            { name: 'pivotitemdoubletap', parameters: 'params,e' },
            { name: 'pivotitemtap', parameters: 'params,e' },
            { name: 'pivotitemtaphold', parameters: 'params,e' },
            { name: 'pivotmodelbuilt', parameters: 'matrix,model' },
            { name: 'pivotprogress', parameters: 'matrix,index,total' },
            { name: 'pivotreconfigure', parameters: 'matrix,config' },
            { name: 'pivotrecordbuilt', parameters: 'matrix,record' },
            { name: 'pivotrequestexception', parameters: 'matrix,response' },
            { name: 'pivotstart', parameters: 'matrix' },
            { name: 'pivotstorebuilt', parameters: 'matrix,store' },
            { name: 'pivottotalcelldoubletap', parameters: 'params,e' },
            { name: 'pivottotalcelltap', parameters: 'params,e' },
            { name: 'pivottotalcelltaphold', parameters: 'params,e' },
            { name: 'pivottotaldoubletap', parameters: 'params,e' },
            { name: 'pivottotaltap', parameters: 'params,e' },
            { name: 'pivottotaltaphold', parameters: 'params,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'pivotgrid' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotgrid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'pivotgrid,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgrid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeselectionextend',
            'beforeshow',
            'beforestorechange',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'cellselection',
            'centeredchange',
            'childdoubletap',
            'childlongpress',
            'childmouseenter',
            'childmouseleave',
            'childsingletap',
            'childtap',
            'childtaphold',
            'childtouchcancel',
            'childtouchend',
            'childtouchmove',
            'childtouchstart',
            'columnadd',
            'columnhide',
            'columnmenucreated',
            'columnmove',
            'columnremove',
            'columnresize',
            'columnselection',
            'columnshow',
            'columnsort',
            'deactivate',
            'deselect',
            'destroy',
            'disabledchange',
            'disclose',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'itemaction',
            'itemdoubletap',
            'itemlongpress',
            'itemmouseenter',
            'itemmouseleave',
            'itemsingletap',
            'itemswipe',
            'itemtap',
            'itemtaphold',
            'itemtouchcancel',
            'itemtouchend',
            'itemtouchmove',
            'itemtouchstart',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'navigate',
            'orientationchange',
            'painted',
            'pivotbeforereconfigure',
            'pivotbeforerequest',
            'pivotbuildtotals',
            'pivotcolumnsbuilt',
            'pivotdone',
            'pivotgroupcelldoubletap',
            'pivotgroupcelltap',
            'pivotgroupcelltaphold',
            'pivotgroupcollapse',
            'pivotgroupdoubletap',
            'pivotgroupexpand',
            'pivotgrouptap',
            'pivotgrouptaphold',
            'pivotitemcelldoubletap',
            'pivotitemcelltap',
            'pivotitemcelltaphold',
            'pivotitemdoubletap',
            'pivotitemtap',
            'pivotitemtaphold',
            'pivotmodelbuilt',
            'pivotprogress',
            'pivotreconfigure',
            'pivotrecordbuilt',
            'pivotrequestexception',
            'pivotstart',
            'pivotstorebuilt',
            'pivottotalcelldoubletap',
            'pivottotalcelltap',
            'pivottotalcelltaphold',
            'pivottotaldoubletap',
            'pivottotaltap',
            'pivottotaltaphold',
            'positionedchange',
            'refresh',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'select',
            'selectionextenderdrag',
            'show',
            'storechange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotgridMetaData;
    }());
    var ExtPivotgridComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridComponent, _super);
        function ExtPivotgridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotgridComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotgridMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotgridComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotgridComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotgrid',
                        inputs: pivotgridMetaData.PROPERTIES,
                        outputs: pivotgridMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotgridComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotgridComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotgridComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotconfigfieldMetaData = /** @class */ (function () {
        function pivotconfigfieldMetaData() {
        }
        pivotconfigfieldMetaData.XTYPE = 'pivotconfigfield';
        pivotconfigfieldMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'dataMap',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigfieldMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigfield,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigfield,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigfield,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigfield,event' },
            { name: 'focusenter', parameters: 'pivotconfigfield,event' },
            { name: 'focusleave', parameters: 'pivotconfigfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigfield,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigfield,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigfield,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigfieldMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigfieldMetaData;
    }());
    var ExtPivotconfigfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigfieldComponent, _super);
        function ExtPivotconfigfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotconfigfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotconfigfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotconfigfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotconfigfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotconfigfield',
                        inputs: pivotconfigfieldMetaData.PROPERTIES,
                        outputs: pivotconfigfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotconfigfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotconfigfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotconfigfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotconfigcontainerMetaData = /** @class */ (function () {
        function pivotconfigcontainerMetaData() {
        }
        pivotconfigcontainerMetaData.XTYPE = 'pivotconfigcontainer';
        pivotconfigcontainerMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fieldType',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigcontainerMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigcontainer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigcontainer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigcontainer' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigcontainer' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigcontainer,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigcontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigcontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigcontainer' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigcontainer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigcontainer' },
            { name: 'drawershow', parameters: 'pivotconfigcontainer' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'pivotconfigcontainer' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigcontainer,event' },
            { name: 'focusenter', parameters: 'pivotconfigcontainer,event' },
            { name: 'focusleave', parameters: 'pivotconfigcontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigcontainer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigcontainer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigcontainer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragend', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigcontainer,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigcontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigcontainerMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigcontainerMetaData;
    }());
    var ExtPivotconfigcontainerComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigcontainerComponent, _super);
        function ExtPivotconfigcontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigcontainerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotconfigcontainerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotconfigcontainerMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotconfigcontainerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotconfigcontainerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotconfigcontainer',
                        inputs: pivotconfigcontainerMetaData.PROPERTIES,
                        outputs: pivotconfigcontainerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotconfigcontainerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotconfigcontainerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotconfigcontainerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotconfigformMetaData = /** @class */ (function () {
        function pivotconfigformMetaData() {
        }
        pivotconfigformMetaData.XTYPE = 'pivotconfigform';
        pivotconfigformMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigformMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigform,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigform,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigform' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigform' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigform,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotconfigform,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotconfigform' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigform,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigform' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigform,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigform' },
            { name: 'drawershow', parameters: 'pivotconfigform' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotconfigform,result' },
            { name: 'expand', parameters: 'pivotconfigform' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigform,event' },
            { name: 'focusenter', parameters: 'pivotconfigform,event' },
            { name: 'focusleave', parameters: 'pivotconfigform,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigform,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigform,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigform,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigform,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigform,context' },
            { name: 'resizedragend', parameters: 'pivotconfigform,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigform,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotconfigform,result,e' },
            { name: 'tofront', parameters: 'pivotconfigform' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigformMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigformMetaData;
    }());
    var ExtPivotconfigformComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigformComponent, _super);
        function ExtPivotconfigformComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigformMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotconfigformComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotconfigformMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotconfigformComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotconfigformComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotconfigform',
                        inputs: pivotconfigformMetaData.PROPERTIES,
                        outputs: pivotconfigformMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotconfigformComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotconfigformComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotconfigformComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotconfigpanelMetaData = /** @class */ (function () {
        function pivotconfigpanelMetaData() {
        }
        pivotconfigpanelMetaData.XTYPE = 'pivotconfigpanel';
        pivotconfigpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'panelAggFieldsText',
            'panelAggFieldsTitle',
            'panelAllFieldsText',
            'panelAllFieldsTitle',
            'panelLeftFieldsText',
            'panelLeftFieldsTitle',
            'panelTopFieldsText',
            'panelTopFieldsTitle',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotconfigpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigpanel' },
            { name: 'drawershow', parameters: 'pivotconfigpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'pivotconfigpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigpanel,event' },
            { name: 'focusenter', parameters: 'pivotconfigpanel,event' },
            { name: 'focusleave', parameters: 'pivotconfigpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragend', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotconfigpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotconfigpanelMetaData;
    }());
    var ExtPivotconfigpanelComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigpanelComponent, _super);
        function ExtPivotconfigpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotconfigpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotconfigpanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotconfigpanelMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotconfigpanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotconfigpanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotconfigpanel',
                        inputs: pivotconfigpanelMetaData.PROPERTIES,
                        outputs: pivotconfigpanelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotconfigpanelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotconfigpanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotconfigpanelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotsettingsMetaData = /** @class */ (function () {
        function pivotsettingsMetaData() {
        }
        pivotsettingsMetaData.XTYPE = 'pivotsettings';
        pivotsettingsMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotsettingsMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotsettings,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotsettings,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotsettings' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotsettings' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotsettings,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotsettings,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotsettings' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotsettings,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotsettings' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotsettings,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotsettings' },
            { name: 'drawershow', parameters: 'pivotsettings' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotsettings,result' },
            { name: 'expand', parameters: 'pivotsettings' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotsettings,event' },
            { name: 'focusenter', parameters: 'pivotsettings,event' },
            { name: 'focusleave', parameters: 'pivotsettings,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotsettings,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotsettings,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotsettings,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotsettings,context' },
            { name: 'resizedragcancel', parameters: 'pivotsettings,context' },
            { name: 'resizedragend', parameters: 'pivotsettings,context' },
            { name: 'resizedragstart', parameters: 'pivotsettings,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotsettings,result,e' },
            { name: 'tofront', parameters: 'pivotsettings' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotsettingsMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotsettingsMetaData;
    }());
    var ExtPivotsettingsComponent = /** @class */ (function (_super) {
        __extends(ExtPivotsettingsComponent, _super);
        function ExtPivotsettingsComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotsettingsMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotsettingsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotsettingsMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotsettingsComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotsettingsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotsettings',
                        inputs: pivotsettingsMetaData.PROPERTIES,
                        outputs: pivotsettingsMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotsettingsComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotsettingsComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotsettingsComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotrangeeditorMetaData = /** @class */ (function () {
        function pivotrangeeditorMetaData() {
        }
        pivotrangeeditorMetaData.XTYPE = 'pivotrangeeditor';
        pivotrangeeditorMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'api',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'baseParams',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableSubmissionForm',
            'enctype',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fieldSeparators',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'inputBorders',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'method',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'multipartDetection',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'paramOrder',
            'paramsAsHash',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'standardButtons',
            'standardSubmit',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'submitOnAction',
            'tabIndex',
            'tbar',
            'timeout',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackResetOnLoad',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotrangeeditorMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotrangeeditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotrangeeditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotrangeeditor' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotrangeeditor' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotrangeeditor,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotrangeeditor,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotrangeeditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotrangeeditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotrangeeditor' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotrangeeditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotrangeeditor' },
            { name: 'drawershow', parameters: 'pivotrangeeditor' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotrangeeditor,result' },
            { name: 'expand', parameters: 'pivotrangeeditor' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotrangeeditor,event' },
            { name: 'focusenter', parameters: 'pivotrangeeditor,event' },
            { name: 'focusleave', parameters: 'pivotrangeeditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotrangeeditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotrangeeditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotrangeeditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragcancel', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragend', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragstart', parameters: 'pivotrangeeditor,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotrangeeditor,result,e' },
            { name: 'tofront', parameters: 'pivotrangeeditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotrangeeditorMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforesubmit',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'exception',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'submit',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotrangeeditorMetaData;
    }());
    var ExtPivotrangeeditorComponent = /** @class */ (function (_super) {
        __extends(ExtPivotrangeeditorComponent, _super);
        function ExtPivotrangeeditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotrangeeditorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotrangeeditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotrangeeditorMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotrangeeditorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotrangeeditorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotrangeeditor',
                        inputs: pivotrangeeditorMetaData.PROPERTIES,
                        outputs: pivotrangeeditorMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotrangeeditorComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotrangeeditorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotrangeeditorComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var pivotgridrowMetaData = /** @class */ (function () {
        function pivotgridrowMetaData() {
        }
        pivotgridrowMetaData.XTYPE = 'pivotgridrow';
        pivotgridrowMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'body',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultCellUI',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'expandedField',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'pinned',
            'plugins',
            'publishes',
            'record',
            'recordIndex',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stickyVisibility',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        pivotgridrowMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotgridrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotgridrow,event' },
            { name: 'focusenter', parameters: 'pivotgridrow,event' },
            { name: 'focusleave', parameters: 'pivotgridrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotgridrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        pivotgridrowMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return pivotgridrowMetaData;
    }());
    var ExtPivotgridrowComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridrowComponent, _super);
        function ExtPivotgridrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, pivotgridrowMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPivotgridrowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(pivotgridrowMetaData);
            };
        /**
         * @return {?}
         */
        ExtPivotgridrowComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPivotgridrowComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'pivotgridrow',
                        inputs: pivotgridrowMetaData.PROPERTIES,
                        outputs: pivotgridrowMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPivotgridrowComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPivotgridrowComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPivotgridrowComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var progressMetaData = /** @class */ (function () {
        function progressMetaData() {
        }
        progressMetaData.XTYPE = 'progress';
        progressMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animate',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textTpl',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        progressMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'progress' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'progress,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'progress,event' },
            { name: 'focusenter', parameters: 'progress,event' },
            { name: 'focusleave', parameters: 'progress,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'progress' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        progressMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return progressMetaData;
    }());
    var ExtProgressComponent = /** @class */ (function (_super) {
        __extends(ExtProgressComponent, _super);
        function ExtProgressComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, progressMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtProgressComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(progressMetaData);
            };
        /**
         * @return {?}
         */
        ExtProgressComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtProgressComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'progress',
                        inputs: progressMetaData.PROPERTIES,
                        outputs: progressMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtProgressComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtProgressComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtProgressComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var progressbarwidgetMetaData = /** @class */ (function () {
        function progressbarwidgetMetaData() {
        }
        progressbarwidgetMetaData.XTYPE = 'progressbarwidget';
        progressbarwidgetMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animate',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'text',
            'textTpl',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        progressbarwidgetMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'progress' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'progress,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'progress,event' },
            { name: 'focusenter', parameters: 'progress,event' },
            { name: 'focusleave', parameters: 'progress,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'progress' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        progressbarwidgetMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return progressbarwidgetMetaData;
    }());
    var ExtProgressbarwidgetComponent = /** @class */ (function (_super) {
        __extends(ExtProgressbarwidgetComponent, _super);
        function ExtProgressbarwidgetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, progressbarwidgetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtProgressbarwidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(progressbarwidgetMetaData);
            };
        /**
         * @return {?}
         */
        ExtProgressbarwidgetComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtProgressbarwidgetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'progressbarwidget',
                        inputs: progressbarwidgetMetaData.PROPERTIES,
                        outputs: progressbarwidgetMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtProgressbarwidgetComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtProgressbarwidgetComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtProgressbarwidgetComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var segmentedbuttonMetaData = /** @class */ (function () {
        function segmentedbuttonMetaData() {
        }
        segmentedbuttonMetaData.XTYPE = 'segmentedbutton';
        segmentedbuttonMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowDepress',
            'allowFocusingDisabledChildren',
            'allowMultiple',
            'allowToggle',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'defaultUI',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'forceSelection',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'pressedButtons',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'vertical',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        segmentedbuttonMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,segmentedbutton,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'segmentedbutton,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'segmentedbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'segmentedbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'segmentedbutton,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,segmentedbutton,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'segmentedbutton,event' },
            { name: 'focusenter', parameters: 'segmentedbutton,event' },
            { name: 'focusleave', parameters: 'segmentedbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'segmentedbutton,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'segmentedbutton,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'segmentedbutton,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'segmentedbutton' },
            { name: 'toggle', parameters: 'segmentedbutton,button,isPressed' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        segmentedbuttonMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'toggle',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return segmentedbuttonMetaData;
    }());
    var ExtSegmentedbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtSegmentedbuttonComponent, _super);
        function ExtSegmentedbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, segmentedbuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSegmentedbuttonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(segmentedbuttonMetaData);
            };
        /**
         * @return {?}
         */
        ExtSegmentedbuttonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSegmentedbuttonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'segmentedbutton',
                        inputs: segmentedbuttonMetaData.PROPERTIES,
                        outputs: segmentedbuttonMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSegmentedbuttonComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSegmentedbuttonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSegmentedbuttonComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sheetMetaData = /** @class */ (function () {
        function sheetMetaData() {
        }
        sheetMetaData.XTYPE = 'sheet';
        sheetMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'cover',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enter',
            'enterAnimation',
            'eventHandlers',
            'exit',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'reveal',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'side',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchX',
            'stretchY',
            'style',
            'tabIndex',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sheetMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,sheet,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'sheet,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'sheet' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'sheet' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'sheet,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sheet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sheet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'sheet' },
            { name: 'deactivate', parameters: 'oldActiveItem,sheet,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'sheet' },
            { name: 'drawershow', parameters: 'sheet' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'sheet' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sheet,event' },
            { name: 'focusenter', parameters: 'sheet,event' },
            { name: 'focusleave', parameters: 'sheet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'sheet,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'sheet,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'sheet,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'sheet,context' },
            { name: 'resizedragcancel', parameters: 'sheet,context' },
            { name: 'resizedragend', parameters: 'sheet,context' },
            { name: 'resizedragstart', parameters: 'sheet,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sheet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sheetMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sheetMetaData;
    }());
    var ExtSheetComponent = /** @class */ (function (_super) {
        __extends(ExtSheetComponent, _super);
        function ExtSheetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sheetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSheetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sheetMetaData);
            };
        /**
         * @return {?}
         */
        ExtSheetComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSheetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sheet',
                        inputs: sheetMetaData.PROPERTIES,
                        outputs: sheetMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSheetComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSheetComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSheetComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sliderMetaData = /** @class */ (function () {
        function sliderMetaData() {
        }
        sliderMetaData.XTYPE = 'slider';
        sliderMetaData.PROPERTIES = [
            'allowThumbsOverlapping',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'thumbDefaults',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueIsArray',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sliderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'slider' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'slider,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'slider,thumb,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'slider,thumb,e' },
            { name: 'dragend', parameters: 'slider,thumb,value,e' },
            { name: 'dragstart', parameters: 'slider,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'slider,event' },
            { name: 'focusenter', parameters: 'slider,event' },
            { name: 'focusleave', parameters: 'slider,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'slider' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sliderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragend',
            'dragstart',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sliderMetaData;
    }());
    var ExtSliderComponent = /** @class */ (function (_super) {
        __extends(ExtSliderComponent, _super);
        function ExtSliderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sliderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSliderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sliderMetaData);
            };
        /**
         * @return {?}
         */
        ExtSliderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSliderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'slider',
                        inputs: sliderMetaData.PROPERTIES,
                        outputs: sliderMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSliderComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSliderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSliderComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var thumbMetaData = /** @class */ (function () {
        function thumbMetaData() {
        }
        thumbMetaData.XTYPE = 'thumb';
        thumbMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fillCls',
            'fillTrack',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        thumbMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'thumb' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'thumb,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'thumb,event' },
            { name: 'focusenter', parameters: 'thumb,event' },
            { name: 'focusleave', parameters: 'thumb,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'thumb' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        thumbMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return thumbMetaData;
    }());
    var ExtThumbComponent = /** @class */ (function (_super) {
        __extends(ExtThumbComponent, _super);
        function ExtThumbComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, thumbMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtThumbComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(thumbMetaData);
            };
        /**
         * @return {?}
         */
        ExtThumbComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtThumbComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'thumb',
                        inputs: thumbMetaData.PROPERTIES,
                        outputs: thumbMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtThumbComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtThumbComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtThumbComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var togglesliderMetaData = /** @class */ (function () {
        function togglesliderMetaData() {
        }
        togglesliderMetaData.XTYPE = 'toggleslider';
        togglesliderMetaData.PROPERTIES = [
            'allowThumbsOverlapping',
            'alwaysOnTop',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'increment',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'thumbDefaults',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueIsArray',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        togglesliderMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'toggleslider' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'toggleslider,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'toggleslider,thumb,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'toggleslider,thumb,e' },
            { name: 'dragend', parameters: 'toggleslider,thumb,value,e' },
            { name: 'dragstart', parameters: 'toggleslider,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'toggleslider,event' },
            { name: 'focusenter', parameters: 'toggleslider,event' },
            { name: 'focusleave', parameters: 'toggleslider,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'toggleslider' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        togglesliderMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drag',
            'dragend',
            'dragstart',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return togglesliderMetaData;
    }());
    var ExtTogglesliderComponent = /** @class */ (function (_super) {
        __extends(ExtTogglesliderComponent, _super);
        function ExtTogglesliderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, togglesliderMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTogglesliderComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(togglesliderMetaData);
            };
        /**
         * @return {?}
         */
        ExtTogglesliderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTogglesliderComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'toggleslider',
                        inputs: togglesliderMetaData.PROPERTIES,
                        outputs: togglesliderMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTogglesliderComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTogglesliderComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTogglesliderComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var spacerMetaData = /** @class */ (function () {
        function spacerMetaData() {
        }
        spacerMetaData.XTYPE = 'spacer';
        spacerMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        spacerMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spacer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spacer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spacer,event' },
            { name: 'focusenter', parameters: 'spacer,event' },
            { name: 'focusleave', parameters: 'spacer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'spacer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        spacerMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return spacerMetaData;
    }());
    var ExtSpacerComponent = /** @class */ (function (_super) {
        __extends(ExtSpacerComponent, _super);
        function ExtSpacerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, spacerMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSpacerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(spacerMetaData);
            };
        /**
         * @return {?}
         */
        ExtSpacerComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSpacerComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'spacer',
                        inputs: spacerMetaData.PROPERTIES,
                        outputs: spacerMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSpacerComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSpacerComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSpacerComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklinebarMetaData = /** @class */ (function () {
        function sparklinebarMetaData() {
        }
        sparklinebarMetaData.XTYPE = 'sparklinebar';
        sparklinebarMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'barColor',
            'barSpacing',
            'barWidth',
            'bind',
            'border',
            'bottom',
            'centered',
            'chartRangeClip',
            'chartRangeMax',
            'chartRangeMin',
            'cls',
            'colorMap',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'negBarColor',
            'nullColor',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stackedBarColor',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zeroAxis',
            'zeroColor',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinebarMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebar,event' },
            { name: 'focusenter', parameters: 'sparklinebar,event' },
            { name: 'focusleave', parameters: 'sparklinebar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinebarMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinebarMetaData;
    }());
    var ExtSparklinebarComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinebarComponent, _super);
        function ExtSparklinebarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinebarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklinebarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklinebarMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklinebarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklinebarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparklinebar',
                        inputs: sparklinebarMetaData.PROPERTIES,
                        outputs: sparklinebarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklinebarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklinebarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklinebarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklineMetaData = /** @class */ (function () {
        function sparklineMetaData() {
        }
        sparklineMetaData.XTYPE = 'sparkline';
        sparklineMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklineMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparkline' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparkline,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparkline,event' },
            { name: 'focusenter', parameters: 'sparkline,event' },
            { name: 'focusleave', parameters: 'sparkline,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparkline' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklineMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklineMetaData;
    }());
    var ExtSparklineComponent = /** @class */ (function (_super) {
        __extends(ExtSparklineComponent, _super);
        function ExtSparklineComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklineMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklineComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklineMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklineComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklineComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparkline',
                        inputs: sparklineMetaData.PROPERTIES,
                        outputs: sparklineMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklineComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklineComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklineComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklineboxMetaData = /** @class */ (function () {
        function sparklineboxMetaData() {
        }
        sparklineboxMetaData.XTYPE = 'sparklinebox';
        sparklineboxMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'boxFillColor',
            'boxLineColor',
            'centered',
            'chartRangeMax',
            'chartRangeMin',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'medianColor',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'outlierFillColor',
            'outlierIQR',
            'outlierLineColor',
            'padding',
            'plugins',
            'publishes',
            'raw',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showOutliers',
            'spotRadius',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'targetColor',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'whiskerColor',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklineboxMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebox,event' },
            { name: 'focusenter', parameters: 'sparklinebox,event' },
            { name: 'focusleave', parameters: 'sparklinebox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklineboxMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklineboxMetaData;
    }());
    var ExtSparklineboxComponent = /** @class */ (function (_super) {
        __extends(ExtSparklineboxComponent, _super);
        function ExtSparklineboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklineboxMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklineboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklineboxMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklineboxComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklineboxComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparklinebox',
                        inputs: sparklineboxMetaData.PROPERTIES,
                        outputs: sparklineboxMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklineboxComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklineboxComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklineboxComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklinebulletMetaData = /** @class */ (function () {
        function sparklinebulletMetaData() {
        }
        sparklinebulletMetaData.XTYPE = 'sparklinebullet';
        sparklinebulletMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'base',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'performanceColor',
            'plugins',
            'publishes',
            'rangeColors',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'targetColor',
            'targetWidth',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinebulletMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebullet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebullet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebullet,event' },
            { name: 'focusenter', parameters: 'sparklinebullet,event' },
            { name: 'focusleave', parameters: 'sparklinebullet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebullet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinebulletMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinebulletMetaData;
    }());
    var ExtSparklinebulletComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinebulletComponent, _super);
        function ExtSparklinebulletComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinebulletMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklinebulletComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklinebulletMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklinebulletComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklinebulletComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparklinebullet',
                        inputs: sparklinebulletMetaData.PROPERTIES,
                        outputs: sparklinebulletMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklinebulletComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklinebulletComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklinebulletComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklinediscreteMetaData = /** @class */ (function () {
        function sparklinediscreteMetaData() {
        }
        sparklinediscreteMetaData.XTYPE = 'sparklinediscrete';
        sparklinediscreteMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'chartRangeClip',
            'chartRangeMax',
            'chartRangeMin',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'lineHeight',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'thresholdColor',
            'thresholdValue',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinediscreteMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinediscrete' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinediscrete,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinediscrete,event' },
            { name: 'focusenter', parameters: 'sparklinediscrete,event' },
            { name: 'focusleave', parameters: 'sparklinediscrete,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinediscrete' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinediscreteMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinediscreteMetaData;
    }());
    var ExtSparklinediscreteComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinediscreteComponent, _super);
        function ExtSparklinediscreteComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinediscreteMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklinediscreteComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklinediscreteMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklinediscreteComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklinediscreteComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparklinediscrete',
                        inputs: sparklinediscreteMetaData.PROPERTIES,
                        outputs: sparklinediscreteMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklinediscreteComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklinediscreteComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklinediscreteComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklinelineMetaData = /** @class */ (function () {
        function sparklinelineMetaData() {
        }
        sparklinelineMetaData.XTYPE = 'sparklineline';
        sparklinelineMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'chartRangeMax',
            'chartRangeMaxX',
            'chartRangeMin',
            'chartRangeMinX',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'drawNormalOnTop',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'fillColor',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'highlightLineColor',
            'highlightSpotColor',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'lineWidth',
            'listeners',
            'margin',
            'maxHeight',
            'maxSpotColor',
            'maxWidth',
            'minHeight',
            'minSpotColor',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'normalRangeColor',
            'normalRangeMax',
            'normalRangeMin',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'spotColor',
            'spotRadius',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'valueSpots',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinelineMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklineline' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklineline,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklineline,event' },
            { name: 'focusenter', parameters: 'sparklineline,event' },
            { name: 'focusleave', parameters: 'sparklineline,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklineline' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinelineMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinelineMetaData;
    }());
    var ExtSparklinelineComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinelineComponent, _super);
        function ExtSparklinelineComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinelineMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklinelineComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklinelineMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklinelineComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklinelineComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparklineline',
                        inputs: sparklinelineMetaData.PROPERTIES,
                        outputs: sparklinelineMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklinelineComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklinelineComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklinelineComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklinepieMetaData = /** @class */ (function () {
        function sparklinepieMetaData() {
        }
        sparklinepieMetaData.XTYPE = 'sparklinepie';
        sparklinepieMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'borderColor',
            'borderWidth',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'offset',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sliceColors',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinepieMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinepie' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinepie,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinepie,event' },
            { name: 'focusenter', parameters: 'sparklinepie,event' },
            { name: 'focusleave', parameters: 'sparklinepie,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinepie' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinepieMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinepieMetaData;
    }());
    var ExtSparklinepieComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinepieComponent, _super);
        function ExtSparklinepieComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinepieMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklinepieComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklinepieMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklinepieComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklinepieComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparklinepie',
                        inputs: sparklinepieMetaData.PROPERTIES,
                        outputs: sparklinepieMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklinepieComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklinepieComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklinepieComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var sparklinetristateMetaData = /** @class */ (function () {
        function sparklinetristateMetaData() {
        }
        sparklinetristateMetaData.XTYPE = 'sparklinetristate';
        sparklinetristateMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'barSpacing',
            'barWidth',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'colorMap',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'disableTooltips',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'highlightColor',
            'highlightLighten',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'lineColor',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'negBarColor',
            'padding',
            'plugins',
            'posBarColor',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tipTpl',
            'toFrontOnShow',
            'tooltip',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'values',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zeroBarColor',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        sparklinetristateMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinetristate' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinetristate,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinetristate,event' },
            { name: 'focusenter', parameters: 'sparklinetristate,event' },
            { name: 'focusleave', parameters: 'sparklinetristate,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinetristate' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        sparklinetristateMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return sparklinetristateMetaData;
    }());
    var ExtSparklinetristateComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinetristateComponent, _super);
        function ExtSparklinetristateComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, sparklinetristateMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSparklinetristateComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(sparklinetristateMetaData);
            };
        /**
         * @return {?}
         */
        ExtSparklinetristateComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSparklinetristateComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'sparklinetristate',
                        inputs: sparklinetristateMetaData.PROPERTIES,
                        outputs: sparklinetristateMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSparklinetristateComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSparklinetristateComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSparklinetristateComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var splitbuttonMetaData = /** @class */ (function () {
        function splitbuttonMetaData() {
        }
        splitbuttonMetaData.XTYPE = 'splitbutton';
        splitbuttonMetaData.PROPERTIES = [
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'arrowHandler',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        splitbuttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'arrowclick', parameters: 'splitbutton,e' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'splitbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'splitbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'splitbutton,event' },
            { name: 'focusenter', parameters: 'splitbutton,event' },
            { name: 'focusleave', parameters: 'splitbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'splitbutton,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'splitbutton,e' },
            { name: 'tofront', parameters: 'splitbutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        splitbuttonMetaData.EVENTNAMES = [
            'added',
            'arrowclick',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return splitbuttonMetaData;
    }());
    var ExtSplitbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtSplitbuttonComponent, _super);
        function ExtSplitbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, splitbuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtSplitbuttonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(splitbuttonMetaData);
            };
        /**
         * @return {?}
         */
        ExtSplitbuttonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtSplitbuttonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'splitbutton',
                        inputs: splitbuttonMetaData.PROPERTIES,
                        outputs: splitbuttonMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtSplitbuttonComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtSplitbuttonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtSplitbuttonComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var tabbarMetaData = /** @class */ (function () {
        function tabbarMetaData() {
        }
        tabbarMetaData.XTYPE = 'tabbar';
        tabbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'activeTab',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'animateIndicator',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultTabUI',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'activeTabchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeactiveTabchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabbar,event' },
            { name: 'focusenter', parameters: 'tabbar,event' },
            { name: 'focusleave', parameters: 'tabbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tabchange', parameters: 'tabbar,newTab,oldTab' },
            { name: 'tofront', parameters: 'tabbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'activeTabchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforeactiveTabchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tabchange',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabbarMetaData;
    }());
    var ExtTabbarComponent = /** @class */ (function (_super) {
        __extends(ExtTabbarComponent, _super);
        function ExtTabbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTabbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(tabbarMetaData);
            };
        /**
         * @return {?}
         */
        ExtTabbarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTabbarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tabbar',
                        inputs: tabbarMetaData.PROPERTIES,
                        outputs: tabbarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTabbarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTabbarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTabbarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var tabpanelMetaData = /** @class */ (function () {
        function tabpanelMetaData() {
        }
        tabpanelMetaData.XTYPE = 'tabpanel';
        tabpanelMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scroll',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabBar',
            'tabBarPosition',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabpanelMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabpanel,event' },
            { name: 'focusenter', parameters: 'tabpanel,event' },
            { name: 'focusleave', parameters: 'tabpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tabpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabpanelMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabpanelMetaData;
    }());
    var ExtTabpanelComponent = /** @class */ (function (_super) {
        __extends(ExtTabpanelComponent, _super);
        function ExtTabpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabpanelMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTabpanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(tabpanelMetaData);
            };
        /**
         * @return {?}
         */
        ExtTabpanelComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTabpanelComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tabpanel',
                        inputs: tabpanelMetaData.PROPERTIES,
                        outputs: tabpanelMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTabpanelComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTabpanelComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTabpanelComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var tabMetaData = /** @class */ (function () {
        function tabMetaData() {
        }
        tabMetaData.XTYPE = 'tab';
        tabMetaData.PROPERTIES = [
            'active',
            'allowDepress',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'arrow',
            'arrowAlign',
            'autoEvent',
            'axisLock',
            'badgeText',
            'bind',
            'border',
            'bottom',
            'buttonType',
            'centered',
            'closable',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'destroyMenu',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableToggle',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'menu',
            'menuAlign',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'pressed',
            'pressedDelay',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stretchMenu',
            'style',
            'tabIndex',
            'text',
            'textAlign',
            'title',
            'toFrontOnShow',
            'toggleHandler',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tabMetaData.EVENTS = [
            { name: 'activate', parameters: 'tab' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tab' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tab,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'tab' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tab,event' },
            { name: 'focusenter', parameters: 'tab,event' },
            { name: 'focusleave', parameters: 'tab,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'tab,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'tab,e' },
            { name: 'tofront', parameters: 'tab' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tabMetaData.EVENTNAMES = [
            'activate',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforepressedchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'pressedchange',
            'release',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tap',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tabMetaData;
    }());
    var ExtTabComponent = /** @class */ (function (_super) {
        __extends(ExtTabComponent, _super);
        function ExtTabComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tabMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTabComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(tabMetaData);
            };
        /**
         * @return {?}
         */
        ExtTabComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTabComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tab',
                        inputs: tabMetaData.PROPERTIES,
                        outputs: tabMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTabComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTabComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTabComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var tooltipMetaData = /** @class */ (function () {
        function tooltipMetaData() {
        }
        tooltipMetaData.XTYPE = 'tooltip';
        tooltipMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'align',
            'alignDelegate',
            'allowFocusingDisabledChildren',
            'allowOver',
            'alwaysOnTop',
            'anchor',
            'anchorPosition',
            'anchorToTarget',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoHide',
            'autoSize',
            'axisLock',
            'bbar',
            'bind',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'bottom',
            'buttonAlign',
            'buttons',
            'buttonToolbar',
            'cardSwitchAnimation',
            'centered',
            'closable',
            'closeAction',
            'closeToolText',
            'cls',
            'collapsed',
            'collapsible',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultToolWeights',
            'defaultType',
            'delegate',
            'disabled',
            'dismissDelay',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'header',
            'headerPosition',
            'height',
            'hidden',
            'hideAnimation',
            'hideDelay',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'lbar',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minButtonWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'mouseOffset',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'quickShowInterval',
            'rbar',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'resizable',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showDelay',
            'showOnTap',
            'standardButtons',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'target',
            'tbar',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'toolDefaults',
            'tools',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackMouse',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        tooltipMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tooltip,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tooltip,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'tooltip' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'tooltip' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'tooltip,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tooltip' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tooltip,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'tooltip' },
            { name: 'deactivate', parameters: 'oldActiveItem,tooltip,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'tooltip' },
            { name: 'drawershow', parameters: 'tooltip' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'tooltip' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tooltip,event' },
            { name: 'focusenter', parameters: 'tooltip,event' },
            { name: 'focusleave', parameters: 'tooltip,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tooltip,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tooltip,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tooltip,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'tooltip,context' },
            { name: 'resizedragcancel', parameters: 'tooltip,context' },
            { name: 'resizedragend', parameters: 'tooltip,context' },
            { name: 'resizedragstart', parameters: 'tooltip,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tooltip' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        tooltipMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforecollapse',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeexpand',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforeresizedragstart',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'collapse',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'drawerhide',
            'drawershow',
            'erased',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'resizedrag',
            'resizedragcancel',
            'resizedragend',
            'resizedragstart',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return tooltipMetaData;
    }());
    var ExtTooltipComponent = /** @class */ (function (_super) {
        __extends(ExtTooltipComponent, _super);
        function ExtTooltipComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, tooltipMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTooltipComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(tooltipMetaData);
            };
        /**
         * @return {?}
         */
        ExtTooltipComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTooltipComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tooltip',
                        inputs: tooltipMetaData.PROPERTIES,
                        outputs: tooltipMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTooltipComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTooltipComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTooltipComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var titleMetaData = /** @class */ (function () {
        function titleMetaData() {
        }
        titleMetaData.XTYPE = 'title';
        titleMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        titleMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'title' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'title,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'title,event' },
            { name: 'focusenter', parameters: 'title,event' },
            { name: 'focusleave', parameters: 'title,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'title' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        titleMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return titleMetaData;
    }());
    var ExtTitleComponent = /** @class */ (function (_super) {
        __extends(ExtTitleComponent, _super);
        function ExtTitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, titleMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTitleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(titleMetaData);
            };
        /**
         * @return {?}
         */
        ExtTitleComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTitleComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'title',
                        inputs: titleMetaData.PROPERTIES,
                        outputs: titleMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTitleComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTitleComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTitleComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var titlebarMetaData = /** @class */ (function () {
        function titlebarMetaData() {
        }
        titlebarMetaData.XTYPE = 'titlebar';
        titlebarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxButtonWidth',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'titleAlign',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        titlebarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,titlebar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'titlebar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'titlebar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'titlebar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,titlebar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'titlebar,event' },
            { name: 'focusenter', parameters: 'titlebar,event' },
            { name: 'focusleave', parameters: 'titlebar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'titlebar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'titlebar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'titlebar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'titlebar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        titlebarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return titlebarMetaData;
    }());
    var ExtTitlebarComponent = /** @class */ (function (_super) {
        __extends(ExtTitlebarComponent, _super);
        function ExtTitlebarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, titlebarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtTitlebarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(titlebarMetaData);
            };
        /**
         * @return {?}
         */
        ExtTitlebarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtTitlebarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'titlebar',
                        inputs: titlebarMetaData.PROPERTIES,
                        outputs: titlebarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtTitlebarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtTitlebarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtTitlebarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var toolMetaData = /** @class */ (function () {
        function toolMetaData() {
        }
        toolMetaData.XTYPE = 'tool';
        toolMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'passive',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopEvent',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolOwner',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'type',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        toolMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tool' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tool,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'click', parameters: 'tool,e,owner' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tool,event' },
            { name: 'focusenter', parameters: 'tool,event' },
            { name: 'focusleave', parameters: 'tool,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tool' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        toolMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return toolMetaData;
    }());
    var ExtToolComponent = /** @class */ (function (_super) {
        __extends(ExtToolComponent, _super);
        function ExtToolComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, toolMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtToolComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(toolMetaData);
            };
        /**
         * @return {?}
         */
        ExtToolComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtToolComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'tool',
                        inputs: toolMetaData.PROPERTIES,
                        outputs: toolMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtToolComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtToolComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtToolComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var paneltoolMetaData = /** @class */ (function () {
        function paneltoolMetaData() {
        }
        paneltoolMetaData.XTYPE = 'paneltool';
        paneltoolMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'handler',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'iconCls',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'passive',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scope',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'stopEvent',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'toolOwner',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'type',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        paneltoolMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tool' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tool,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'click', parameters: 'tool,e,owner' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tool,event' },
            { name: 'focusenter', parameters: 'tool,event' },
            { name: 'focusleave', parameters: 'tool,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tool' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        paneltoolMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'click',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return paneltoolMetaData;
    }());
    var ExtPaneltoolComponent = /** @class */ (function (_super) {
        __extends(ExtPaneltoolComponent, _super);
        function ExtPaneltoolComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, paneltoolMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtPaneltoolComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(paneltoolMetaData);
            };
        /**
         * @return {?}
         */
        ExtPaneltoolComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtPaneltoolComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'paneltool',
                        inputs: paneltoolMetaData.PROPERTIES,
                        outputs: paneltoolMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtPaneltoolComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtPaneltoolComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtPaneltoolComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var toolbarMetaData = /** @class */ (function () {
        function toolbarMetaData() {
        }
        toolbarMetaData.XTYPE = 'toolbar';
        toolbarMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultButtonUI',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'title',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        toolbarMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,toolbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'toolbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'toolbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'toolbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,toolbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'toolbar,event' },
            { name: 'focusenter', parameters: 'toolbar,event' },
            { name: 'focusleave', parameters: 'toolbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'toolbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'toolbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'toolbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'toolbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        toolbarMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return toolbarMetaData;
    }());
    var ExtToolbarComponent = /** @class */ (function (_super) {
        __extends(ExtToolbarComponent, _super);
        function ExtToolbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, toolbarMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtToolbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(toolbarMetaData);
            };
        /**
         * @return {?}
         */
        ExtToolbarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtToolbarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'toolbar',
                        inputs: toolbarMetaData.PROPERTIES,
                        outputs: toolbarMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtToolbarComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtToolbarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtToolbarComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var colorbuttonMetaData = /** @class */ (function () {
        function colorbuttonMetaData() {
        }
        colorbuttonMetaData.XTYPE = 'colorbutton';
        colorbuttonMetaData.PROPERTIES = [
            'alphaDecimalFormat',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'color',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'popup',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorbuttonMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'colorbutton,color,previousColor' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorbutton,event' },
            { name: 'focusenter', parameters: 'colorbutton,event' },
            { name: 'focusleave', parameters: 'colorbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorbutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        colorbuttonMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return colorbuttonMetaData;
    }());
    var ExtColorbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtColorbuttonComponent, _super);
        function ExtColorbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorbuttonMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtColorbuttonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(colorbuttonMetaData);
            };
        /**
         * @return {?}
         */
        ExtColorbuttonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtColorbuttonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'colorbutton',
                        inputs: colorbuttonMetaData.PROPERTIES,
                        outputs: colorbuttonMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtColorbuttonComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtColorbuttonComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtColorbuttonComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var colorpickercolorpreviewMetaData = /** @class */ (function () {
        function colorpickercolorpreviewMetaData() {
        }
        colorpickercolorpreviewMetaData.XTYPE = 'colorpickercolorpreview';
        colorpickercolorpreviewMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorpickercolorpreviewMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorpickercolorpreview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorpickercolorpreview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorpickercolorpreview,event' },
            { name: 'focusenter', parameters: 'colorpickercolorpreview,event' },
            { name: 'focusleave', parameters: 'colorpickercolorpreview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorpickercolorpreview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        colorpickercolorpreviewMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return colorpickercolorpreviewMetaData;
    }());
    var ExtColorpickercolorpreviewComponent = /** @class */ (function (_super) {
        __extends(ExtColorpickercolorpreviewComponent, _super);
        function ExtColorpickercolorpreviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorpickercolorpreviewMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtColorpickercolorpreviewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(colorpickercolorpreviewMetaData);
            };
        /**
         * @return {?}
         */
        ExtColorpickercolorpreviewComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtColorpickercolorpreviewComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'colorpickercolorpreview',
                        inputs: colorpickercolorpreviewMetaData.PROPERTIES,
                        outputs: colorpickercolorpreviewMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtColorpickercolorpreviewComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtColorpickercolorpreviewComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtColorpickercolorpreviewComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var colorfieldMetaData = /** @class */ (function () {
        function colorfieldMetaData() {
        }
        colorfieldMetaData.XTYPE = 'colorfield';
        colorfieldMetaData.PROPERTIES = [
            'alignTarget',
            'alphaDecimalFormat',
            'alwaysOnTop',
            'animateUnderline',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoFitErrors',
            'autoHideInputMask',
            'axisLock',
            'badFormatMessage',
            'bind',
            'bodyAlign',
            'border',
            'bottom',
            'centered',
            'clearable',
            'cls',
            'color',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'edgePicker',
            'editable',
            'enterAnimation',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'floatedPicker',
            'floatedPickerAlign',
            'focusCls',
            'focusTrap',
            'format',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'hideTrigger',
            'html',
            'id',
            'inline',
            'inputCls',
            'inputMask',
            'inputType',
            'inputValue',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'label',
            'labelAlign',
            'labelCls',
            'labelInPlaceholder',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'left',
            'listeners',
            'margin',
            'matchFieldWidth',
            'maxHeight',
            'maxLength',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'padding',
            'parseValidator',
            'pattern',
            'picker',
            'pickerSlotAlign',
            'placeholder',
            'placeHolder',
            'plugins',
            'popup',
            'publishes',
            'readOnly',
            'record',
            'reference',
            'relative',
            'renderTo',
            'required',
            'requiredMessage',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'sideError',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'tipError',
            'titleError',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'triggers',
            'twoWayBindable',
            'ui',
            'underError',
            'userCls',
            'userSelectable',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorfieldMetaData.EVENTS = [
            { name: 'action', parameters: 'colorfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'colorfield,color,previousColor' },
            { name: 'clearicontap', parameters: 'colorfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'colorfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorfield,e' },
            { name: 'focusenter', parameters: 'colorfield,event' },
            { name: 'focusleave', parameters: 'colorfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'colorfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'colorfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'colorfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        colorfieldMetaData.EVENTNAMES = [
            'action',
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'change',
            'clearicontap',
            'click',
            'collapse',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'errorchange',
            'expand',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'keyup',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'mousedown',
            'moved',
            'orientationchange',
            'painted',
            'paste',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return colorfieldMetaData;
    }());
    var ExtColorfieldComponent = /** @class */ (function (_super) {
        __extends(ExtColorfieldComponent, _super);
        function ExtColorfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorfieldMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtColorfieldComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(colorfieldMetaData);
            };
        /**
         * @return {?}
         */
        ExtColorfieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtColorfieldComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'colorfield',
                        inputs: colorfieldMetaData.PROPERTIES,
                        outputs: colorfieldMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtColorfieldComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtColorfieldComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtColorfieldComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var colorselectorMetaData = /** @class */ (function () {
        function colorselectorMetaData() {
        }
        colorselectorMetaData.XTYPE = 'colorselector';
        colorselectorMetaData.PROPERTIES = [
            'alphaDecimalFormat',
            'cancelButtonText',
            'color',
            'fieldPad',
            'fieldWidth',
            'format',
            'okButtonText',
            'showOkCancelButtons',
            'showPreviousColor',
            'value',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        colorselectorMetaData.EVENTS = [
            { name: 'cancel', parameters: 'colorselector' },
            { name: 'change', parameters: 'colorselector,color,previousColor' },
            { name: 'ok', parameters: 'colorselector,color' },
            { name: 'ready', parameters: '' }
        ];
        colorselectorMetaData.EVENTNAMES = [
            'cancel',
            'change',
            'ok',
            'ready'
        ];
        return colorselectorMetaData;
    }());
    var ExtColorselectorComponent = /** @class */ (function (_super) {
        __extends(ExtColorselectorComponent, _super);
        function ExtColorselectorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, colorselectorMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtColorselectorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(colorselectorMetaData);
            };
        /**
         * @return {?}
         */
        ExtColorselectorComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtColorselectorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'colorselector',
                        inputs: colorselectorMetaData.PROPERTIES,
                        outputs: colorselectorMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtColorselectorComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtColorselectorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtColorselectorComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var gaugeMetaData = /** @class */ (function () {
        function gaugeMetaData() {
        }
        gaugeMetaData.XTYPE = 'gauge';
        gaugeMetaData.PROPERTIES = [
            'alwaysOnTop',
            'angleOffset',
            'animation',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'clockwise',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'margin',
            'maxHeight',
            'maxValue',
            'maxWidth',
            'minHeight',
            'minValue',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'needle',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'textAlign',
            'textOffset',
            'textTpl',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackLength',
            'trackStart',
            'trackStyle',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'valueStyle',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        gaugeMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gauge' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gauge,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gauge,event' },
            { name: 'focusenter', parameters: 'gauge,event' },
            { name: 'focusleave', parameters: 'gauge,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gauge' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        gaugeMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return gaugeMetaData;
    }());
    var ExtGaugeComponent = /** @class */ (function (_super) {
        __extends(ExtGaugeComponent, _super);
        function ExtGaugeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, gaugeMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGaugeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(gaugeMetaData);
            };
        /**
         * @return {?}
         */
        ExtGaugeComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGaugeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'gauge',
                        inputs: gaugeMetaData.PROPERTIES,
                        outputs: gaugeMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGaugeComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGaugeComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGaugeComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var mapMetaData = /** @class */ (function () {
        function mapMetaData() {
        }
        mapMetaData.XTYPE = 'map';
        mapMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'geo',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'map',
            'mapListeners',
            'mapOptions',
            'margin',
            'markers',
            'markerTemplate',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'requiredScripts',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'useCurrentLocation',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        mapMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,map,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'map,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'map' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'map,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centerchange', parameters: 'map,map,center' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,map,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'map,event' },
            { name: 'focusenter', parameters: 'map,event' },
            { name: 'focusleave', parameters: 'map,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maprender', parameters: 'map,map' },
            { name: 'markerclick', parameters: 'map,info' },
            { name: 'markerdblclick', parameters: 'map,info' },
            { name: 'markerdrag', parameters: 'map,info' },
            { name: 'markerdragend', parameters: 'map,info' },
            { name: 'markerdragstart', parameters: 'map,info' },
            { name: 'markermousedown', parameters: 'map,info' },
            { name: 'markermouseout', parameters: 'map,info' },
            { name: 'markermouseover', parameters: 'map,info' },
            { name: 'markermouseup', parameters: 'map,info' },
            { name: 'markerrightclick', parameters: 'map,info' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'map,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'map,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'map,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'map' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'typechange', parameters: 'map,map,mapType' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'zoomchange', parameters: 'map,map,zoomLevel' },
            { name: 'ready', parameters: '' }
        ];
        mapMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centerchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maprender',
            'markerclick',
            'markerdblclick',
            'markerdrag',
            'markerdragend',
            'markerdragstart',
            'markermousedown',
            'markermouseout',
            'markermouseover',
            'markermouseup',
            'markerrightclick',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'typechange',
            'updatedata',
            'widthchange',
            'zoomchange',
            'ready'
        ];
        return mapMetaData;
    }());
    var ExtMapComponent = /** @class */ (function (_super) {
        __extends(ExtMapComponent, _super);
        function ExtMapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, mapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtMapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(mapMetaData);
            };
        /**
         * @return {?}
         */
        ExtMapComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtMapComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'map',
                        inputs: mapMetaData.PROPERTIES,
                        outputs: mapMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtMapComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtMapComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtMapComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var google_mapMetaData = /** @class */ (function () {
        function google_mapMetaData() {
        }
        google_mapMetaData.XTYPE = 'google-map';
        google_mapMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoDestroy',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'geo',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'map',
            'mapListeners',
            'mapOptions',
            'margin',
            'markers',
            'markerTemplate',
            'masked',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'requiredScripts',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'useCurrentLocation',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        google_mapMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,map,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'map,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'map' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'map,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centerchange', parameters: 'map,map,center' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,map,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'map,event' },
            { name: 'focusenter', parameters: 'map,event' },
            { name: 'focusleave', parameters: 'map,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maprender', parameters: 'map,map' },
            { name: 'markerclick', parameters: 'map,info' },
            { name: 'markerdblclick', parameters: 'map,info' },
            { name: 'markerdrag', parameters: 'map,info' },
            { name: 'markerdragend', parameters: 'map,info' },
            { name: 'markerdragstart', parameters: 'map,info' },
            { name: 'markermousedown', parameters: 'map,info' },
            { name: 'markermouseout', parameters: 'map,info' },
            { name: 'markermouseover', parameters: 'map,info' },
            { name: 'markermouseup', parameters: 'map,info' },
            { name: 'markerrightclick', parameters: 'map,info' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'map,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'map,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'map,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'map' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'typechange', parameters: 'map,map,mapType' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'zoomchange', parameters: 'map,map,zoomLevel' },
            { name: 'ready', parameters: '' }
        ];
        google_mapMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centerchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maprender',
            'markerclick',
            'markerdblclick',
            'markerdrag',
            'markerdragend',
            'markerdragstart',
            'markermousedown',
            'markermouseout',
            'markermouseover',
            'markermouseup',
            'markerrightclick',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'typechange',
            'updatedata',
            'widthchange',
            'zoomchange',
            'ready'
        ];
        return google_mapMetaData;
    }());
    var ExtGoogle_mapComponent = /** @class */ (function (_super) {
        __extends(ExtGoogle_mapComponent, _super);
        function ExtGoogle_mapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, google_mapMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtGoogle_mapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(google_mapMetaData);
            };
        /**
         * @return {?}
         */
        ExtGoogle_mapComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtGoogle_mapComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'google-map',
                        inputs: google_mapMetaData.PROPERTIES,
                        outputs: google_mapMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtGoogle_mapComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtGoogle_mapComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtGoogle_mapComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ratingMetaData = /** @class */ (function () {
        function ratingMetaData() {
        }
        ratingMetaData.XTYPE = 'rating';
        ratingMetaData.PROPERTIES = [
            'alwaysOnTop',
            'animate',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'family',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'glyphs',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'limit',
            'listeners',
            'margin',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minimum',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'overStyle',
            'padding',
            'plugins',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'rounding',
            'scale',
            'scrollable',
            'selectedStyle',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'tip',
            'toFrontOnShow',
            'tooltip',
            'tooltipText',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'trackingValue',
            'trackOver',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'value',
            'viewModel',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        ratingMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rating' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rating,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rating,event' },
            { name: 'focusenter', parameters: 'rating,event' },
            { name: 'focusleave', parameters: 'rating,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rating' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        ratingMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return ratingMetaData;
    }());
    var ExtRatingComponent = /** @class */ (function (_super) {
        __extends(ExtRatingComponent, _super);
        function ExtRatingComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, ratingMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtRatingComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(ratingMetaData);
            };
        /**
         * @return {?}
         */
        ExtRatingComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtRatingComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rating',
                        inputs: ratingMetaData.PROPERTIES,
                        outputs: ratingMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtRatingComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtRatingComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtRatingComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var videoMetaData = /** @class */ (function () {
        function videoMetaData() {
        }
        videoMetaData.XTYPE = 'video';
        videoMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoPause',
            'autoResume',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'controller',
            'controls',
            'data',
            'defaultListenerScope',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enableControls',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'left',
            'listeners',
            'loop',
            'margin',
            'maxHeight',
            'maxWidth',
            'media',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'muted',
            'name',
            'nameable',
            'padding',
            'plugins',
            'posterUrl',
            'preload',
            'publishes',
            'record',
            'reference',
            'relative',
            'renderTo',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'showPosterOnPause',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'url',
            'userCls',
            'userSelectable',
            'viewModel',
            'volume',
            'weight',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        videoMetaData.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'video' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'video,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'video,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'video,event' },
            { name: 'focusenter', parameters: 'video,event' },
            { name: 'focusleave', parameters: 'video,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'video,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'video,time' },
            { name: 'play', parameters: 'video' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'video' },
            { name: 'timeupdate', parameters: 'video,time' },
            { name: 'tofront', parameters: 'video' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'video,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        videoMetaData.EVENTNAMES = [
            'added',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'destroy',
            'disabledchange',
            'dockedchange',
            'ended',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'moved',
            'mutedchange',
            'orientationchange',
            'painted',
            'pause',
            'play',
            'positionedchange',
            'removed',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'stop',
            'timeupdate',
            'tofront',
            'topchange',
            'updatedata',
            'volumechange',
            'widthchange',
            'ready'
        ];
        return videoMetaData;
    }());
    var ExtVideoComponent = /** @class */ (function (_super) {
        __extends(ExtVideoComponent, _super);
        function ExtVideoComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, videoMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtVideoComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(videoMetaData);
            };
        /**
         * @return {?}
         */
        ExtVideoComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtVideoComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'video',
                        inputs: videoMetaData.PROPERTIES,
                        outputs: videoMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtVideoComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtVideoComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtVideoComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var viewportMetaData = /** @class */ (function () {
        function viewportMetaData() {
        }
        viewportMetaData.XTYPE = 'viewport';
        viewportMetaData.PROPERTIES = [
            'activeChildTabIndex',
            'activeItem',
            'allowFocusingDisabledChildren',
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'autoBlurInput',
            'autoDestroy',
            'autoMaximize',
            'autoRender',
            'autoSize',
            'axisLock',
            'bind',
            'border',
            'bottom',
            'cardSwitchAnimation',
            'centered',
            'cls',
            'constrainAlign',
            'contentEl',
            'control',
            'controller',
            'data',
            'defaultFocus',
            'defaultListenerScope',
            'defaults',
            'defaultType',
            'disabled',
            'displayed',
            'docked',
            'draggable',
            'enterAnimation',
            'eventHandlers',
            'exitAnimation',
            'flex',
            'floated',
            'focusableContainer',
            'focusCls',
            'fullscreen',
            'height',
            'hidden',
            'hideAnimation',
            'hideMode',
            'hideOnMaskTap',
            'html',
            'id',
            'inactiveChildTabIndex',
            'innerCls',
            'instanceCls',
            'itemId',
            'items',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'layout',
            'left',
            'listeners',
            'manageBorders',
            'margin',
            'masked',
            'maxHeight',
            'maxWidth',
            'menus',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'name',
            'nameable',
            'nameHolder',
            'orientation',
            'padding',
            'plugins',
            'preventZooming',
            'publishes',
            'record',
            'reference',
            'referenceHolder',
            'relative',
            'renderTo',
            'resetFocusPosition',
            'right',
            'ripple',
            'scrollable',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'showAnimation',
            'stateful',
            'statefulDefaults',
            'stateId',
            'style',
            'swipeThreshold',
            'tabIndex',
            'toFrontOnShow',
            'tooltip',
            'top',
            'touchAction',
            'tpl',
            'tplWriteMode',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'userSelectable',
            'viewModel',
            'weight',
            'weighted',
            'width',
            'x',
            'xtype',
            'y',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        viewportMetaData.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,viewport,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'viewport,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'viewport' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'viewport,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,viewport,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'viewport,event' },
            { name: 'focusenter', parameters: 'viewport,event' },
            { name: 'focusleave', parameters: 'viewport,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'viewport' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'viewport,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: 'viewport,newOrientation,width,height' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'ready', parameters: 'viewport' },
            { name: 'remove', parameters: 'viewport,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'viewport,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'viewport' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        viewportMetaData.EVENTNAMES = [
            'activate',
            'activeItemchange',
            'add',
            'added',
            'beforeactiveItemchange',
            'beforebottomchange',
            'beforecenteredchange',
            'beforedisabledchange',
            'beforedockedchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforehide',
            'beforeleftchange',
            'beforemaxHeightchange',
            'beforemaxWidthchange',
            'beforeminHeightchange',
            'beforeminWidthchange',
            'beforeorientationchange',
            'beforerightchange',
            'beforescrollablechange',
            'beforeshow',
            'beforetofront',
            'beforetopchange',
            'beforewidthchange',
            'blur',
            'bottomchange',
            'centeredchange',
            'deactivate',
            'destroy',
            'disabledchange',
            'dockedchange',
            'erased',
            'floatingchange',
            'focus',
            'focusenter',
            'focusleave',
            'fullscreen',
            'heightchange',
            'hiddenchange',
            'hide',
            'initialize',
            'leftchange',
            'maxHeightchange',
            'maximize',
            'maxWidthchange',
            'minHeightchange',
            'minWidthchange',
            'move',
            'moved',
            'orientationchange',
            'painted',
            'positionedchange',
            'ready',
            'remove',
            'removed',
            'renderedchange',
            'resize',
            'rightchange',
            'scrollablechange',
            'show',
            'tofront',
            'topchange',
            'updatedata',
            'widthchange',
            'ready'
        ];
        return viewportMetaData;
    }());
    var ExtViewportComponent = /** @class */ (function (_super) {
        __extends(ExtViewportComponent, _super);
        function ExtViewportComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, viewportMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtViewportComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(viewportMetaData);
            };
        /**
         * @return {?}
         */
        ExtViewportComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtViewportComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'viewport',
                        inputs: viewportMetaData.PROPERTIES,
                        outputs: viewportMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtViewportComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtViewportComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtViewportComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var widgetMetaData = /** @class */ (function () {
        function widgetMetaData() {
        }
        widgetMetaData.XTYPE = 'widget';
        widgetMetaData.PROPERTIES = [
            'alwaysOnTop',
            'ariaAttributes',
            'ariaDescribedBy',
            'ariaLabel',
            'ariaLabelledBy',
            'bind',
            'border',
            'cls',
            'constrainAlign',
            'controller',
            'defaultListenerScope',
            'disabled',
            'eventHandlers',
            'flex',
            'floated',
            'focusCls',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'keyMap',
            'keyMapEnabled',
            'keyMapTarget',
            'listeners',
            'name',
            'nameable',
            'plugins',
            'publishes',
            'reference',
            'relative',
            'renderTo',
            'ripple',
            'selfAlign',
            'session',
            'shadow',
            'shareableName',
            'shim',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'twoWayBindable',
            'ui',
            'userCls',
            'viewModel',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'align',
            'fitToParent',
            'config'
        ];
        widgetMetaData.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'widget' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'widget,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'widget,event' },
            { name: 'focusenter', parameters: 'widget,event' },
            { name: 'focusleave', parameters: 'widget,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'widget' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        widgetMetaData.EVENTNAMES = [
            'beforedisabledchange',
            'beforeheightchange',
            'beforehiddenchange',
            'beforetofront',
            'beforewidthchange',
            'blur',
            'disabledchange',
            'focus',
            'focusenter',
            'focusleave',
            'heightchange',
            'hiddenchange',
            'tofront',
            'widthchange',
            'ready'
        ];
        return widgetMetaData;
    }());
    var ExtWidgetComponent = /** @class */ (function (_super) {
        __extends(ExtWidgetComponent, _super);
        function ExtWidgetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef.nativeElement, widgetMetaData, hostComponent) || this;
            _this.hostComponent = hostComponent;
            return _this;
        }
        /**
         * @return {?}
         */
        ExtWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.baseOnInit(widgetMetaData);
            };
        /**
         * @return {?}
         */
        ExtWidgetComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.baseAfterContentInit();
                //this['ready'].emit(this)
            };
        ExtWidgetComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'widget',
                        inputs: widgetMetaData.PROPERTIES,
                        outputs: widgetMetaData.EVENTNAMES,
                        providers: [{ provide: base, useExisting: i0.forwardRef(( /**
                                         * @return {?}
                                         */function () { return ExtWidgetComponent; })) }],
                        template: '<ng-template></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        ExtWidgetComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: base, decorators: [{ type: i0.Host }, { type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return ExtWidgetComponent;
    }(base));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtAngularModule = /** @class */ (function () {
        function ExtAngularModule() {
        }
        ExtAngularModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [],
                        declarations: [
                            ExtAngularBootstrapComponent,
                            ExtActionsheetComponent,
                            ExtAudioComponent,
                            ExtButtonComponent,
                            ExtCalendar_eventComponent,
                            ExtCalendar_form_addComponent,
                            ExtCalendar_calendar_pickerComponent,
                            ExtCalendar_form_editComponent,
                            ExtCalendar_timefieldComponent,
                            ExtCalendar_daysheaderComponent,
                            ExtCalendar_weeksheaderComponent,
                            ExtCalendar_listComponent,
                            ExtCalendar_dayComponent,
                            ExtCalendar_daysComponent,
                            ExtCalendar_monthComponent,
                            ExtCalendarComponent,
                            ExtCalendar_weekComponent,
                            ExtCalendar_weeksComponent,
                            ExtCalendar_dayviewComponent,
                            ExtCalendar_daysviewComponent,
                            ExtCalendar_monthviewComponent,
                            ExtCalendar_multiviewComponent,
                            ExtCalendar_weekviewComponent,
                            ExtCalendar_weeksviewComponent,
                            ExtCarouselComponent,
                            ExtAxis3dComponent,
                            ExtCartesianComponent,
                            ExtChartComponent,
                            ExtInteractionComponent,
                            ExtLegendComponent,
                            ExtChartnavigatorComponent,
                            ExtPolarComponent,
                            ExtSpacefillingComponent,
                            ExtChipComponent,
                            ExtComponentComponent,
                            ExtContainerComponent,
                            ExtD3_canvasComponent,
                            ExtD3_heatmapComponent,
                            ExtD3_packComponent,
                            ExtD3_partitionComponent,
                            ExtD3_sunburstComponent,
                            ExtD3_treeComponent,
                            ExtD3_horizontal_treeComponent,
                            ExtD3_treemapComponent,
                            ExtD3_svgComponent,
                            ExtD3Component,
                            ExtBoundlistComponent,
                            ExtChipviewComponent,
                            ExtComponentdataviewComponent,
                            ExtDataitemComponent,
                            ExtDataviewComponent,
                            ExtEmptytextComponent,
                            ExtIndexbarComponent,
                            ExtItemheaderComponent,
                            ExtListComponent,
                            ExtListitemComponent,
                            ExtListswiperitemComponent,
                            ExtListswiperstepperComponent,
                            ExtNestedlistComponent,
                            ExtPullrefreshbarComponent,
                            ExtPullrefreshspinnerComponent,
                            ExtSimplelistitemComponent,
                            ExtDialogComponent,
                            ExtWindowComponent,
                            ExtDrawComponent,
                            ExtSurfaceComponent,
                            ExtEditorComponent,
                            ExtCheckboxComponent,
                            ExtCheckboxfieldComponent,
                            ExtComboboxComponent,
                            ExtComboboxfieldComponent,
                            ExtContainerfieldComponent,
                            ExtFieldcontainerComponent,
                            ExtDatefieldComponent,
                            ExtDatepickerfieldComponent,
                            ExtDatepickernativefieldComponent,
                            ExtDisplayfieldComponent,
                            ExtEmailfieldComponent,
                            ExtFieldComponent,
                            ExtFilefieldComponent,
                            ExtFilebuttonComponent,
                            ExtHiddenfieldComponent,
                            ExtInputfieldComponent,
                            ExtNumberfieldComponent,
                            ExtFieldpanelComponent,
                            ExtPasswordfieldComponent,
                            ExtPickerfieldComponent,
                            ExtRadioComponent,
                            ExtRadiofieldComponent,
                            ExtSearchfieldComponent,
                            ExtSelectfieldComponent,
                            ExtSinglesliderfieldComponent,
                            ExtSliderfieldComponent,
                            ExtSpinnerfieldComponent,
                            ExtTextfieldComponent,
                            ExtTextareafieldComponent,
                            ExtTimefieldComponent,
                            ExtTogglefieldComponent,
                            ExtCleartriggerComponent,
                            ExtDatetriggerComponent,
                            ExtExpandtriggerComponent,
                            ExtMenutriggerComponent,
                            ExtRevealtriggerComponent,
                            ExtSpindowntriggerComponent,
                            ExtSpinuptriggerComponent,
                            ExtTimetriggerComponent,
                            ExtTriggerComponent,
                            ExtUrlfieldComponent,
                            ExtFieldsetComponent,
                            ExtFormpanelComponent,
                            ExtGridcellbaseComponent,
                            ExtBooleancellComponent,
                            ExtGridcellComponent,
                            ExtCheckcellComponent,
                            ExtDatecellComponent,
                            ExtNumbercellComponent,
                            ExtRownumberercellComponent,
                            ExtTextcellComponent,
                            ExtTreecellComponent,
                            ExtWidgetcellComponent,
                            ExtCelleditorComponent,
                            ExtBooleancolumnComponent,
                            ExtCheckcolumnComponent,
                            ExtGridcolumnComponent,
                            ExtColumnComponent,
                            ExtTemplatecolumnComponent,
                            ExtDatecolumnComponent,
                            ExtNumbercolumnComponent,
                            ExtRownumbererComponent,
                            ExtSelectioncolumnComponent,
                            ExtTextcolumnComponent,
                            ExtTreecolumnComponent,
                            ExtGridComponent,
                            ExtHeadercontainerComponent,
                            ExtLockedgridComponent,
                            ExtLockedgridregionComponent,
                            ExtGridcolumnsmenuComponent,
                            ExtGridgroupbythismenuitemComponent,
                            ExtGridshowingroupsmenuitemComponent,
                            ExtGridsortascmenuitemComponent,
                            ExtGridsortdescmenuitemComponent,
                            ExtPagingtoolbarComponent,
                            ExtGridrowComponent,
                            ExtRowbodyComponent,
                            ExtRowheaderComponent,
                            ExtGridsummaryrowComponent,
                            ExtTreeComponent,
                            ExtImageComponent,
                            ExtImgComponent,
                            ExtIndicatorComponent,
                            ExtLabelComponent,
                            ExtTreelistComponent,
                            ExtTreelistitemComponent,
                            ExtLoadmaskComponent,
                            ExtMaskComponent,
                            ExtMediaComponent,
                            ExtMenucheckitemComponent,
                            ExtMenuitemComponent,
                            ExtMenuComponent,
                            ExtMenuradioitemComponent,
                            ExtMenuseparatorComponent,
                            ExtMessageboxComponent,
                            ExtNavigationviewComponent,
                            ExtPanelComponent,
                            ExtDatepanelComponent,
                            ExtDatetitleComponent,
                            ExtPanelheaderComponent,
                            ExtTimepanelComponent,
                            ExtPaneltitleComponent,
                            ExtYearpickerComponent,
                            ExtDatepickerComponent,
                            ExtPickerComponent,
                            ExtSelectpickerComponent,
                            ExtPickerslotComponent,
                            ExtTabletpickerComponent,
                            ExtPivotgridcellComponent,
                            ExtPivotgridgroupcellComponent,
                            ExtPivotd3containerComponent,
                            ExtPivotheatmapComponent,
                            ExtPivottreemapComponent,
                            ExtPivotgridComponent,
                            ExtPivotconfigfieldComponent,
                            ExtPivotconfigcontainerComponent,
                            ExtPivotconfigformComponent,
                            ExtPivotconfigpanelComponent,
                            ExtPivotsettingsComponent,
                            ExtPivotrangeeditorComponent,
                            ExtPivotgridrowComponent,
                            ExtProgressComponent,
                            ExtProgressbarwidgetComponent,
                            ExtSegmentedbuttonComponent,
                            ExtSheetComponent,
                            ExtSliderComponent,
                            ExtThumbComponent,
                            ExtTogglesliderComponent,
                            ExtSpacerComponent,
                            ExtSparklinebarComponent,
                            ExtSparklineComponent,
                            ExtSparklineboxComponent,
                            ExtSparklinebulletComponent,
                            ExtSparklinediscreteComponent,
                            ExtSparklinelineComponent,
                            ExtSparklinepieComponent,
                            ExtSparklinetristateComponent,
                            ExtSplitbuttonComponent,
                            ExtTabbarComponent,
                            ExtTabpanelComponent,
                            ExtTabComponent,
                            ExtTooltipComponent,
                            ExtTitleComponent,
                            ExtTitlebarComponent,
                            ExtToolComponent,
                            ExtPaneltoolComponent,
                            ExtToolbarComponent,
                            ExtColorbuttonComponent,
                            ExtColorpickercolorpreviewComponent,
                            ExtColorfieldComponent,
                            ExtColorselectorComponent,
                            ExtGaugeComponent,
                            ExtMapComponent,
                            ExtGoogle_mapComponent,
                            ExtRatingComponent,
                            ExtVideoComponent,
                            ExtViewportComponent,
                            ExtWidgetComponent
                        ],
                        providers: [],
                        entryComponents: [],
                        exports: [
                            ExtAngularBootstrapComponent,
                            ExtActionsheetComponent,
                            ExtAudioComponent,
                            ExtButtonComponent,
                            ExtCalendar_eventComponent,
                            ExtCalendar_form_addComponent,
                            ExtCalendar_calendar_pickerComponent,
                            ExtCalendar_form_editComponent,
                            ExtCalendar_timefieldComponent,
                            ExtCalendar_daysheaderComponent,
                            ExtCalendar_weeksheaderComponent,
                            ExtCalendar_listComponent,
                            ExtCalendar_dayComponent,
                            ExtCalendar_daysComponent,
                            ExtCalendar_monthComponent,
                            ExtCalendarComponent,
                            ExtCalendar_weekComponent,
                            ExtCalendar_weeksComponent,
                            ExtCalendar_dayviewComponent,
                            ExtCalendar_daysviewComponent,
                            ExtCalendar_monthviewComponent,
                            ExtCalendar_multiviewComponent,
                            ExtCalendar_weekviewComponent,
                            ExtCalendar_weeksviewComponent,
                            ExtCarouselComponent,
                            ExtAxis3dComponent,
                            ExtCartesianComponent,
                            ExtChartComponent,
                            ExtInteractionComponent,
                            ExtLegendComponent,
                            ExtChartnavigatorComponent,
                            ExtPolarComponent,
                            ExtSpacefillingComponent,
                            ExtChipComponent,
                            ExtComponentComponent,
                            ExtContainerComponent,
                            ExtD3_canvasComponent,
                            ExtD3_heatmapComponent,
                            ExtD3_packComponent,
                            ExtD3_partitionComponent,
                            ExtD3_sunburstComponent,
                            ExtD3_treeComponent,
                            ExtD3_horizontal_treeComponent,
                            ExtD3_treemapComponent,
                            ExtD3_svgComponent,
                            ExtD3Component,
                            ExtBoundlistComponent,
                            ExtChipviewComponent,
                            ExtComponentdataviewComponent,
                            ExtDataitemComponent,
                            ExtDataviewComponent,
                            ExtEmptytextComponent,
                            ExtIndexbarComponent,
                            ExtItemheaderComponent,
                            ExtListComponent,
                            ExtListitemComponent,
                            ExtListswiperitemComponent,
                            ExtListswiperstepperComponent,
                            ExtNestedlistComponent,
                            ExtPullrefreshbarComponent,
                            ExtPullrefreshspinnerComponent,
                            ExtSimplelistitemComponent,
                            ExtDialogComponent,
                            ExtWindowComponent,
                            ExtDrawComponent,
                            ExtSurfaceComponent,
                            ExtEditorComponent,
                            ExtCheckboxComponent,
                            ExtCheckboxfieldComponent,
                            ExtComboboxComponent,
                            ExtComboboxfieldComponent,
                            ExtContainerfieldComponent,
                            ExtFieldcontainerComponent,
                            ExtDatefieldComponent,
                            ExtDatepickerfieldComponent,
                            ExtDatepickernativefieldComponent,
                            ExtDisplayfieldComponent,
                            ExtEmailfieldComponent,
                            ExtFieldComponent,
                            ExtFilefieldComponent,
                            ExtFilebuttonComponent,
                            ExtHiddenfieldComponent,
                            ExtInputfieldComponent,
                            ExtNumberfieldComponent,
                            ExtFieldpanelComponent,
                            ExtPasswordfieldComponent,
                            ExtPickerfieldComponent,
                            ExtRadioComponent,
                            ExtRadiofieldComponent,
                            ExtSearchfieldComponent,
                            ExtSelectfieldComponent,
                            ExtSinglesliderfieldComponent,
                            ExtSliderfieldComponent,
                            ExtSpinnerfieldComponent,
                            ExtTextfieldComponent,
                            ExtTextareafieldComponent,
                            ExtTimefieldComponent,
                            ExtTogglefieldComponent,
                            ExtCleartriggerComponent,
                            ExtDatetriggerComponent,
                            ExtExpandtriggerComponent,
                            ExtMenutriggerComponent,
                            ExtRevealtriggerComponent,
                            ExtSpindowntriggerComponent,
                            ExtSpinuptriggerComponent,
                            ExtTimetriggerComponent,
                            ExtTriggerComponent,
                            ExtUrlfieldComponent,
                            ExtFieldsetComponent,
                            ExtFormpanelComponent,
                            ExtGridcellbaseComponent,
                            ExtBooleancellComponent,
                            ExtGridcellComponent,
                            ExtCheckcellComponent,
                            ExtDatecellComponent,
                            ExtNumbercellComponent,
                            ExtRownumberercellComponent,
                            ExtTextcellComponent,
                            ExtTreecellComponent,
                            ExtWidgetcellComponent,
                            ExtCelleditorComponent,
                            ExtBooleancolumnComponent,
                            ExtCheckcolumnComponent,
                            ExtGridcolumnComponent,
                            ExtColumnComponent,
                            ExtTemplatecolumnComponent,
                            ExtDatecolumnComponent,
                            ExtNumbercolumnComponent,
                            ExtRownumbererComponent,
                            ExtSelectioncolumnComponent,
                            ExtTextcolumnComponent,
                            ExtTreecolumnComponent,
                            ExtGridComponent,
                            ExtHeadercontainerComponent,
                            ExtLockedgridComponent,
                            ExtLockedgridregionComponent,
                            ExtGridcolumnsmenuComponent,
                            ExtGridgroupbythismenuitemComponent,
                            ExtGridshowingroupsmenuitemComponent,
                            ExtGridsortascmenuitemComponent,
                            ExtGridsortdescmenuitemComponent,
                            ExtPagingtoolbarComponent,
                            ExtGridrowComponent,
                            ExtRowbodyComponent,
                            ExtRowheaderComponent,
                            ExtGridsummaryrowComponent,
                            ExtTreeComponent,
                            ExtImageComponent,
                            ExtImgComponent,
                            ExtIndicatorComponent,
                            ExtLabelComponent,
                            ExtTreelistComponent,
                            ExtTreelistitemComponent,
                            ExtLoadmaskComponent,
                            ExtMaskComponent,
                            ExtMediaComponent,
                            ExtMenucheckitemComponent,
                            ExtMenuitemComponent,
                            ExtMenuComponent,
                            ExtMenuradioitemComponent,
                            ExtMenuseparatorComponent,
                            ExtMessageboxComponent,
                            ExtNavigationviewComponent,
                            ExtPanelComponent,
                            ExtDatepanelComponent,
                            ExtDatetitleComponent,
                            ExtPanelheaderComponent,
                            ExtTimepanelComponent,
                            ExtPaneltitleComponent,
                            ExtYearpickerComponent,
                            ExtDatepickerComponent,
                            ExtPickerComponent,
                            ExtSelectpickerComponent,
                            ExtPickerslotComponent,
                            ExtTabletpickerComponent,
                            ExtPivotgridcellComponent,
                            ExtPivotgridgroupcellComponent,
                            ExtPivotd3containerComponent,
                            ExtPivotheatmapComponent,
                            ExtPivottreemapComponent,
                            ExtPivotgridComponent,
                            ExtPivotconfigfieldComponent,
                            ExtPivotconfigcontainerComponent,
                            ExtPivotconfigformComponent,
                            ExtPivotconfigpanelComponent,
                            ExtPivotsettingsComponent,
                            ExtPivotrangeeditorComponent,
                            ExtPivotgridrowComponent,
                            ExtProgressComponent,
                            ExtProgressbarwidgetComponent,
                            ExtSegmentedbuttonComponent,
                            ExtSheetComponent,
                            ExtSliderComponent,
                            ExtThumbComponent,
                            ExtTogglesliderComponent,
                            ExtSpacerComponent,
                            ExtSparklinebarComponent,
                            ExtSparklineComponent,
                            ExtSparklineboxComponent,
                            ExtSparklinebulletComponent,
                            ExtSparklinediscreteComponent,
                            ExtSparklinelineComponent,
                            ExtSparklinepieComponent,
                            ExtSparklinetristateComponent,
                            ExtSplitbuttonComponent,
                            ExtTabbarComponent,
                            ExtTabpanelComponent,
                            ExtTabComponent,
                            ExtTooltipComponent,
                            ExtTitleComponent,
                            ExtTitlebarComponent,
                            ExtToolComponent,
                            ExtPaneltoolComponent,
                            ExtToolbarComponent,
                            ExtColorbuttonComponent,
                            ExtColorpickercolorpreviewComponent,
                            ExtColorfieldComponent,
                            ExtColorselectorComponent,
                            ExtGaugeComponent,
                            ExtMapComponent,
                            ExtGoogle_mapComponent,
                            ExtRatingComponent,
                            ExtVideoComponent,
                            ExtViewportComponent,
                            ExtWidgetComponent
                        ]
                    },] }
        ];
        return ExtAngularModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ExtAngularModule = ExtAngularModule;
    exports.ɵe = base;
    exports.ɵd = ExtActionsheetComponent;
    exports.ɵc = actionsheetMetaData;
    exports.ɵa = ExtAngularBootstrapComponent;
    exports.ɵb = ExtAngularBootstrapService;
    exports.ɵg = ExtAudioComponent;
    exports.ɵf = audioMetaData;
    exports.ɵca = ExtAxis3dComponent;
    exports.ɵbz = axis3dMetaData;
    exports.ɵiq = ExtBooleancellComponent;
    exports.ɵip = booleancellMetaData;
    exports.ɵjk = ExtBooleancolumnComponent;
    exports.ɵjj = booleancolumnMetaData;
    exports.ɵdq = ExtBoundlistComponent;
    exports.ɵdp = boundlistMetaData;
    exports.ɵi = ExtButtonComponent;
    exports.ɵh = buttonMetaData;
    exports.ɵo = ExtCalendar_calendar_pickerComponent;
    exports.ɵn = calendar_calendar_pickerMetaData;
    exports.ɵba = ExtCalendar_dayComponent;
    exports.ɵz = calendar_dayMetaData;
    exports.ɵbc = ExtCalendar_daysComponent;
    exports.ɵbb = calendar_daysMetaData;
    exports.ɵu = ExtCalendar_daysheaderComponent;
    exports.ɵt = calendar_daysheaderMetaData;
    exports.ɵbo = ExtCalendar_daysviewComponent;
    exports.ɵbn = calendar_daysviewMetaData;
    exports.ɵbm = ExtCalendar_dayviewComponent;
    exports.ɵbl = calendar_dayviewMetaData;
    exports.ɵk = ExtCalendar_eventComponent;
    exports.ɵj = calendar_eventMetaData;
    exports.ɵm = ExtCalendar_form_addComponent;
    exports.ɵl = calendar_form_addMetaData;
    exports.ɵq = ExtCalendar_form_editComponent;
    exports.ɵp = calendar_form_editMetaData;
    exports.ɵy = ExtCalendar_listComponent;
    exports.ɵx = calendar_listMetaData;
    exports.ɵbe = ExtCalendar_monthComponent;
    exports.ɵbd = calendar_monthMetaData;
    exports.ɵbq = ExtCalendar_monthviewComponent;
    exports.ɵbp = calendar_monthviewMetaData;
    exports.ɵbs = ExtCalendar_multiviewComponent;
    exports.ɵbr = calendar_multiviewMetaData;
    exports.ɵs = ExtCalendar_timefieldComponent;
    exports.ɵr = calendar_timefieldMetaData;
    exports.ɵbi = ExtCalendar_weekComponent;
    exports.ɵbh = calendar_weekMetaData;
    exports.ɵbk = ExtCalendar_weeksComponent;
    exports.ɵbj = calendar_weeksMetaData;
    exports.ɵw = ExtCalendar_weeksheaderComponent;
    exports.ɵv = calendar_weeksheaderMetaData;
    exports.ɵbw = ExtCalendar_weeksviewComponent;
    exports.ɵbv = calendar_weeksviewMetaData;
    exports.ɵbu = ExtCalendar_weekviewComponent;
    exports.ɵbt = calendar_weekviewMetaData;
    exports.ɵbg = ExtCalendarComponent;
    exports.ɵbf = calendarMetaData;
    exports.ɵby = ExtCarouselComponent;
    exports.ɵbx = carouselMetaData;
    exports.ɵcc = ExtCartesianComponent;
    exports.ɵcb = cartesianMetaData;
    exports.ɵji = ExtCelleditorComponent;
    exports.ɵjh = celleditorMetaData;
    exports.ɵce = ExtChartComponent;
    exports.ɵcd = chartMetaData;
    exports.ɵck = ExtChartnavigatorComponent;
    exports.ɵcj = chartnavigatorMetaData;
    exports.ɵfg = ExtCheckboxComponent;
    exports.ɵff = checkboxMetaData;
    exports.ɵfi = ExtCheckboxfieldComponent;
    exports.ɵfh = checkboxfieldMetaData;
    exports.ɵiu = ExtCheckcellComponent;
    exports.ɵit = checkcellMetaData;
    exports.ɵjm = ExtCheckcolumnComponent;
    exports.ɵjl = checkcolumnMetaData;
    exports.ɵcq = ExtChipComponent;
    exports.ɵcp = chipMetaData;
    exports.ɵds = ExtChipviewComponent;
    exports.ɵdr = chipviewMetaData;
    exports.ɵhq = ExtCleartriggerComponent;
    exports.ɵhp = cleartriggerMetaData;
    exports.ɵqo = ExtColorbuttonComponent;
    exports.ɵqn = colorbuttonMetaData;
    exports.ɵqs = ExtColorfieldComponent;
    exports.ɵqr = colorfieldMetaData;
    exports.ɵqq = ExtColorpickercolorpreviewComponent;
    exports.ɵqp = colorpickercolorpreviewMetaData;
    exports.ɵqu = ExtColorselectorComponent;
    exports.ɵqt = colorselectorMetaData;
    exports.ɵjq = ExtColumnComponent;
    exports.ɵjp = columnMetaData;
    exports.ɵfk = ExtComboboxComponent;
    exports.ɵfj = comboboxMetaData;
    exports.ɵfm = ExtComboboxfieldComponent;
    exports.ɵfl = comboboxfieldMetaData;
    exports.ɵcs = ExtComponentComponent;
    exports.ɵcr = componentMetaData;
    exports.ɵdu = ExtComponentdataviewComponent;
    exports.ɵdt = componentdataviewMetaData;
    exports.ɵcu = ExtContainerComponent;
    exports.ɵct = containerMetaData;
    exports.ɵfo = ExtContainerfieldComponent;
    exports.ɵfn = containerfieldMetaData;
    exports.ɵcw = ExtD3_canvasComponent;
    exports.ɵcv = d3_canvasMetaData;
    exports.ɵcy = ExtD3_heatmapComponent;
    exports.ɵcx = d3_heatmapMetaData;
    exports.ɵdi = ExtD3_horizontal_treeComponent;
    exports.ɵdh = d3_horizontal_treeMetaData;
    exports.ɵda = ExtD3_packComponent;
    exports.ɵcz = d3_packMetaData;
    exports.ɵdc = ExtD3_partitionComponent;
    exports.ɵdb = d3_partitionMetaData;
    exports.ɵde = ExtD3_sunburstComponent;
    exports.ɵdd = d3_sunburstMetaData;
    exports.ɵdm = ExtD3_svgComponent;
    exports.ɵdl = d3_svgMetaData;
    exports.ɵdg = ExtD3_treeComponent;
    exports.ɵdf = d3_treeMetaData;
    exports.ɵdk = ExtD3_treemapComponent;
    exports.ɵdj = d3_treemapMetaData;
    exports.ɵdo = ExtD3Component;
    exports.ɵdn = d3MetaData;
    exports.ɵdw = ExtDataitemComponent;
    exports.ɵdv = dataitemMetaData;
    exports.ɵdy = ExtDataviewComponent;
    exports.ɵdx = dataviewMetaData;
    exports.ɵiw = ExtDatecellComponent;
    exports.ɵiv = datecellMetaData;
    exports.ɵju = ExtDatecolumnComponent;
    exports.ɵjt = datecolumnMetaData;
    exports.ɵfs = ExtDatefieldComponent;
    exports.ɵfr = datefieldMetaData;
    exports.ɵms = ExtDatepanelComponent;
    exports.ɵmr = datepanelMetaData;
    exports.ɵne = ExtDatepickerComponent;
    exports.ɵnd = datepickerMetaData;
    exports.ɵfu = ExtDatepickerfieldComponent;
    exports.ɵft = datepickerfieldMetaData;
    exports.ɵfw = ExtDatepickernativefieldComponent;
    exports.ɵfv = datepickernativefieldMetaData;
    exports.ɵmu = ExtDatetitleComponent;
    exports.ɵmt = datetitleMetaData;
    exports.ɵhs = ExtDatetriggerComponent;
    exports.ɵhr = datetriggerMetaData;
    exports.ɵew = ExtDialogComponent;
    exports.ɵev = dialogMetaData;
    exports.ɵfy = ExtDisplayfieldComponent;
    exports.ɵfx = displayfieldMetaData;
    exports.ɵfa = ExtDrawComponent;
    exports.ɵez = drawMetaData;
    exports.ɵfe = ExtEditorComponent;
    exports.ɵfd = editorMetaData;
    exports.ɵga = ExtEmailfieldComponent;
    exports.ɵfz = emailfieldMetaData;
    exports.ɵea = ExtEmptytextComponent;
    exports.ɵdz = emptytextMetaData;
    exports.ɵhu = ExtExpandtriggerComponent;
    exports.ɵht = expandtriggerMetaData;
    exports.ɵgc = ExtFieldComponent;
    exports.ɵgb = fieldMetaData;
    exports.ɵfq = ExtFieldcontainerComponent;
    exports.ɵfp = fieldcontainerMetaData;
    exports.ɵgo = ExtFieldpanelComponent;
    exports.ɵgn = fieldpanelMetaData;
    exports.ɵik = ExtFieldsetComponent;
    exports.ɵij = fieldsetMetaData;
    exports.ɵgg = ExtFilebuttonComponent;
    exports.ɵgf = filebuttonMetaData;
    exports.ɵge = ExtFilefieldComponent;
    exports.ɵgd = filefieldMetaData;
    exports.ɵim = ExtFormpanelComponent;
    exports.ɵil = formpanelMetaData;
    exports.ɵqw = ExtGaugeComponent;
    exports.ɵqv = gaugeMetaData;
    exports.ɵra = ExtGoogle_mapComponent;
    exports.ɵqz = google_mapMetaData;
    exports.ɵkg = ExtGridComponent;
    exports.ɵkf = gridMetaData;
    exports.ɵis = ExtGridcellComponent;
    exports.ɵir = gridcellMetaData;
    exports.ɵio = ExtGridcellbaseComponent;
    exports.ɵin = gridcellbaseMetaData;
    exports.ɵjo = ExtGridcolumnComponent;
    exports.ɵjn = gridcolumnMetaData;
    exports.ɵko = ExtGridcolumnsmenuComponent;
    exports.ɵkn = gridcolumnsmenuMetaData;
    exports.ɵkq = ExtGridgroupbythismenuitemComponent;
    exports.ɵkp = gridgroupbythismenuitemMetaData;
    exports.ɵla = ExtGridrowComponent;
    exports.ɵkz = gridrowMetaData;
    exports.ɵks = ExtGridshowingroupsmenuitemComponent;
    exports.ɵkr = gridshowingroupsmenuitemMetaData;
    exports.ɵku = ExtGridsortascmenuitemComponent;
    exports.ɵkt = gridsortascmenuitemMetaData;
    exports.ɵkw = ExtGridsortdescmenuitemComponent;
    exports.ɵkv = gridsortdescmenuitemMetaData;
    exports.ɵlg = ExtGridsummaryrowComponent;
    exports.ɵlf = gridsummaryrowMetaData;
    exports.ɵki = ExtHeadercontainerComponent;
    exports.ɵkh = headercontainerMetaData;
    exports.ɵgi = ExtHiddenfieldComponent;
    exports.ɵgh = hiddenfieldMetaData;
    exports.ɵlk = ExtImageComponent;
    exports.ɵlj = imageMetaData;
    exports.ɵlm = ExtImgComponent;
    exports.ɵll = imgMetaData;
    exports.ɵec = ExtIndexbarComponent;
    exports.ɵeb = indexbarMetaData;
    exports.ɵlo = ExtIndicatorComponent;
    exports.ɵln = indicatorMetaData;
    exports.ɵgk = ExtInputfieldComponent;
    exports.ɵgj = inputfieldMetaData;
    exports.ɵcg = ExtInteractionComponent;
    exports.ɵcf = interactionMetaData;
    exports.ɵee = ExtItemheaderComponent;
    exports.ɵed = itemheaderMetaData;
    exports.ɵlq = ExtLabelComponent;
    exports.ɵlp = labelMetaData;
    exports.ɵci = ExtLegendComponent;
    exports.ɵch = legendMetaData;
    exports.ɵeg = ExtListComponent;
    exports.ɵef = listMetaData;
    exports.ɵei = ExtListitemComponent;
    exports.ɵeh = listitemMetaData;
    exports.ɵek = ExtListswiperitemComponent;
    exports.ɵej = listswiperitemMetaData;
    exports.ɵem = ExtListswiperstepperComponent;
    exports.ɵel = listswiperstepperMetaData;
    exports.ɵlw = ExtLoadmaskComponent;
    exports.ɵlv = loadmaskMetaData;
    exports.ɵkk = ExtLockedgridComponent;
    exports.ɵkj = lockedgridMetaData;
    exports.ɵkm = ExtLockedgridregionComponent;
    exports.ɵkl = lockedgridregionMetaData;
    exports.ɵqy = ExtMapComponent;
    exports.ɵqx = mapMetaData;
    exports.ɵly = ExtMaskComponent;
    exports.ɵlx = maskMetaData;
    exports.ɵma = ExtMediaComponent;
    exports.ɵlz = mediaMetaData;
    exports.ɵmg = ExtMenuComponent;
    exports.ɵmf = menuMetaData;
    exports.ɵmc = ExtMenucheckitemComponent;
    exports.ɵmb = menucheckitemMetaData;
    exports.ɵme = ExtMenuitemComponent;
    exports.ɵmd = menuitemMetaData;
    exports.ɵmi = ExtMenuradioitemComponent;
    exports.ɵmh = menuradioitemMetaData;
    exports.ɵmk = ExtMenuseparatorComponent;
    exports.ɵmj = menuseparatorMetaData;
    exports.ɵhw = ExtMenutriggerComponent;
    exports.ɵhv = menutriggerMetaData;
    exports.ɵmm = ExtMessageboxComponent;
    exports.ɵml = messageboxMetaData;
    exports.ɵmo = ExtNavigationviewComponent;
    exports.ɵmn = navigationviewMetaData;
    exports.ɵeo = ExtNestedlistComponent;
    exports.ɵen = nestedlistMetaData;
    exports.ɵiy = ExtNumbercellComponent;
    exports.ɵix = numbercellMetaData;
    exports.ɵjw = ExtNumbercolumnComponent;
    exports.ɵjv = numbercolumnMetaData;
    exports.ɵgm = ExtNumberfieldComponent;
    exports.ɵgl = numberfieldMetaData;
    exports.ɵky = ExtPagingtoolbarComponent;
    exports.ɵkx = pagingtoolbarMetaData;
    exports.ɵmq = ExtPanelComponent;
    exports.ɵmp = panelMetaData;
    exports.ɵmw = ExtPanelheaderComponent;
    exports.ɵmv = panelheaderMetaData;
    exports.ɵna = ExtPaneltitleComponent;
    exports.ɵmz = paneltitleMetaData;
    exports.ɵqk = ExtPaneltoolComponent;
    exports.ɵqj = paneltoolMetaData;
    exports.ɵgq = ExtPasswordfieldComponent;
    exports.ɵgp = passwordfieldMetaData;
    exports.ɵng = ExtPickerComponent;
    exports.ɵnf = pickerMetaData;
    exports.ɵgs = ExtPickerfieldComponent;
    exports.ɵgr = pickerfieldMetaData;
    exports.ɵnk = ExtPickerslotComponent;
    exports.ɵnj = pickerslotMetaData;
    exports.ɵoc = ExtPivotconfigcontainerComponent;
    exports.ɵob = pivotconfigcontainerMetaData;
    exports.ɵoa = ExtPivotconfigfieldComponent;
    exports.ɵnz = pivotconfigfieldMetaData;
    exports.ɵoe = ExtPivotconfigformComponent;
    exports.ɵod = pivotconfigformMetaData;
    exports.ɵog = ExtPivotconfigpanelComponent;
    exports.ɵof = pivotconfigpanelMetaData;
    exports.ɵns = ExtPivotd3containerComponent;
    exports.ɵnr = pivotd3containerMetaData;
    exports.ɵny = ExtPivotgridComponent;
    exports.ɵnx = pivotgridMetaData;
    exports.ɵno = ExtPivotgridcellComponent;
    exports.ɵnn = pivotgridcellMetaData;
    exports.ɵnq = ExtPivotgridgroupcellComponent;
    exports.ɵnp = pivotgridgroupcellMetaData;
    exports.ɵom = ExtPivotgridrowComponent;
    exports.ɵol = pivotgridrowMetaData;
    exports.ɵnu = ExtPivotheatmapComponent;
    exports.ɵnt = pivotheatmapMetaData;
    exports.ɵok = ExtPivotrangeeditorComponent;
    exports.ɵoj = pivotrangeeditorMetaData;
    exports.ɵoi = ExtPivotsettingsComponent;
    exports.ɵoh = pivotsettingsMetaData;
    exports.ɵnw = ExtPivottreemapComponent;
    exports.ɵnv = pivottreemapMetaData;
    exports.ɵcm = ExtPolarComponent;
    exports.ɵcl = polarMetaData;
    exports.ɵoo = ExtProgressComponent;
    exports.ɵon = progressMetaData;
    exports.ɵoq = ExtProgressbarwidgetComponent;
    exports.ɵop = progressbarwidgetMetaData;
    exports.ɵeq = ExtPullrefreshbarComponent;
    exports.ɵep = pullrefreshbarMetaData;
    exports.ɵes = ExtPullrefreshspinnerComponent;
    exports.ɵer = pullrefreshspinnerMetaData;
    exports.ɵgu = ExtRadioComponent;
    exports.ɵgt = radioMetaData;
    exports.ɵgw = ExtRadiofieldComponent;
    exports.ɵgv = radiofieldMetaData;
    exports.ɵrc = ExtRatingComponent;
    exports.ɵrb = ratingMetaData;
    exports.ɵhy = ExtRevealtriggerComponent;
    exports.ɵhx = revealtriggerMetaData;
    exports.ɵlc = ExtRowbodyComponent;
    exports.ɵlb = rowbodyMetaData;
    exports.ɵle = ExtRowheaderComponent;
    exports.ɵld = rowheaderMetaData;
    exports.ɵjy = ExtRownumbererComponent;
    exports.ɵjx = rownumbererMetaData;
    exports.ɵja = ExtRownumberercellComponent;
    exports.ɵiz = rownumberercellMetaData;
    exports.ɵgy = ExtSearchfieldComponent;
    exports.ɵgx = searchfieldMetaData;
    exports.ɵos = ExtSegmentedbuttonComponent;
    exports.ɵor = segmentedbuttonMetaData;
    exports.ɵha = ExtSelectfieldComponent;
    exports.ɵgz = selectfieldMetaData;
    exports.ɵka = ExtSelectioncolumnComponent;
    exports.ɵjz = selectioncolumnMetaData;
    exports.ɵni = ExtSelectpickerComponent;
    exports.ɵnh = selectpickerMetaData;
    exports.ɵou = ExtSheetComponent;
    exports.ɵot = sheetMetaData;
    exports.ɵeu = ExtSimplelistitemComponent;
    exports.ɵet = simplelistitemMetaData;
    exports.ɵhc = ExtSinglesliderfieldComponent;
    exports.ɵhb = singlesliderfieldMetaData;
    exports.ɵow = ExtSliderComponent;
    exports.ɵov = sliderMetaData;
    exports.ɵhe = ExtSliderfieldComponent;
    exports.ɵhd = sliderfieldMetaData;
    exports.ɵco = ExtSpacefillingComponent;
    exports.ɵcn = spacefillingMetaData;
    exports.ɵpc = ExtSpacerComponent;
    exports.ɵpb = spacerMetaData;
    exports.ɵpg = ExtSparklineComponent;
    exports.ɵpf = sparklineMetaData;
    exports.ɵpe = ExtSparklinebarComponent;
    exports.ɵpd = sparklinebarMetaData;
    exports.ɵpi = ExtSparklineboxComponent;
    exports.ɵph = sparklineboxMetaData;
    exports.ɵpk = ExtSparklinebulletComponent;
    exports.ɵpj = sparklinebulletMetaData;
    exports.ɵpm = ExtSparklinediscreteComponent;
    exports.ɵpl = sparklinediscreteMetaData;
    exports.ɵpo = ExtSparklinelineComponent;
    exports.ɵpn = sparklinelineMetaData;
    exports.ɵpq = ExtSparklinepieComponent;
    exports.ɵpp = sparklinepieMetaData;
    exports.ɵps = ExtSparklinetristateComponent;
    exports.ɵpr = sparklinetristateMetaData;
    exports.ɵia = ExtSpindowntriggerComponent;
    exports.ɵhz = spindowntriggerMetaData;
    exports.ɵhg = ExtSpinnerfieldComponent;
    exports.ɵhf = spinnerfieldMetaData;
    exports.ɵic = ExtSpinuptriggerComponent;
    exports.ɵib = spinuptriggerMetaData;
    exports.ɵpu = ExtSplitbuttonComponent;
    exports.ɵpt = splitbuttonMetaData;
    exports.ɵfc = ExtSurfaceComponent;
    exports.ɵfb = surfaceMetaData;
    exports.ɵqa = ExtTabComponent;
    exports.ɵpz = tabMetaData;
    exports.ɵpw = ExtTabbarComponent;
    exports.ɵpv = tabbarMetaData;
    exports.ɵnm = ExtTabletpickerComponent;
    exports.ɵnl = tabletpickerMetaData;
    exports.ɵpy = ExtTabpanelComponent;
    exports.ɵpx = tabpanelMetaData;
    exports.ɵjs = ExtTemplatecolumnComponent;
    exports.ɵjr = templatecolumnMetaData;
    exports.ɵhk = ExtTextareafieldComponent;
    exports.ɵhj = textareafieldMetaData;
    exports.ɵjc = ExtTextcellComponent;
    exports.ɵjb = textcellMetaData;
    exports.ɵkc = ExtTextcolumnComponent;
    exports.ɵkb = textcolumnMetaData;
    exports.ɵhi = ExtTextfieldComponent;
    exports.ɵhh = textfieldMetaData;
    exports.ɵoy = ExtThumbComponent;
    exports.ɵox = thumbMetaData;
    exports.ɵhm = ExtTimefieldComponent;
    exports.ɵhl = timefieldMetaData;
    exports.ɵmy = ExtTimepanelComponent;
    exports.ɵmx = timepanelMetaData;
    exports.ɵie = ExtTimetriggerComponent;
    exports.ɵid = timetriggerMetaData;
    exports.ɵqe = ExtTitleComponent;
    exports.ɵqd = titleMetaData;
    exports.ɵqg = ExtTitlebarComponent;
    exports.ɵqf = titlebarMetaData;
    exports.ɵho = ExtTogglefieldComponent;
    exports.ɵhn = togglefieldMetaData;
    exports.ɵpa = ExtTogglesliderComponent;
    exports.ɵoz = togglesliderMetaData;
    exports.ɵqi = ExtToolComponent;
    exports.ɵqh = toolMetaData;
    exports.ɵqm = ExtToolbarComponent;
    exports.ɵql = toolbarMetaData;
    exports.ɵqc = ExtTooltipComponent;
    exports.ɵqb = tooltipMetaData;
    exports.ɵli = ExtTreeComponent;
    exports.ɵlh = treeMetaData;
    exports.ɵje = ExtTreecellComponent;
    exports.ɵjd = treecellMetaData;
    exports.ɵke = ExtTreecolumnComponent;
    exports.ɵkd = treecolumnMetaData;
    exports.ɵls = ExtTreelistComponent;
    exports.ɵlr = treelistMetaData;
    exports.ɵlu = ExtTreelistitemComponent;
    exports.ɵlt = treelistitemMetaData;
    exports.ɵig = ExtTriggerComponent;
    exports.ɵif = triggerMetaData;
    exports.ɵii = ExtUrlfieldComponent;
    exports.ɵih = urlfieldMetaData;
    exports.ɵre = ExtVideoComponent;
    exports.ɵrd = videoMetaData;
    exports.ɵrg = ExtViewportComponent;
    exports.ɵrf = viewportMetaData;
    exports.ɵri = ExtWidgetComponent;
    exports.ɵrh = widgetMetaData;
    exports.ɵjg = ExtWidgetcellComponent;
    exports.ɵjf = widgetcellMetaData;
    exports.ɵey = ExtWindowComponent;
    exports.ɵex = windowMetaData;
    exports.ɵnc = ExtYearpickerComponent;
    exports.ɵnb = yearpickerMetaData;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=sencha-ext-angular.umd.js.map