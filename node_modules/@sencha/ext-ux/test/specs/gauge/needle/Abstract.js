(Ext.isIE9m ? xtopSuite : topSuite)("Ext.ux.gauge.needle.Abstract",
    ['Ext.ux.gauge.*'],
function() {
    var gauge;

    function createGauge(config) {
        config = Ext.apply({
            renderTo: document.body
        }, config);
        gauge = new Ext.ux.gauge.Gauge(config);

        return gauge;
    }
    
    afterEach(function() {
        gauge = Ext.destroy(gauge);
    });

    describe('style', function() {

        // Chrome keeps 'red' as 'red', but converts hexadecimal colors to rgb,
        // Safari converts 'red' to hexadecimal.
        function toRgb(color) {
            if (color.charAt(0) === '#') {
                var parts = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(color),
                    r = parseInt(parts[1], 16),
                    g = parseInt(parts[2], 16),
                    b = parseInt(parts[3], 16);

                color = 'rgb(' + [r, g, b].join(', ') + ')';
            }

            return color;
        }

        it('should be able to use predifined paths', function() {
            createGauge({
                value: 70,
                needle: 'wedge'
            });

            expect(Ext.getClassName(gauge.getNeedle())).toBe('Ext.ux.gauge.needle.Wedge');

            gauge.setNeedle('spike');
            expect(Ext.getClassName(gauge.getNeedle())).toBe('Ext.ux.gauge.needle.Spike');

            gauge.setNeedle('arrow');
            expect(Ext.getClassName(gauge.getNeedle())).toBe('Ext.ux.gauge.needle.Arrow');

            gauge.setNeedle('diamond');
            expect(Ext.getClassName(gauge.getNeedle())).toBe('Ext.ux.gauge.needle.Diamond');
        });

        it('should add/remove styles to/from the needle', function() {
            createGauge({
                value: 70,
                needle: {
                    type: 'arrow',
                    style: {
                        fill: '#ff0000'
                    }
                }
            });

            var needle = gauge.getNeedle(),
                needlePath = needle.getNeedlePath();

            expect(toRgb(needlePath.dom.style['fill'])).toBe('rgb(255, 0, 0)');

            needle.setStyle({ 'fill': '#00ff00' });
            expect(toRgb(needlePath.dom.style['fill'])).toBe('rgb(0, 255, 0)');

            needle.setStyle({
                'stroke': '#000000',
                'stroke-width': '2px'
            });
            expect(toRgb(needlePath.dom.style['stroke'])).toBe('rgb(0, 0, 0)');
            expect(needlePath.dom.style['stroke-width']).toBe('2px');

            needle.setStyle(null);
            expect(needlePath.dom.style['fill']).toBe('');
            expect(needlePath.dom.style['stroke']).toBe('');
            expect(needlePath.dom.style['stroke-width']).toBe('');
        });

        if (Ext.isIE10p) {
            it('should have transform as an attribute to needle group in IE11', function() {
                createGauge({
                    value: 70,
                    needle: 'wedge'
                });

                expect(gauge.getNeedle().getNeedleGroup().getAttribute('transform')).not.toBe(null);
            });
        }
    });
});
