(Ext.isIE9m ? xtopSuite : topSuite)('Ext.ux.gauge.Gauge',
    ['Ext.panel.Panel', 'Ext.layout.*'],
function() {
    var gauge, panel;

    function createGauge(config) {
        gauge = Ext.create(Ext.apply({
            xtype: 'gauge'
        }, config));

        return gauge;
    }

    function createGaugeWithPanel(config) {
        panel = Ext.create({
            xtype: 'panel',
            renderTo: Ext.getBody(),
            width: 200,
            height: 200,
            layout: 'fit',
            items: Ext.apply({
                xtype: 'gauge'
            }, config)
        });
        gauge = panel.items.first();

        return gauge;
    }
    
    afterEach(function() {
        gauge = Ext.destroy(gauge);

        if (panel) {
            Ext.destroy(panel);
        }
    });

    describe('initialize guage component and check its rendering', function() {
        it('should have default values', function() {
            var renderSpy = jasmine.createSpy('render');

            gauge = createGaugeWithPanel({
                listeners: {
                    render: renderSpy
                }
            });

            waitsForSpy(renderSpy);

            runs(function() {
                expect(gauge.getNeedle()).toBe(null);
                expect(gauge.el.component.fxValue).toBe(50);
                expect(gauge.el.dom.textContent).toBe("50.00%");
            });
        });

        it('should render with custom xTemplate', function() {
            var renderSpy = jasmine.createSpy('render');

            gauge = createGaugeWithPanel({
                value: 44,
                listeners: {
                    render: renderSpy
                },
                textTpl: ['<tpl>{value:number("0")}% full</tpl>']
            });

            waitsForSpy(renderSpy);

            runs(function() {
                expect(gauge.getNeedle()).toBe(null);
                expect(gauge.fxValue).toBe(44);
                expect(gauge.el.dom.textContent).toBe("44% full");
            });
        });

        it('should render with custom animation', function() {
            var renderSpy = jasmine.createSpy('render');

            var animationConfig = {
                easing: 'linear',
                duration: 100000
            };

            gauge = createGaugeWithPanel({
                trackStart: 0,
                trackLength: 360,
                value: 20,
                valueStyle: {
                    round: true
                },
                textTpl: 'Loading...',
                animation: animationConfig,
                angleOffset: 36000,
                listeners: {
                    render: renderSpy
                }
            });

            waitsForSpy(renderSpy);

            runs(function() {
                expect(gauge.el.dom.textContent).toBe('Loading...');
                expect(gauge._animation).toMatch(animationConfig);
            });
        });

        it('should render without animations', function() {
            var renderSpy = jasmine.createSpy('render');

            gauge = createGaugeWithPanel({
                value: 56,
                listeners: {
                    render: renderSpy
                },
                animation: false
            });

            waitsForSpy(renderSpy);

            runs(function() {
                expect(gauge._animation.duration).toBe(0);
            });
        });
    });

    describe('checks for value changes', function() {
        it('should not exceed limits', function() {
            createGauge({
                value: 40,
                minValue: 25,
                maxValue: 80
            });

            gauge.setValue(10);
            expect(gauge.getValue()).toBe(25);

            gauge.setValue(55);
            expect(gauge.getValue()).toBe(55);
            
            gauge.setValue(90);
            expect(gauge.getValue()).toBe(80);

        });

        describe('animation checks', function() {
            var animateSpy;

            afterEach(function() {
                animateSpy = null;
            });
            it('should animate on gauge changes value', function() {
                createGauge();
                animateSpy = spyOn(gauge, 'animate');
                
                gauge.setValue(60);
                expect(animateSpy).toHaveBeenCalled();
            });
            it('should not animate on gauge changes value when animation is false', function() {
                createGauge({ animation: false });
                animateSpy = spyOn(gauge, 'animate');
                
                gauge.setValue(60);
                expect(animateSpy).not.toHaveBeenCalled();
            });
        });


        describe('check update trackLength config and error if out of limits', function() {
            beforeEach(function() {
                createGauge();
            });

            it('should have the default value', function() {
                expect(gauge.getTrackLength()).toBe(270);
            });
            it('should update to the required value', function() {
                gauge.setTrackLength(150);
                expect(gauge.getTrackLength()).toBe(150);
            });
            it('should throw errow when out of bounds', function() {
                expect(function() {
                    gauge.setTrackLength(400);
                }).toThrow("'trackLength' should be within (0, 360].");
            });
        });
    });

    describe('gauge cleanup', function() {
        it('destroy created components', function() {
            var count = Ext.ComponentManager.getCount();

            createGauge();
            gauge.destroy();
            expect(Ext.ComponentManager.getCount()).toBe(count);
        });

        it('destroy animantions', function() {
            createGauge();
            var stopAnimationSpy = spyOn(gauge, 'stopAnimation');

            gauge.destroy();
            expect(stopAnimationSpy).toHaveBeenCalled();
        });

        it('remove event handlers', function() {
            createGauge();
            gauge.destroy();
            expect(gauge.events).toBe(null);
        });
    });
});
