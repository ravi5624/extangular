(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.SliderSaturation', ['Ext.ux.colorpick.*'], function() {
    
    var component, sliderSat, satField, colorMap;

    
    function createComponent(config) {
        component = Ext.create(Ext.apply({
            xtype: 'colorselector'
        }, config));

        return component;
    }

    function makeComponent(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createComponent(config);

        if (component) {
            sliderSat = component.lookupReference('satSlider') || {};
            satField = component.lookupReference('snumberfield') || {};
            colorMap = component.lookupReference('colorMap') || {};
        }
    }

    afterEach(function() {
        component = colorMap = sliderSat = satField = Ext.destroy(component, colorMap, sliderSat, satField);
    });

    describe('Colorpicker Saturation', function() {
        beforeEach(function() {
            makeComponent();
        });

        it('should fire setSaturation method', function() {

            var setSat = spyOn(sliderSat, 'setSaturation');

            waitsForSpy(setSat);

            runs(function() {
                expect(setSat).toHaveBeenCalled();
            });
        });

        it('should fire setHue method', function() {

            var setHue = spyOn(sliderSat, 'setHue');
            
            component.lookupReference('hnumberfield').setValue(10);

            waitsForSpy(setHue);

            runs(function() {
                expect(setHue).toHaveBeenCalled();
            });
        });

        it('should not have a minimum 0 value', function() {
            expect(satField.getMinValue()).toBe(0);
        });

        it('should not have a maximum 100 value', function() {
            expect(satField.getMaxValue()).toBe(100);
        });

        it('should throw error for negative value', function() {
            satField.setValue(-1);
            expect(satField.getError().length).toBeTruthy();
        });

        it('should throw error for value bigger than 100', function() {
            satField.setValue(101);
            expect(satField.getError().length).toBeTruthy();
        });

        it('should have error value as null when the value is valid', function() {
            satField.setValue(10);
            expect(satField.getError()).toBe(null);

            satField.setValue(0);
            expect(satField.getError()).toBe(null);

            satField.setValue(100);
            expect(satField.getError()).toBe(null);
        });

        it('should accept value with decimals', function() {
            satField.setValue(0.1);
            expect(satField.getError()).toBe(null);
        });

        it('should have a number format for 2 decimal places', function() {
            expect(satField.numberFormat).toBe('0.##');
        });

        it('should return value with maximum 2 decimals places', function() {
            satField.setValue(0.12345);
            expect(satField.getInputValue()).toBe('0.12');
        });

        it('should check draghandle position to be in center', function() {
            satField.setValue(50);
            var draghandle = sliderSat.getDragHandle(),
                dragContainer = sliderSat.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(+dragContainer.element.getHeight() / 2 + 'px');
            });
        });

        it('should check draghandle position to be at bottom', function() {
            satField.setValue(0);
            var draghandle = sliderSat.getDragHandle(),
                dragContainer = sliderSat.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(+dragContainer.element.getHeight() + 'px');
            });
        });

        it('should check draghandle position to be at top', function() {
            satField.setValue(100);
            var draghandle = sliderSat.getDragHandle();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(0 + 'px');
            });
        });
    });
});
