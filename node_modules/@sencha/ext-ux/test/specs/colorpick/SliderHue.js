(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.SliderHue', ['Ext.ux.colorpick.*'], function() {
    
    var component, sliderHue, hueField;

    function createComponent(config) {
        component = Ext.create(Ext.apply({
            xtype: 'colorselector'
        }, config));

        return component;
    }

    function makeComponent(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createComponent(config);

        if (component) {
            sliderHue = component.lookupReference('hueSlider') || {};
            hueField = component.lookupReference('hnumberfield') || {};
        }
    }

    
    afterEach(function() {
        component = sliderHue = hueField = Ext.destroy(component, sliderHue, hueField);
    });
    
    describe('Colorpicker Hue', function() {
        beforeEach(function() {
            makeComponent();
        });

        it('should fire setHue method', function() {

            var setHue = spyOn(sliderHue, 'setHue');

            waitsForSpy(setHue);

            runs(function() {
                expect(setHue).toHaveBeenCalled();
            });
        });
        
        it('should not have a minimum 0 value', function() {
            expect(hueField.getMinValue()).toBe(0);
        });

        it('should not have a maximum 360 value', function() {
            expect(hueField.getMaxValue()).toBe(360);
        });

        it('should throw error for negative value', function() {
            hueField.setValue(-1);
            expect(hueField.getError().length).toBeTruthy();
        });

        it('should throw error for value bigger than 360', function() {
            hueField.setValue(361);
            expect(hueField.getError().length).toBeTruthy();
        });

        it('should have error value as null when the value is valid', function() {
            hueField.setValue(10);
            expect(hueField.getError()).toBe(null);

            hueField.setValue(0);
            expect(hueField.getError()).toBe(null);

            hueField.setValue(360);
            expect(hueField.getError()).toBe(null);
        });

        it('should accept value with decimals', function() {
            hueField.setValue(0.1);
            expect(hueField.getError()).toBe(null);
        });

        it('should have a number format for 2 decimal places', function() {
            expect(hueField.numberFormat).toBe('0.##');
        });

        it('should return value with maximum 2 decimals places', function() {
            hueField.setValue(0.12345);
            expect(hueField.getInputValue()).toBe('0.12');
        });

        it('should check draghandle position to be in center', function() {
            hueField.setValue(180);
            var draghandle = sliderHue.getDragHandle(),
                dragContainer = sliderHue.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).not.toBeGreaterThan(+dragContainer.element.getHeight() / 2 + 'px');
            });
        });

        it('should check draghandle position to be at bottom', function() {
            hueField.setValue(0);
            var draghandle = sliderHue.getDragHandle(),
                dragContainer = sliderHue.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).not.toBeGreaterThan(+dragContainer.element.getHeight() + 'px');
            });
        });

        it('should check draghandle position to be at top', function() {
            hueField.setValue(360);
            var draghandle = sliderHue.getDragHandle();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(0 + 'px');
            });
        });
    });
});
