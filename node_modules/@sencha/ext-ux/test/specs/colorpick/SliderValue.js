(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.SliderValue', ['Ext.ux.colorpick.*', 'Ext.panel.Panel', 'Ext.layout.*'], function() {
    
    var component, sliderValue, valueField, colorMap, panel;

    function createComponent(config) {
        panel = Ext.create({
            xtype: 'panel',
            renderTo: Ext.getBody(),
            width: 600,
            height: 400,
            layout: 'fit',
            items: Ext.apply({
                xtype: 'colorselector'
            }, config)
        });
        component = panel.items.first();

        return component;
    }

    function makeComponent(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createComponent(config);

        if (component) {
            sliderValue = component.lookupReference('valueSlider') || {};
            valueField = component.lookupReference('vnumberfield') || {};
            colorMap = component.lookupReference('colorMap') || {};
        }
    }

    afterEach(function() {
        component = sliderValue = valueField = colorMap = Ext.destroy(component, sliderValue, valueField, colorMap);
        
        if (panel) {
            Ext.destroy(panel);
        }
    });
    
    describe('Colorpicker Value', function() {
        beforeEach(function() {
            makeComponent();
        });

        it('should fire setValue method', function() {

            var setValue = spyOn(sliderValue, 'setValue');

            waitsForSpy(setValue);

            runs(function() {
                expect(setValue).toHaveBeenCalled();
            });
        });

        it('should fire setHue method', function() {

            var setHue = spyOn(sliderValue, 'setHue');
            
            component.lookupReference('hnumberfield').setValue(10);

            waitsForSpy(setHue);

            runs(function() {
                expect(setHue).toHaveBeenCalled();
            });
        });
        
        it('should not have a minimum 0 value', function() {
            expect(valueField.getMinValue()).toBe(0);
        });

        it('should not have a maximum 100 value', function() {
            expect(valueField.getMaxValue()).toBe(100);
        });

        it('should throw error for negative value', function() {
            valueField.setValue(-1);
            expect(valueField.getError().length).toBeTruthy();
        });

        it('should throw error for value bigger than 100', function() {
            valueField.setValue(101);
            expect(valueField.getError().length).toBeTruthy();
        });

        it('should have error value as null when the value is valid', function() {
            valueField.setValue(10);
            expect(valueField.getError()).toBe(null);

            valueField.setValue(0);
            expect(valueField.getError()).toBe(null);

            valueField.setValue(100);
            expect(valueField.getError()).toBe(null);
        });

        it('should accept value with decimals', function() {
            valueField.setValue(0.1);
            expect(valueField.getError()).toBe(null);
        });

        it('should have a number format for 2 decimal places', function() {
            expect(valueField.numberFormat).toBe('0.##');
        });

        it('should return value with maximum 2 decimals places', function() {
            valueField.setValue(0.12345);
            expect(valueField.getInputValue()).toBe('0.12');
        });

        it('should check draghandle position to be in center', function() {
            valueField.setValue(50);
            var draghandle = sliderValue.getDragHandle(),
                dragContainer = sliderValue.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(+dragContainer.element.getHeight() / 2 + 'px');
            });
        });

        it('should check draghandle position to be at bottom', function() {
            valueField.setValue(0);
            var draghandle = sliderValue.getDragHandle(),
                dragContainer = sliderValue.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(+dragContainer.element.getHeight() + 'px');
            });
        });

        it('should check draghandle position to be at top', function() {
            valueField.setValue(100);
            var draghandle = sliderValue.getDragHandle();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(0 + 'px');
            });
        });
    });
});
