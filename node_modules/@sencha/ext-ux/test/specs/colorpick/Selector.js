(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.Selector', ['Ext.ux.colorpick.*', 'Ext.panel.Panel', 'Ext.layout.*'], function() {
    
    var component, panel;

    function createComponent(config) {
        panel = Ext.create({
            xtype: 'panel',
            renderTo: Ext.getBody(),
            width: 600,
            height: 400,
            layout: 'fit',
            items: Ext.apply({
                xtype: 'colorselector'
            }, config)
        });
        component = panel.items.first();

        return component;
    }

    function makeComponent(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createComponent(config);
    }

    afterEach(function() {
        component = Ext.destroy(component);

        if (panel) {
            Ext.destroy(panel);
        }
    });


    describe('Color Selector', function() {

        it('should render colorselector', function() {
            makeComponent();
            expect(component.xtype).toBe('colorselector');
        });

        it('should check the structure for Color map and Hex,rgb field', function() {

            var container;

            makeComponent();

            container = component.getItems().items[0].getItems().items;

            expect(component.lookupReference('colorMap').xtype).toBe('colorpickercolormap');
            expect(container[1].getItems().items[0].xtype).toBe('textfield');
            expect(container[1].getItems().items[1].xtype).toBe('numberfield');
            expect(container[1].getItems().items[2].xtype).toBe('numberfield');
            expect(container[1].getItems().items[3].xtype).toBe('numberfield');
        });

        it('should check the structure for slider and hue', function() {

            makeComponent();

            expect(component.lookupReference('hueSlider').xtype).toBe('colorpickersliderhue');
            expect(component.lookupReference('hnumberfield').xtype).toBe('numberfield');
        });

        it('should check the structure for slider and saturation field', function() {

            makeComponent();

            expect(component.lookupReference('satSlider').xtype).toBe('colorpickerslidersaturation');
            expect(component.lookupReference('snumberfield').xtype).toBe('numberfield');
        });

        it('should check the structure for slider and value field', function() {

            makeComponent();

            expect(component.lookupReference('valueSlider').xtype).toBe('colorpickerslidervalue');
            expect(component.lookupReference('vnumberfield').xtype).toBe('numberfield');
        });

        it('should check the structure for slider and alpha field', function() {

            makeComponent();

            expect(component.lookupReference('alphaSlider').xtype).toBe('colorpickerslideralpha');
            expect(component.lookupReference('anumberfield').xtype).toBe('numberfield');
        });

        it('should check the structure for preview', function() {

            var container;

            makeComponent();

            container = component.getItems().items[5].getItems().items;

            expect(container[0].xtype).toBe('colorpickercolorpreview');
        });

        it('should check the structure for previousColor preview', function() {

            var container;

            makeComponent({
                showPreviousColor: true
            });

            container = component.getItems().items[5].getItems().items;

            expect(container[0].xtype).toBe('colorpickercolorpreview');
            expect(container[1].xtype).toBe('colorpickercolorpreview');
        });

        it('should check the structure for ok/cancel buttons', function() {

            var container;

            makeComponent({
                showOkCancelButtons: true
            });

            container = component.getItems().items[5].getItems().items;

            expect(container[1].xtype).toBe('button');
            expect(container[2].xtype).toBe('button');
        });
    });

});
