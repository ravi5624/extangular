(Ext.toolkit === 'modern' ? topSuite : xtopSuite)("Ext.ux.colorpick.Button", ['Ext.Button', 'Ext.ux.colorpick.*'], function() {

    var colorButton;

    function createColorButton(config) {
        colorButton = Ext.create(Ext.apply({
            xtype: 'colorbutton'
        }, config));

        return colorButton;
    }

    function makeColorButton(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createColorButton(config);
    }

    afterEach(function() {
        colorButton = Ext.destroy(colorButton);
    });

    describe('Color Button', function() {
        it('should return the default set color', function() {
            makeColorButton(
                {
                    color: '000000'
                }
            );
            expect(colorButton.getValue()).toBe('000000');
        });

        it('should launch colorselector popup on click', function() {
            makeColorButton({
                color: 'ffffff'
            });
            expect(colorButton.getPopup().items.xtype).toBe('colorselector');
        });

        it('should match background color with selected color', function() {
            
            makeColorButton({
                color: 'rgb(255, 255, 255)',
                format: 'rgb'
            });

            if (!Ext.browser.is.IE && !Ext.isEdge) {
                expect(colorButton.filterEl.dom.style.backgroundColor).toBe('rgb(255, 255, 255)');
            }
            else {
                expect(colorButton.filterEl.dom.style.backgroundColor).toBe('rgba(255, 255, 255, 1)');
            }
        });
    });

    describe('color formats', function() {
        // white with transparency
        var hex3 = 'fff',
            hex6 = 'ffffff',
            hex8 = 'ffffff80', // 50% transparency
            rgb = 'rgb(255,255,255)',
            rgba = 'rgba(255,255,255,.5)'; // 50% transparency
        
        it('should convert values to the specified format', function() {
            
            makeColorButton({
                value: hex3,
                format: 'hex6'
            });
            
            // hex3 to hex6
            expect(colorButton.getValue()).toBe('ffffff');
            
            // hex6 to #hex6
            colorButton.setFormat('#hex6');
            colorButton.setValue(hex6);
            expect(colorButton.getValue()).toBe('#ffffff');
            
            // hex8 to #hex6 (strip transparency)
            colorButton.setFormat('#hex6');
            colorButton.setValue(hex8);
            expect(colorButton.getValue()).toBe('#ffffff');
            
            // rgb to hex6
            colorButton.setFormat('hex6');
            colorButton.setValue(rgb);
            expect(colorButton.getValue()).toBe('ffffff');
            
            // rgba to rgb (strip transparency)
            colorButton.setFormat('rgb');
            colorButton.setValue(rgba);
            expect(colorButton.getValue()).toBe('rgb(255,255,255)');
            
            // hex3 to rgba
            colorButton.setFormat('rgba');
            colorButton.setValue(hex3);
            expect(colorButton.getValue()).toBe('rgba(255,255,255,1)');
            
            // rgba to HEX6
            colorButton.setFormat('HEX6');
            colorButton.setValue(rgba);
            expect(colorButton.getValue()).toBe('FFFFFF');
        });
    });

    describe('alpha channel decimal format', function() {
        var value, idx;
        
        it('should round to 2 decimal places', function() {
            makeColorButton({
                value: 'rgba(255,255,255,.4567)',
                format: 'rgba'
            });
            
            value = colorButton.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('0.46');
        });
        
        it('should be an integer', function() {
            makeColorButton({
                value: 'rgba(255,255,255,1.00)',
                format: 'rgba'
            });
            
            value = colorButton.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('1');
        });
        
        it('should show 3 decimal places', function() {
            makeColorButton({
                value: 'rgba(255,255,255,.5678)',
                format: 'rgba',
                alphaDecimalFormat: '#.###'
            });
            
            value = colorButton.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('0.568');
        });
    });
});
