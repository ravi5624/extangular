(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.SliderAlpha', ['Ext.ux.colorpick.*'], function() {
    
    var component, sliderAlpha, alphaField;

    function createComponent(config) {
        component = Ext.create(Ext.apply({
            xtype: 'colorselector'
        }, config));

        return component;
    }

    function makeComponent(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createComponent(config);

        if (component) {
            sliderAlpha = component.lookupReference('alphaSlider') || {};
            alphaField = component.lookupReference('anumberfield') || {};
        }
    }

    beforeEach(function() {
        makeComponent();
    });

    afterEach(function() {
        component = sliderAlpha = alphaField = Ext.destroy(component, sliderAlpha, alphaField);
    });

    describe('Colorpicker Alpha', function() {
        it('should fire setAlpha method', function() {

            var setAlpha = spyOn(sliderAlpha, 'setAlpha');

            waitsForSpy(setAlpha);

            runs(function() {
                expect(setAlpha).toHaveBeenCalled();
            });
        });

        it('should fire setHue method', function() {

            var setHue = spyOn(sliderAlpha, 'setColor');
            
            component.lookupReference('hnumberfield').setValue(10);

            waitsForSpy(setHue);

            runs(function() {
                expect(setHue).toHaveBeenCalled();
            });
        });
        
        it('should not have a minimum 0 value', function() {
            expect(alphaField.getMinValue()).toBe(0);
        });

        it('should not have a maximum 100 value', function() {
            expect(alphaField.getMaxValue()).toBe(100);
        });

        it('should throw error for negative value', function() {
            alphaField.setValue(-1);
            expect(alphaField.getError().length).toBeTruthy();
        });

        it('should throw error for value bigger than 100', function() {
            alphaField.setValue(101);
            expect(alphaField.getError().length).toBeTruthy();
        });

        it('should have error value as null when the value is valid', function() {
            alphaField.setValue(10);
            expect(alphaField.getError()).toBe(null);

            alphaField.setValue(0);
            expect(alphaField.getError()).toBe(null);

            alphaField.setValue(100);
            expect(alphaField.getError()).toBe(null);
        });

        it('should accept value with decimals', function() {
            alphaField.setValue(0.1);
            expect(alphaField.getError()).toBe(null);
        });

        it('should have a number format for 2 decimal places', function() {
            expect(alphaField.numberFormat).toBe('0.##');
        });

        it('should return value with maximum 2 decimals places', function() {
            alphaField.setValue(0.12345);
            expect(alphaField.getInputValue()).toBe('0.12');
        });

        it('should check draghandle position to be in center', function() {
            alphaField.setValue(50);
            var draghandle = sliderAlpha.getDragHandle(),
                dragContainer = sliderAlpha.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(+dragContainer.element.getHeight() / 2 + 'px');
            });
        });

        it('should check draghandle position to be at bottom', function() {
            alphaField.setValue(0);
            var draghandle = sliderAlpha.getDragHandle(),
                dragContainer = sliderAlpha.getDragContainer();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(+dragContainer.element.getHeight() + 'px');
            });
        });

        it('should check draghandle position to be at top', function() {
            alphaField.setValue(100);
            var draghandle = sliderAlpha.getDragHandle();

            waits(500);

            runs(function() {
                expect(draghandle.el.dom.style.top).toBe(0 + 'px');
            });
        });
    });
});
