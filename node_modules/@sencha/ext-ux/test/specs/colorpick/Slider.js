(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.Slider', ['Ext.ux.colorpick.*'], function() {
    
    var component;

    function createComponent(config) {
        component = Ext.create(Ext.apply({
            xtype: 'colorpickerslider'
        }, config));

        return component;
    }

    function makeComponent(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createComponent(config);
    }

    afterEach(function() {
        component = Ext.destroy(component);
    });

    describe('Colorpicker Slider', function() {
        it('should trigger Mouse down event', function() {
            makeComponent();
            var spy = spyOn(component.controller, 'onMouseDown');
            
            jasmine.fireMouseEvent(component.el, 'mousedown');

            expect(spy).toHaveBeenCalled();

            jasmine.fireMouseEvent(component.el, 'mouseup');
        });
        
        it('should trigger handleDrag event', function() {
            makeComponent();
            var spy = spyOn(component.controller, 'onHandleDrag');
            
            jasmine.fireMouseEvent(component.el, 'mousedown');

            expect(spy).toHaveBeenCalled();

            jasmine.fireMouseEvent(component.el, 'mouseup');
        });

        
        it('should check if dragging is active', function() {
            makeComponent();
            var dragHandle = component.getDragHandle();
            
            jasmine.fireMouseEvent(component.el, 'mousedown');

            expect(dragHandle.isDragging).toBe(true);

            jasmine.fireMouseEvent(component.el, 'mouseup');

            expect(dragHandle.isDragging).toBe(false);
        });
    });
});
