(Ext.toolkit === 'classic' ? topSuite : xtopSuite)('Ext.ux.colorpick.Field', function() {
    var component, makeComponent;
    
    beforeEach(function() {
        makeComponent = function(config) {
            config = config || {};
            Ext.applyIf(config, {
                name: 'test',
                width: 300,
                renderTo: Ext.getBody()
            });
            component = new Ext.ux.colorpick.Field(config);
        };
    });
    
    afterEach(function() {
        component = makeComponent = Ext.destroy(component, makeComponent);
    });
    
    describe('color formats', function() {
        // white with transparency
        var hex3 = 'fff',
            hex6 = 'ffffff',
            hex8 = 'ffffff80', // 50% transparency
            rgb = 'rgb(255,255,255)',
            rgba = 'rgba(255,255,255,.5)'; // 50% transparency
        
        it('should convert values to the specified format', function() {
            var c;
            
            makeComponent({
                value: hex3,
                format: 'hex6'
            });
            c = component;
            
            // hex3 to hex6
            expect(c.getValue()).toBe('ffffff');
            
            // hex6 to #hex6
            c.setFormat('#hex6');
            c.setValue(hex6);
            expect(c.getValue()).toBe('#ffffff');
            
            // hex8 to #hex6 (strip transparency)
            c.setFormat('#hex6');
            c.setValue(hex8);
            expect(c.getValue()).toBe('#ffffff');
            
            // rgb to hex6
            c.setFormat('hex6');
            c.setValue(rgb);
            expect(c.getValue()).toBe('ffffff');
            
            // rgba to rgb (strip transparency)
            c.setFormat('rgb');
            c.setValue(rgba);
            expect(c.getValue()).toBe('rgb(255,255,255)');
            
            // hex3 to rgba
            c.setFormat('rgba');
            c.setValue(hex3);
            expect(c.getValue()).toBe('rgba(255,255,255,1)');
            
            // rgba to HEX6
            c.setFormat('HEX6');
            c.setValue(rgba);
            expect(c.getValue()).toBe('FFFFFF');
        });
    });
    
    describe('alpha channel decimal format', function() {
        var value, idx;
        
        it('should round to 2 decimal places', function() {
            makeComponent({
                value: 'rgba(255,255,255,.4567)',
                format: 'rgba'
            });
            
            value = component.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('0.46');
        });
        
        it('should be an integer', function() {
            makeComponent({
                value: 'rgba(255,255,255,1.00)',
                format: 'rgba'
            });
            
            value = component.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('1');
        });
        
        it('should show 3 decimal places', function() {
            makeComponent({
                value: 'rgba(255,255,255,.5678)',
                format: 'rgba',
                alphaDecimalFormat: '#.###'
            });
            
            value = component.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('0.568');
        });
    });
});

(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.Field', ['Ext.ux.colorpick.*'], function() {
    var component, makeComponent;
    
    beforeEach(function() {
        makeComponent = function(config) {
            config = config || {};
            component = Ext.create(Ext.apply({
                xtype: 'colorfield',
                name: 'test',
                width: 300,
                renderTo: Ext.getBody()
            }, config));

            return component;
        };
    });

    afterEach(function() {
        component = makeComponent = Ext.destroy(component, makeComponent);
    });

    describe('Color field', function() {
        it('should return the default set color', function() {
            makeComponent(
                {
                    value: '000000'
                }
            );
            expect(component.getValue()).toBe('000000');
        });

        it('should launch colorselector popup on click', function() {
            makeComponent({
                value: 'ffffff'
            });
            expect(component.getPopup().items.xtype).toBe('colorselector');
        });

        it('should match background color with selected color', function() {

            var swatchEl;
            
            makeComponent({
                value: 'rgb(255, 255, 255)',
                format: 'rgb'
            });

            swatchEl = component.element.down('.x-colorpicker-field-swatch-inner');

            if (!Ext.browser.is.IE && !Ext.isEdge) {
                expect(swatchEl.dom.style.backgroundColor).toBe('rgb(255, 255, 255)');
            }
            else {
                expect(swatchEl.dom.style.backgroundColor).toBe('rgba(255, 255, 255, 1)');
            }
        });
    });

    describe('color formats', function() {
        // white with transparency
        var hex3 = 'fff',
            hex6 = 'ffffff',
            hex8 = 'ffffff80', // 50% transparency
            rgb = 'rgb(255,255,255)',
            rgba = 'rgba(255,255,255,.5)'; // 50% transparency
        
        it('should convert values to the specified format', function() {
            var c;
            
            makeComponent({
                value: hex3,
                format: 'hex6'
            });
            c = component;
            
            // hex3 to hex6
            expect(c.getValue()).toBe('ffffff');
            
            // hex6 to #hex6
            c.setFormat('#hex6');
            c.setValue(hex6);
            expect(c.getValue()).toBe('#ffffff');
            
            // hex8 to #hex6 (strip transparency)
            c.setFormat('#hex6');
            c.setValue(hex8);
            expect(c.getValue()).toBe('#ffffff');
            
            // rgb to hex6
            c.setFormat('hex6');
            c.setValue(rgb);
            expect(c.getValue()).toBe('ffffff');
            
            // rgba to rgb (strip transparency)
            c.setFormat('rgb');
            c.setValue(rgba);
            expect(c.getValue()).toBe('rgb(255,255,255)');
            
            // hex3 to rgba
            c.setFormat('rgba');
            c.setValue(hex3);
            expect(c.getValue()).toBe('rgba(255,255,255,1)');
            
            // rgba to HEX6
            c.setFormat('HEX6');
            c.setValue(rgba);
            expect(c.getValue()).toBe('FFFFFF');
        });
    });
    
    describe('alpha channel decimal format', function() {
        var value, idx;
        
        it('should round to 2 decimal places', function() {
            makeComponent({
                value: 'rgba(255,255,255,.4567)',
                format: 'rgba'
            });
            value = component.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('0.46');
        });
        
        it('should be an integer', function() {
            makeComponent({
                value: 'rgba(255,255,255,1.00)',
                format: 'rgba'
            });
            
            value = component.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('1');
        });
        
        it('should show 3 decimal places', function() {
            makeComponent({
                value: 'rgba(255,255,255,.5678)',
                format: 'rgba',
                alphaDecimalFormat: '#.###'
            });
            
            value = component.getValue();
            idx = value.lastIndexOf(',');
            
            expect(value.substring(++idx, --value.length)).toBe('0.568');
        });
    });
});
