(Ext.toolkit === 'modern' ? topSuite : xtopSuite)('Ext.ux.colorpick.ColorMap', ['Ext.ux.colorpick.*', 'Ext.data.validator.*'], function() {
    
    var component, colorMap, r, g, b, hex;

    function createComponent(config) {
        component = Ext.create(Ext.apply({
            xtype: 'colorselector'
        }, config));

        return component;
    }

    function makeComponent(config) {
        config = Ext.apply({
            renderTo: Ext.getBody()
        }, config);

        createComponent(config);

        // colorMap = component.lookupReference('colorMap') || {};
        colorMap = component.getItems().items[0].getItems().items[0];
        hex = component.getItems().items[0].getItems().items[1].getItems().items[0];
        r = component.getItems().items[0].getItems().items[1].getItems().items[1];
        g = component.getItems().items[0].getItems().items[1].getItems().items[2];
        b = component.getItems().items[0].getItems().items[1].getItems().items[3];
    }

    beforeEach(function() {
        makeComponent();
    });

    afterEach(function() {
        colorMap = r = g = b = hex = null;
        component = Ext.destroy(component);
    });

    describe('R Field', function() {
        
        it('should not have a minimum 0 value', function() {
            expect(r.getMinValue()).toBe(0);
        });

        it('should not have a maximum 255 value', function() {
            expect(r.getMaxValue()).toBe(255);
        });

        it('should throw error for negative value', function() {
            r.setValue(-1);
            expect(r.getError().length).toBeTruthy();
        });

        it('should throw error for value bigger than 255', function() {
            r.setValue(256);
            expect(r.getError().length).toBeTruthy();
        });

        it('should have error value as null when the value is valid', function() {
            r.setValue(10);
            expect(r.getError()).toBe(null);

            r.setValue(0);
            expect(r.getError()).toBe(null);

            r.setValue(255);
            expect(r.getError()).toBe(null);
        });

        it('should not accept value with decimals', function() {
            r.setValue(0.1);
            expect(r.getError().length).toBeTruthy();
        });
    });

    describe('G Field', function() {
        
        it('should not have a minimum 0 value', function() {
            expect(g.getMinValue()).toBe(0);
        });

        it('should not have a maximum 255 value', function() {
            expect(g.getMaxValue()).toBe(255);
        });

        it('should throw error for negative value', function() {
            g.setValue(-1);
            expect(g.getError().length).toBeTruthy();
        });

        it('should throw error for value bigger than 255', function() {
            g.setValue(256);
            expect(g.getError().length).toBeTruthy();
        });

        it('should have error value as null when the value is valid', function() {
            g.setValue(10);
            expect(g.getError()).toBe(null);

            g.setValue(0);
            expect(g.getError()).toBe(null);

            g.setValue(255);
            expect(g.getError()).toBe(null);
        });

        it('should not accept value with decimals', function() {
            g.setValue(0.1);
            expect(g.getError().length).toBeTruthy();
        });
    });

    describe('B Field', function() {
        
        it('should not have a minimum 0 value', function() {
            expect(b.getMinValue()).toBe(0);
        });

        it('should not have a maximum 255 value', function() {
            expect(b.getMaxValue()).toBe(255);
        });

        it('should throw error for negative value', function() {
            b.setValue(-1);
            expect(b.getError().length).toBeTruthy();
        });

        it('should throw error for value bigger than 255', function() {
            b.setValue(256);
            expect(b.getError().length).toBeTruthy();
        });

        it('should have error value as null when the value is valid', function() {
            b.setValue(10);
            expect(b.getError()).toBe(null);

            b.setValue(0);
            expect(b.getError()).toBe(null);

            b.setValue(255);
            expect(b.getError()).toBe(null);
        });

        it('should not accept value with decimals', function() {
            b.setValue(0.1);
            expect(b.getError().length).toBeTruthy();
        });
    });

    
    describe('Color Map', function() {

        it('should fire setHue method', function() {

            var setHue = spyOn(colorMap, 'setHue');

            colorMap.setHue();

            expect(setHue).toHaveBeenCalled();
        });

        it('should fire setPosition method', function() {

            var setPos = spyOn(colorMap, 'setPosition');

            colorMap.setPosition();

            expect(setPos).toHaveBeenCalled();
        });

        it('should fire onColorBindingChanged method', function() {

            var onColorBindingChanged = spyOn(colorMap.controller, 'onColorBindingChanged');

            colorMap.controller.onColorBindingChanged();

            expect(onColorBindingChanged).toHaveBeenCalled();
        });

        it('should fire onHueBindingChanged method', function() {

            var onHueBindingChanged = spyOn(colorMap.controller, 'onHueBindingChanged');

            colorMap.controller.onHueBindingChanged();

            expect(onHueBindingChanged).toHaveBeenCalled();
        });

        it('should fire onMapClick method', function() {

            var onMapClick = spyOn(colorMap.controller, 'onMapClick');

            colorMap.controller.onMapClick();

            expect(onMapClick).toHaveBeenCalled();
        });

        it('should fire onMouseDown method', function() {

            var onMouseDown = spyOn(colorMap.controller, 'onMouseDown');

            colorMap.controller.onMouseDown();

            expect(onMouseDown).toHaveBeenCalled();
        });

        it('should fire onMouseUp method', function() {

            var onMouseUp = spyOn(colorMap.controller, 'onMouseUp');

            colorMap.controller.onMouseUp();

            expect(onMouseUp).toHaveBeenCalled();
        });

        it('should fire onHandleDrag method', function() {

            var onHandleDrag = spyOn(colorMap.controller, 'onHandleDrag');

            colorMap.controller.onHandleDrag();

            expect(onHandleDrag).toHaveBeenCalled();
        });

        describe('DragHandle should sync with Value', function() {

            it('should check draghandle position to be in center', function() {

                var valueField = component.lookupReference('vnumberfield'),
                    draghandle = colorMap.down('#dragHandle'),
                    dragContainer = colorMap.bodyElement;

                valueField.setValue(50);

                waits(500);

                runs(function() {
                    expect(draghandle.el.getStyle('top')).toBeLessThan(+dragContainer.getHeight() * 0.5 + 'px');
                });
            });

            it('should check draghandle position to be at bottom', function() {
                var valueField = component.lookupReference('vnumberfield'),
                    draghandle = colorMap.down('#dragHandle'),
                    dragContainer = colorMap.bodyElement;
                
                valueField.setValue(0);

                waits(500);

                runs(function() {
                    expect(draghandle.el.dom.style.top).toBe(+dragContainer.getHeight() + 'px');
                });
            });

            it('should check draghandle position to be at top', function() {
                var valueField = component.lookupReference('vnumberfield'),
                    draghandle = colorMap.down('#dragHandle');
                
                valueField.setValue(100);

                waits(500);

                runs(function() {
                    expect(draghandle.el.dom.style.top).toBe(0 + 'px');
                });
            });
        });

        describe('Draghandle should sync with saturation', function() {

            it('should check draghandle position to be in center', function() {

                var satField = component.lookupReference('snumberfield'),
                    draghandle = colorMap.down('#dragHandle'),
                    dragContainer = colorMap.bodyElement;

                satField.setValue(50);

                waits(500);

                runs(function() {
                    expect(draghandle.el.getStyle('left')).toBeGreaterThan(+dragContainer.getWidth() / 2 + 'px');
                });
            });

            it('should check draghandle position to be at right', function() {
                var satField = component.lookupReference('snumberfield'),
                    draghandle = colorMap.down('#dragHandle'),
                    dragContainer = colorMap.bodyElement;
                
                satField.setValue(100);

                waits(500);

                runs(function() {
                    expect(draghandle.el.dom.style.left).toBe(+dragContainer.getWidth() + 'px');
                });
            });

            it('should check draghandle position to be at left', function() {
                var satField = component.lookupReference('snumberfield'),
                    draghandle = colorMap.down('#dragHandle');
                
                satField.setValue(0);

                waits(500);

                runs(function() {
                    expect(draghandle.el.dom.style.left).toBe(0 + 'px');
                });
            });
        });
    });

    describe('Hex Field', function() {
        
        it('should allow valid hex color value', function() {
            var hexPattern = /^#[0-9a-f]{6}$/i;

            waits(500);

            runs(function() {
                expect(hex.getValue()).toMatch(hexPattern);
            });
        });
    });
});
